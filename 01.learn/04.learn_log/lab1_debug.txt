刚开始

(gdb) i r cs eip
cs             0xf000   61440
eip            0xfff0   0xfff0
0xf000:0xfff0

(gdb) i r cs eip
cs             0xf000   61440
eip            0xe05b   0xe05b
0xf000:0xe05b

b *0x7c00
0x7c00
0x7c00  cli                                                                                                   │
0x7c01  cld                                                                                                   │
0x7c02  xor    %ax,%ax                                                                                        │
0x7c04  mov    %ax,%ds                                                                                        │
0x7c06  mov    %ax,%es                                                                                        │
0x7c08  mov    %ax,%ss 


刚开始时是：
GDT 00000000 0000FFFF
IDT 00000000 0000FFFF

执行到0x7c00时
GDT 00F6C000 00000037
IDT 00000000 000003FF

# Bootstrap GDT
.p2align 2                                          # force 4 byte alignment
gdt:
    SEG_NULLASM                                     # null seg
    SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)           # code seg for bootloader and kernel
    SEG_ASM(STA_W, 0x0, 0xffffffff)                 # data seg for bootloader and kernel

gdtdesc:
    .word 0x17                                      # sizeof(gdt) - 1
    .long gdt                                       # address gdt


lgdt gdtdesc
lgdtw  0x7c6c
执行lgdt gdtdesc后：
GDT 00007C54 00000017
IDT 00000000 000003FF

0x7c54: 0x00000000      0x00000000      0x0000ffff      0x00cf9a00
0x7c64: 0x0000ffff      0x00cf9200      0x7c540017      0x89550000
0x7c74: 0x3c8d57e5      0xc1ca8910

可以看到全局描述符表一共三条：
|---------------------------------------|
|0000 0000 0000 0000 0000 0000 0000 0000|按照x86的设计，第0项均为0
|0000 0000 0000 0000 0000 0000 0000 0000|
|---------------------------------------|
|0000 0000 1100 1111 1001 1010 0000 0000|base = 0, limit = 0xFFFFF (1048575)1111 1111 1111 1111 1111
|0000 0000 0000 0000 1111 1111 1111 1111|type = 1010, 代码段的TYPE为：1010（执行、读）
|---------------------------------------|
|0000 0000 1100 1111 1001 0010 0000 0000|base = 0, limit = 0xFFFFF (1048575)1111 1111 1111 1111 1111 
|0000 0000 0000 0000 1111 1111 1111 1111|type = 0010, 数据段的TYPE为：0010（只读，向下扩展）
|---------------------------------------|

S: 1
DPL: 00
P: 1
AVL: 0
L: 0
D/B = 1
G = 1


│0x7c2d  ljmp   $0x8,$0x7c32                                                                                   │
│0x7c32  mov    $0xd88e0010,%eax                                                                               │
│0x7c38  mov    %ax,%es                                                                                        │
│0x7c3a  mov    %ax,%fs                                                                                        │
│0x7c3c  mov    %ax,%gs                                                                                        │
│0x7c3e  mov    %ax,%ss  


(gdb) i r cs eip
cs             0x0      0
eip            0x7c2d   0x7c2d

ljmp $PROT_MODE_CSEG, $protcseg
0x7c2d  ljmp   $0x8,$0x7c32        
执行后
(gdb) i r cs eip
cs             0x8      8
eip            0x7c32   0x7c32

执行到:
init.c: kern_init
(gdb) i r cs eip
cs             0x8      8
eip            0x100097 0x100097 <kern_init>

查看此时的GDT
GDT 00007C54 00000017
IDT 00000000 000003FF

执行完
ts.ts_ss0 = KERNEL_DS;  

(gdb) p ts
$3 = {ts_link = <unknown type>, ts_esp0 = <unknown type>, ts_ss0 = 16, ts_padding1 = 0, ts_esp1 = <unknown type>,
  ts_ss1 = 0, ts_padding2 = 0, ts_esp2 = <unknown type>, ts_ss2 = 0, ts_padding3 = 0, ts_cr3 = <unknown type>,
  ts_eip = <unknown type>, ts_eflags = <unknown type>, ts_eax = <unknown type>, ts_ecx = <unknown type>,
  ts_edx = <unknown type>, ts_ebx = <unknown type>, ts_esp = <unknown type>, ts_ebp = <unknown type>,
  ts_esi = <unknown type>, ts_edi = <unknown type>, ts_es = 0, ts_padding4 = 0, ts_cs = 0, ts_padding5 = 0,
  ts_ss = 0, ts_padding6 = 0, ts_ds = 0, ts_padding7 = 0, ts_fs = 0, ts_padding8 = 0, ts_gs = 0, ts_padding9 = 0,
  ts_ldt = 0, ts_padding10 = 0, ts_t = 0, ts_iomb = 0}

(gdb) i r cs eip
cs             0x8      8
eip            0x102a7e 0x102a7e <gdt_init+30>

SEG_TSS = 5

#define SEG16(type, base, lim, dpl)                        \
    (struct segdesc){                                    \
        (lim) & 0xffff, (base) & 0xffff,                \
        ((base) >> 16) & 0xff, type, 1, dpl, 1,            \
        (unsigned) (lim) >> 16, 0, 0, 1, 0,                \
        (unsigned) (base) >> 24                            \
    }

新的GDT
/* *
 * Global Descriptor Table:
 *
 * The kernel and user segments are identical (except for the DPL). To load
 * the %ss register, the CPL must equal the DPL. Thus, we must duplicate the
 * segments for the user and the kernel. Defined as follows:
 *   - 0x0 :  unused (always faults -- for trapping NULL far pointers)
 *   - 0x8 :  kernel code segment
 *   - 0x10:  kernel data segment
 *   - 0x18:  user code segment
 *   - 0x20:  user data segment
 *   - 0x28:  defined for tss, initialized in gdt_init
 * */
static struct segdesc gdt[] = {
    SEG_NULL,
    [SEG_KTEXT] = SEG(STA_X | STA_R, 0x0, 0xFFFFFFFF, DPL_KERNEL),
    [SEG_KDATA] = SEG(STA_W, 0x0, 0xFFFFFFFF, DPL_KERNEL),
    [SEG_UTEXT] = SEG(STA_X | STA_R, 0x0, 0xFFFFFFFF, DPL_USER),
    [SEG_UDATA] = SEG(STA_W, 0x0, 0xFFFFFFFF, DPL_USER),
    [SEG_TSS]    = SEG_NULL,
};

gdt[SEG_TSS] = SEG16(STS_T32A, (uint32_t)&ts, sizeof(ts), DPL_KERNEL);
gdt[SEG_TSS].sd_s = 0; 

#define STS_T32A        0x9            // Available 32-bit TSS
sizeof(ts) = 0x68 = 104
(uint32_t)&ts = (struct taskstate *) 0x10f8a0 <ts>

DPL_KERNEL = 0

SEG16(type, base, lim, dpl)  
gdt[5] = SEG16(0x9, 0x10f8a0, 104, 0);

查看此时的GDT
GDT 0010E9E0 0000002F
IDT 00000000 000003FF

0x10e9e0 <gdt>: 0x00000000      0x00000000      0x0000ffff      0x00cf9a00
0x10e9f0 <gdt+16>:      0x0000ffff      0x00cf9300      0x0000ffff      0x00cffa00
0x10ea00 <gdt+32>:      0x0000ffff      0x00cff300      0xf8a00068      0x00408b10
0x10ea10 <gdt_pd>:      0xe9e0002f      0x00000010      0x00000000      0x00000000
0x10ea20 <round.1241>:  0x00000000      0x00000000      0x00000000      0x00000000

------------------------------------------------------------------------------
|0x00000000|0000 0000 0000 0000 0000 0000 0000 0000|按照x86的设计，第0项均为0
|0x00000000|0000 0000 0000 0000 0000 0000 0000 0000|type = 1010, 代码段的TYPE为：1010（执行、读）
------------------------------------------------------------------------------                                
|0x00cf9a00|0000 0000 1100 1111 1001 1010 0000 0000|base = 0, limit = 0xFFFFF (1048575)1111 1111 1111 1111 1111
|0x0000ffff|0000 0000 0000 0000 1111 1111 1111 1111|DPL = 0, type = 1010, 代码段的TYPE为：1010（执行、读）,
------------------------------------------------------------------------------
|0x00cf9300|0000 0000 1100 1111 1001 0011 0000 0000|base = 0, limit = 0xFFFFF (1048575)1111 1111 1111 1111 1111
|0x0000ffff|0000 0000 0000 0000 1111 1111 1111 1111|DPL = 0, type = 0011, 数据段的TYPE为：0010（读写，可访问）
------------------------------------------------------------------------------
|0x00cffa00|0000 0000 1100 1111 1111 1010 0000 0000|base = 0, limit = 0xFFFFF (1048575)1111 1111 1111 1111 1111
|0x0000ffff|0000 0000 0000 0000 1111 1111 1111 1111|DPL = 3, type = 1010, 代码段的TYPE为：1010（执行、读）
------------------------------------------------------------------------------
|0x00cff300|0000 0000 1100 1111 1111 0011 0000 0000|base = 0, limit = 0xFFFFF (1048575)1111 1111 1111 1111 1111
|0x0000ffff|0000 0000 0000 0000 1111 1111 1111 1111|DPL = 3, type = 0011, 数据段的TYPE为：0010（读写，可访问）
------------------------------------------------------------------------------
|0x00408b10|0000 0000 0100 0000 1000 1011 0001 0000|
|0xf8a00068|1111 1000 1010 0000 0000 0000 0110 1000|
------------------------------------------------------------------------------
base = 0x10F8A0(1112224)0000 0000 0001 0000 1111 1000 1010 0000
limit = 0x68(104)0000 0000 0110 1000
DPL = 0, type = 1011, tss段的TYPE:1011（可执行、可读、可访问）


查看此时的GDT
GDT 0010E9E0 0000002F
IDT 0010F0A0 000007FF

0x10f0a0 <idt>:         0x00081f98      0x00108e00      0x00081fa1      0x00108e00
0x10f0b0 <idt+16>:      0x00081faa      0x00108e00      0x00081fb3      0x00108e00
0x10f0c0 <idt+32>:      0x00081fbc      0x00108e00      0x00081fc5      0x00108e00
0x10f0d0 <idt+48>:      0x00081fce      0x00108e00      0x00081fd7      0x00108e00
0x10f0e0 <idt+64>:      0x00081fe0      0x00108e00      0x00081fe7      0x00108e00
0x10f0f0 <idt+80>:      0x00081fee      0x00108e00      0x00081ff5      0x00108e00
0x10f100 <idt+96>:      0x00081ffc      0x00108e00      0x00082003      0x00108e00
0x10f110 <idt+112>:     0x0008200a      0x00108e00      0x00082011      0x00108e00
0x10f120 <idt+128>:     0x0008201a      0x00108e00      0x00082023      0x00108e00
0x10f130 <idt+144>:     0x0008202a      0x00108e00      0x00082033      0x00108e00
0x10f140 <idt+160>:     0x0008203c      0x00108e00      0x00082045      0x00108e00
0x10f150 <idt+176>:     0x0008204e      0x00108e00      0x00082057      0x00108e00
0x10f160 <idt+192>:     0x00080768      0x07658e00      0x0008076c      0x076c8e00
0x10f170 <idt+208>:     0x0008076f      0x07208e00      0x00080777      0x076f8e00
0x10f180 <idt+224>:     0x00080772      0x076c8e00      0x00080764      0x07218e00
0x10f190 <idt+240>:     0x0008072c      0x07208e00      0x00080730      0x07788e00
0x10f1a0 <idt+256>:     0x00080734      0x07368e00      0x00080734      0x07638e00
0x10f1b0 <idt+272>:     0x00080734      0x07358e00      0x00080737      0x07668e00
0x10f1c0 <idt+288>:     0x000820cc      0x00108e00      0x000820d5      0x00108e00
0x10f1d0 <idt+304>:     0x000820de      0x00108e00      0x000820e7      0x00108e00
0x10f1e0 <idt+320>:     0x000820f0      0x00108e00      0x000820f9      0x00108e00
0x10f1f0 <idt+336>:     0x00082102      0x00108e00      0x0008210b      0x00108e00
0x10f200 <idt+352>:     0x00082114      0x00108e00      0x0008211d      0x00108e00
0x10f210 <idt+368>:     0x00082126      0x00108e00      0x0008212f      0x00108e00
0x10f220 <idt+384>:     0x00082138      0x00108e00      0x00082141      0x00108e00
......







