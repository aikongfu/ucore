
kernel：     文件格式 elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
    # 地址映射的过渡阶段
    # 在bootasm.S里面已经设置过gdt了，这里重新设置一下，重装映射物理内存
    # 虚地址的 0~4G = 线性地址&物理地址-KERNBASE ~ 4G-KERNBASE
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE
    lgdt REALLOC(__gdtdesc)     # REALLOC(x) (x - KERNBASE)
c0100000:       0f 01 15 18 b0 10 00    lgdtl  0x10b018
    movl $KERNEL_DS, %eax       # 开始设置数据段
c0100007:       b8 10 00 00 00          mov    $0x10,%eax
    movw %ax, %ds
c010000c:       8e d8                   mov    %eax,%ds
    movw %ax, %es
c010000e:       8e c0                   mov    %eax,%es
    movw %ax, %ss
c0100010:       8e d0                   mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated    # ljmp $section,$offset即跳转到section:offset地址。
c0100012:       ea 19 00 10 c0 08 00    ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp     # ebp 设置为0，即栈基址寄存器设置为0
c0100019:       bd 00 00 00 00          mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:       bc 00 b0 10 c0          mov    $0xc010b000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:       e8 02 00 00 00          call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:       eb fe                   jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:       55                      push   %ebp
c010002b:       89 e5                   mov    %esp,%ebp
c010002d:       83 ec 28                sub    $0x28,%esp
    // TODO 需要搞清楚作用
    // “edata”表示数据段的结束地址“.bss”表示数据段的结束地址和BSS段的起始地址，而“end”表示BSS段的结束地址。
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:       ba e4 c9 10 c1          mov    $0xc 110c9e4,%edx
c0100035:       b8 3c ba 10 c0          mov    $0xc010ba3c,%eax
c010003a:       29 c2                   sub    %eax,%edx
c010003c:       89 d0                   mov    %edx,%eax
c010003e:       89 44 24 08             mov    %eax,0x8(%esp)
c0100042:       c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)
c0100049:       00
c010004a:       c7 04 24 3c ba 10 c0    movl   $0xc010ba3c,(%esp)
c0100051:       e8 5b 65 00 00          call   c01065b1 <memset>

    cons_init();                // init the console
c0100056:       e8 d6 15 00 00          call   c0101631 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:       c7 45 f4 c0 6d 10 c0    movl   $0xc0106dc0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100065:       89 44 24 04             mov    %eax,0x4(%esp)
c0100069:       c7 04 24 dc 6d 10 c0    movl   $0xc0106ddc,(%esp)
c0100070:       e8 71 02 00 00          call   c01002e6 <cprintf>

    print_kerninfo();
c0100075:       e8 12 09 00 00          call   c010098c <print_kerninfo>

    // 最后调用到print_stackframe
    // 看不出来作用？可能是要试一下给C执行环境准备的栈是否可用？
    grade_backtrace();
c010007a:       e8 db 00 00 00          call   c010015a <grade_backtrace>
    cprintf("%s\n\n", "grade_backtrace");
c010007f:       c7 44 24 04 e1 6d 10    movl   $0xc0106de1,0x4(%esp)
c0100086:       c0
c0100087:       c7 04 24 dc 6d 10 c0    movl   $0xc0106ddc,(%esp)
c010008e:       e8 53 02 00 00          call   c01002e6 <cprintf>

    // LAB2 实验
    pmm_init();                 // init physical memory management
c0100093:       e8 d3 32 00 00          call   c010336b <pmm_init>
    cprintf("%s\n\n", "pmm_init");
c0100098:       c7 44 24 04 f1 6d 10    movl   $0xc0106df1,0x4(%esp)
c010009f:       c0
c01000a0:       c7 04 24 dc 6d 10 c0    movl   $0xc0106ddc,(%esp)
c01000a7:       e8 3a 02 00 00          call   c01002e6 <cprintf>

    // 初始化中断控制器
    pic_init();                 // init interrupt controller
c01000ac:       e8 dd 16 00 00          call   c010178e <pic_init>
    cprintf("%s\n\n", "pic_init");
c01000b1:       c7 44 24 04 fa 6d 10    movl   $0xc0106dfa,0x4(%esp)
c01000b8:       c0
c01000b9:       c7 04 24 dc 6d 10 c0    movl   $0xc0106ddc,(%esp)
c01000c0:       e8 21 02 00 00          call   c01002e6 <cprintf>

    // 初始化中断描述符表
    idt_init();                 // init interrupt descriptor table
c01000c5:       e8 27 18 00 00          call   c01018f1 <idt_init>
    cprintf("%s\n\n", "idt_init");
c01000ca:       c7 44 24 04 03 6e 10    movl   $0xc0106e03,0x4(%esp)
c01000d1:       c0
c01000d2:       c7 04 24 dc 6d 10 c0    movl   $0xc0106ddc,(%esp)
c01000d9:       e8 08 02 00 00          call   c01002e6 <cprintf>

    // 初始化时钟中断
    clock_init();               // init clock interrupt
c01000de:       e8 04 0d 00 00          call   c0100de7 <clock_init>
    // 通过内联汇编调用 "sti" 指令，置中断允许位
    intr_enable();              // enable irq interrupt
c01000e3:       e8 e1 17 00 00          call   c01018c9 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    lab1_switch_test();
c01000e8:       e8 6d 01 00 00          call   c010025a <lab1_switch_test>

    /* do nothing */
    while (1);
c01000ed:       eb fe                   jmp    c01000ed <kern_init+0xc3>

c01000ef <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000ef:       55                      push   %ebp
c01000f0:       89 e5                   mov    %esp,%ebp
c01000f2:       83 ec 18                sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000f5:       c7 44 24 08 00 00 00    movl   $0x0,0x8(%esp)
c01000fc:       00
c01000fd:       c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)
c0100104:       00
c0100105:       c7 04 24 00 00 00 00    movl   $0x0,(%esp)
c010010c:       e8 c4 0c 00 00          call   c0100dd5 <mon_backtrace>
}
c0100111:       c9                      leave
c0100112:       c3                      ret

c0100113 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c0100113:       55                      push   %ebp
c0100114:       89 e5                   mov    %esp,%ebp
c0100116:       53                      push   %ebx
c0100117:       83 ec 14                sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c010011a:       8d 5d 0c                lea    0xc(%ebp),%ebx
c010011d:       8b 4d 0c                mov    0xc(%ebp),%ecx
c0100120:       8d 55 08                lea    0x8(%ebp),%edx
c0100123:       8b 45 08                mov    0x8(%ebp),%eax
c0100126:       89 5c 24 0c             mov    %ebx,0xc(%esp)
c010012a:       89 4c 24 08             mov    %ecx,0x8(%esp)
c010012e:       89 54 24 04             mov    %edx,0x4(%esp)
c0100132:       89 04 24                mov    %eax,(%esp)
c0100135:       e8 b5 ff ff ff          call   c01000ef <grade_backtrace2>
}
c010013a:       83 c4 14                add    $0x14,%esp
c010013d:       5b                      pop    %ebx
c010013e:       5d                      pop    %ebp
c010013f:       c3                      ret

c0100140 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100140:       55                      push   %ebp
c0100141:       89 e5                   mov    %esp,%ebp
c0100143:       83 ec 18                sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100146:       8b 45 10                mov    0x10(%ebp),%eax
c0100149:       89 44 24 04             mov    %eax,0x4(%esp)
c010014d:       8b 45 08                mov    0x8(%ebp),%eax
c0100150:       89 04 24                mov    %eax,(%esp)
c0100153:       e8 bb ff ff ff          call   c0100113 <grade_backtrace1>
}
c0100158:       c9                      leave
c0100159:       c3                      ret

c010015a <grade_backtrace>:

void
grade_backtrace(void) {
c010015a:       55                      push   %ebp
c010015b:       89 e5                   mov    %esp,%ebp
c010015d:       83 ec 18                sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100160:       b8 2a 00 10 c0          mov    $0xc010002a,%eax
c0100165:       c7 44 24 08 00 00 ff    movl   $0xffff0000,0x8(%esp)
c010016c:       ff
c010016d:       89 44 24 04             mov    %eax,0x4(%esp)
c0100171:       c7 04 24 00 00 00 00    movl   $0x0,(%esp)
c0100178:       e8 c3 ff ff ff          call   c0100140 <grade_backtrace0>
}
c010017d:       c9                      leave
c010017e:       c3                      ret

c010017f <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010017f:       55                      push   %ebp
c0100180:       89 e5                   mov    %esp,%ebp
c0100182:       83 ec 28                sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100185:       8c 4d f6                mov    %cs,-0xa(%ebp)
c0100188:       8c 5d f4                mov    %ds,-0xc(%ebp)
c010018b:       8c 45 f2                mov    %es,-0xe(%ebp)
c010018e:       8c 55 f0                mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100191:       0f b7 45 f6             movzwl -0xa(%ebp),%eax
c0100195:       0f b7 c0                movzwl %ax,%eax
c0100198:       83 e0 03                and    $0x3,%eax
c010019b:       89 c2                   mov    %eax,%edx
c010019d:       a1 40 ba 10 c0          mov    0xc010ba40,%eax
c01001a2:       89 54 24 08             mov    %edx,0x8(%esp)
c01001a6:       89 44 24 04             mov    %eax,0x4(%esp)
c01001aa:       c7 04 24 0c 6e 10 c0    movl   $0xc0106e0c,(%esp)
c01001b1:       e8 30 01 00 00          call   c01002e6 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c01001b6:       0f b7 45 f6             movzwl -0xa(%ebp),%eax
c01001ba:       0f b7 d0                movzwl %ax,%edx
c01001bd:       a1 40 ba 10 c0          mov    0xc010ba40,%eax
c01001c2:       89 54 24 08             mov    %edx,0x8(%esp)
c01001c6:       89 44 24 04             mov    %eax,0x4(%esp)
c01001ca:       c7 04 24 1a 6e 10 c0    movl   $0xc0106e1a,(%esp)
c01001d1:       e8 10 01 00 00          call   c01002e6 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001d6:       0f b7 45 f4             movzwl -0xc(%ebp),%eax
c01001da:       0f b7 d0                movzwl %ax,%edx
c01001dd:       a1 40 ba 10 c0          mov    0xc010ba40,%eax
c01001e2:       89 54 24 08             mov    %edx,0x8(%esp)
c01001e6:       89 44 24 04             mov    %eax,0x4(%esp)
c01001ea:       c7 04 24 28 6e 10 c0    movl   $0xc0106e28,(%esp)
c01001f1:       e8 f0 00 00 00          call   c01002e6 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001f6:       0f b7 45 f2             movzwl -0xe(%ebp),%eax
c01001fa:       0f b7 d0                movzwl %ax,%edx
c01001fd:       a1 40 ba 10 c0          mov    0xc010ba40,%eax
c0100202:       89 54 24 08             mov    %edx,0x8(%esp)
c0100206:       89 44 24 04             mov    %eax,0x4(%esp)
c010020a:       c7 04 24 36 6e 10 c0    movl   $0xc0106e36,(%esp)
c0100211:       e8 d0 00 00 00          call   c01002e6 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c0100216:       0f b7 45 f0             movzwl -0x10(%ebp),%eax
c010021a:       0f b7 d0                movzwl %ax,%edx
c010021d:       a1 40 ba 10 c0          mov    0xc010ba40,%eax
c0100222:       89 54 24 08             mov    %edx,0x8(%esp)
c0100226:       89 44 24 04             mov    %eax,0x4(%esp)
c010022a:       c7 04 24 44 6e 10 c0    movl   $0xc0106e44,(%esp)
c0100231:       e8 b0 00 00 00          call   c01002e6 <cprintf>
    round ++;
c0100236:       a1 40 ba 10 c0          mov    0xc010ba40,%eax
c010023b:       83 c0 01                add    $0x1,%eax
c010023e:       a3 40 ba 10 c0          mov    %eax,0xc010ba40
}
c0100243:       c9                      leave
c0100244:       c3                      ret

c0100245 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100245:       55                      push   %ebp
c0100246:       89 e5                   mov    %esp,%ebp
        将原来的栈顶指针还给esp栈底指针
--------------------------------------------------------
*/

    //LAB1 CHALLENGE 1 : TODO
    __asm__ __volatile__ (
c0100248:       83 ec 08                sub    $0x8,%esp
c010024b:       cd 78                   int    $0x78
c010024d:       89 ec                   mov    %ebp,%esp
为了在切换为应用态后，保存原有堆栈结构不变，确保程序正确运行，栈顶的位置应该被恢复到中断发生前的位置。
SS、ESP是通过push指令压栈的，压入SS后，ESP的值已经上移了4个字节，所以在trap_dispatch将ESP下移4字节。
为了保证在用户态下也能使用I/O，将IOPL降低到了ring 3。
--------------------------------------------------------
*/
}
c010024f:       5d                      pop    %ebp
c0100250:       c3                      ret

c0100251 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100251:       55                      push   %ebp
c0100252:       89 e5                   mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
    // 当内核初始完毕后，可从内核态返回到用户态的函数
    __asm__ __volatile__ (
c0100254:       cd 79                   int    $0x79
c0100256:       89 ec                   mov    %ebp,%esp
        "INT %0 \n"
        "movl %%ebp, %%esp \n"
        :
        :"irq"(T_SWITCH_TOK)
    );
}
c0100258:       5d                      pop    %ebp
c0100259:       c3                      ret

c010025a <lab1_switch_test>:

static void
lab1_switch_test(void) {
c010025a:       55                      push   %ebp
c010025b:       89 e5                   mov    %esp,%ebp
c010025d:       83 ec 18                sub    $0x18,%esp
    lab1_print_cur_status();
c0100260:       e8 1a ff ff ff          call   c010017f <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100265:       c7 04 24 54 6e 10 c0    movl   $0xc0106e54,(%esp)
c010026c:       e8 75 00 00 00          call   c01002e6 <cprintf>
    lab1_switch_to_user();
c0100271:       e8 cf ff ff ff          call   c0100245 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100276:       e8 04 ff ff ff          call   c010017f <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010027b:       c7 04 24 74 6e 10 c0    movl   $0xc0106e74,(%esp)
c0100282:       e8 5f 00 00 00          call   c01002e6 <cprintf>
    lab1_switch_to_kernel();
c0100287:       e8 c5 ff ff ff          call   c0100251 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010028c:       e8 ee fe ff ff          call   c010017f <lab1_print_cur_status>
}
c0100291:       c9                      leave
c0100292:       c3                      ret

c0100293 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100293:       55                      push   %ebp
c0100294:       89 e5                   mov    %esp,%ebp
c0100296:       83 ec 18                sub    $0x18,%esp
    cons_putc(c);
c0100299:       8b 45 08                mov    0x8(%ebp),%eax
c010029c:       89 04 24                mov    %eax,(%esp)
c010029f:       e8 b9 13 00 00          call   c010165d <cons_putc>
    (*cnt) ++;
c01002a4:       8b 45 0c                mov    0xc(%ebp),%eax
c01002a7:       8b 00                   mov    (%eax),%eax
c01002a9:       8d 50 01                lea    0x1(%eax),%edx
c01002ac:       8b 45 0c                mov    0xc(%ebp),%eax
c01002af:       89 10                   mov    %edx,(%eax)
}
c01002b1:       c9                      leave
c01002b2:       c3                      ret

c01002b3 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c01002b3:       55                      push   %ebp
c01002b4:       89 e5                   mov    %esp,%ebp
c01002b6:       83 ec 28                sub    $0x28,%esp
    int cnt = 0;
c01002b9:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c01002c0:       8b 45 0c                mov    0xc(%ebp),%eax
c01002c3:       89 44 24 0c             mov    %eax,0xc(%esp)
c01002c7:       8b 45 08                mov    0x8(%ebp),%eax
c01002ca:       89 44 24 08             mov    %eax,0x8(%esp)
c01002ce:       8d 45 f4                lea    -0xc(%ebp),%eax
c01002d1:       89 44 24 04             mov    %eax,0x4(%esp)
c01002d5:       c7 04 24 93 02 10 c0    movl   $0xc0100293,(%esp)
c01002dc:       e8 22 66 00 00          call   c0106903 <vprintfmt>
    return cnt;
c01002e1:       8b 45 f4                mov    -0xc(%ebp),%eax
}
c01002e4:       c9                      leave
c01002e5:       c3                      ret

c01002e6 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c01002e6:       55                      push   %ebp
c01002e7:       89 e5                   mov    %esp,%ebp
c01002e9:       83 ec 28                sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c01002ec:       8d 45 0c                lea    0xc(%ebp),%eax
c01002ef:       89 45 f0                mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c01002f2:       8b 45 f0                mov    -0x10(%ebp),%eax
c01002f5:       89 44 24 04             mov    %eax,0x4(%esp)
c01002f9:       8b 45 08                mov    0x8(%ebp),%eax
c01002fc:       89 04 24                mov    %eax,(%esp)
c01002ff:       e8 af ff ff ff          call   c01002b3 <vcprintf>
c0100304:       89 45 f4                mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100307:       8b 45 f4                mov    -0xc(%ebp),%eax
}
c010030a:       c9                      leave
c010030b:       c3                      ret

c010030c <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010030c:       55                      push   %ebp
c010030d:       89 e5                   mov    %esp,%ebp
c010030f:       83 ec 18                sub    $0x18,%esp
    cons_putc(c);
c0100312:       8b 45 08                mov    0x8(%ebp),%eax
c0100315:       89 04 24                mov    %eax,(%esp)
c0100318:       e8 40 13 00 00          call   c010165d <cons_putc>
}
c010031d:       c9                      leave
c010031e:       c3                      ret

c010031f <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010031f:       55                      push   %ebp
c0100320:       89 e5                   mov    %esp,%ebp
c0100322:       83 ec 28                sub    $0x28,%esp
    int cnt = 0;
c0100325:       c7 45 f0 00 00 00 00    movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c010032c:       eb 13                   jmp    c0100341 <cputs+0x22>
        cputch(c, &cnt);
c010032e:       0f be 45 f7             movsbl -0x9(%ebp),%eax
c0100332:       8d 55 f0                lea    -0x10(%ebp),%edx
c0100335:       89 54 24 04             mov    %edx,0x4(%esp)
c0100339:       89 04 24                mov    %eax,(%esp)
c010033c:       e8 52 ff ff ff          call   c0100293 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c0100341:       8b 45 08                mov    0x8(%ebp),%eax
c0100344:       8d 50 01                lea    0x1(%eax),%edx
c0100347:       89 55 08                mov    %edx,0x8(%ebp)
c010034a:       0f b6 00                movzbl (%eax),%eax
c010034d:       88 45 f7                mov    %al,-0x9(%ebp)
c0100350:       80 7d f7 00             cmpb   $0x0,-0x9(%ebp)
c0100354:       75 d8                   jne    c010032e <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c0100356:       8d 45 f0                lea    -0x10(%ebp),%eax
c0100359:       89 44 24 04             mov    %eax,0x4(%esp)
c010035d:       c7 04 24 0a 00 00 00    movl   $0xa,(%esp)
c0100364:       e8 2a ff ff ff          call   c0100293 <cputch>
    return cnt;
c0100369:       8b 45 f0                mov    -0x10(%ebp),%eax
}
c010036c:       c9                      leave
c010036d:       c3                      ret

c010036e <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c010036e:       55                      push   %ebp
c010036f:       89 e5                   mov    %esp,%ebp
c0100371:       83 ec 18                sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100374:       e8 20 13 00 00          call   c0101699 <cons_getc>
c0100379:       89 45 f4                mov    %eax,-0xc(%ebp)
c010037c:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c0100380:       74 f2                   je     c0100374 <getchar+0x6>
        /* do nothing */;
    return c;
c0100382:       8b 45 f4                mov    -0xc(%ebp),%eax
}
c0100385:       c9                      leave
c0100386:       c3                      ret

c0100387 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100387:       55                      push   %ebp
c0100388:       89 e5                   mov    %esp,%ebp
c010038a:       83 ec 28                sub    $0x28,%esp
    if (prompt != NULL) {
c010038d:       83 7d 08 00             cmpl   $0x0,0x8(%ebp)
c0100391:       74 13                   je     c01003a6 <readline+0x1f>
        cprintf("%s", prompt);
c0100393:       8b 45 08                mov    0x8(%ebp),%eax
c0100396:       89 44 24 04             mov    %eax,0x4(%esp)
c010039a:       c7 04 24 93 6e 10 c0    movl   $0xc0106e93,(%esp)
c01003a1:       e8 40 ff ff ff          call   c01002e6 <cprintf>
    }
    int i = 0, c;
c01003a6:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c01003ad:       e8 bc ff ff ff          call   c010036e <getchar>
c01003b2:       89 45 f0                mov    %eax,-0x10(%ebp)
        if (c < 0) {
c01003b5:       83 7d f0 00             cmpl   $0x0,-0x10(%ebp)
c01003b9:       79 07                   jns    c01003c2 <readline+0x3b>
            return NULL;
c01003bb:       b8 00 00 00 00          mov    $0x0,%eax
c01003c0:       eb 79                   jmp    c010043b <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c01003c2:       83 7d f0 1f             cmpl   $0x1f,-0x10(%ebp)
c01003c6:       7e 28                   jle    c01003f0 <readline+0x69>
c01003c8:       81 7d f4 fe 03 00 00    cmpl   $0x3fe,-0xc(%ebp)
c01003cf:       7f 1f                   jg     c01003f0 <readline+0x69>
            cputchar(c);
c01003d1:       8b 45 f0                mov    -0x10(%ebp),%eax
c01003d4:       89 04 24                mov    %eax,(%esp)
c01003d7:       e8 30 ff ff ff          call   c010030c <cputchar>
            buf[i ++] = c;
c01003dc:       8b 45 f4                mov    -0xc(%ebp),%eax
c01003df:       8d 50 01                lea    0x1(%eax),%edx
c01003e2:       89 55 f4                mov    %edx,-0xc(%ebp)
c01003e5:       8b 55 f0                mov    -0x10(%ebp),%edx
c01003e8:       88 90 60 ba 10 c0       mov    %dl,-0x3fef45a0(%eax)
c01003ee:       eb 46                   jmp    c0100436 <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01003f0:       83 7d f0 08             cmpl   $0x8,-0x10(%ebp)
c01003f4:       75 17                   jne    c010040d <readline+0x86>
c01003f6:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c01003fa:       7e 11                   jle    c010040d <readline+0x86>
            cputchar(c);
c01003fc:       8b 45 f0                mov    -0x10(%ebp),%eax
c01003ff:       89 04 24                mov    %eax,(%esp)
c0100402:       e8 05 ff ff ff          call   c010030c <cputchar>
            i --;
c0100407:       83 6d f4 01             subl   $0x1,-0xc(%ebp)
c010040b:       eb 29                   jmp    c0100436 <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c010040d:       83 7d f0 0a             cmpl   $0xa,-0x10(%ebp)
c0100411:       74 06                   je     c0100419 <readline+0x92>
c0100413:       83 7d f0 0d             cmpl   $0xd,-0x10(%ebp)
c0100417:       75 1d                   jne    c0100436 <readline+0xaf>
            cputchar(c);
c0100419:       8b 45 f0                mov    -0x10(%ebp),%eax
c010041c:       89 04 24                mov    %eax,(%esp)
c010041f:       e8 e8 fe ff ff          call   c010030c <cputchar>
            buf[i] = '\0';
c0100424:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100427:       05 60 ba 10 c0          add    $0xc010ba60,%eax
c010042c:       c6 00 00                movb   $0x0,(%eax)
            return buf;
c010042f:       b8 60 ba 10 c0          mov    $0xc010ba60,%eax
c0100434:       eb 05                   jmp    c010043b <readline+0xb4>
        }
    }
c0100436:       e9 72 ff ff ff          jmp    c01003ad <readline+0x26>
}
c010043b:       c9                      leave
c010043c:       c3                      ret

c010043d <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c010043d:       55                      push   %ebp
c010043e:       89 e5                   mov    %esp,%ebp
c0100440:       83 ec 28                sub    $0x28,%esp
    if (is_panic) {
c0100443:       a1 60 be 10 c0          mov    0xc010be60,%eax
c0100448:       85 c0                   test   %eax,%eax
c010044a:       74 02                   je     c010044e <__panic+0x11>
        goto panic_dead;
c010044c:       eb 48                   jmp    c0100496 <__panic+0x59>
    }
    is_panic = 1;
c010044e:       c7 05 60 be 10 c0 01    movl   $0x1,0xc010be60
c0100455:       00 00 00

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100458:       8d 45 14                lea    0x14(%ebp),%eax
c010045b:       89 45 f4                mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c010045e:       8b 45 0c                mov    0xc(%ebp),%eax
c0100461:       89 44 24 08             mov    %eax,0x8(%esp)
c0100465:       8b 45 08                mov    0x8(%ebp),%eax
c0100468:       89 44 24 04             mov    %eax,0x4(%esp)
c010046c:       c7 04 24 96 6e 10 c0    movl   $0xc0106e96,(%esp)
c0100473:       e8 6e fe ff ff          call   c01002e6 <cprintf>
    vcprintf(fmt, ap);
c0100478:       8b 45 f4                mov    -0xc(%ebp),%eax
c010047b:       89 44 24 04             mov    %eax,0x4(%esp)
c010047f:       8b 45 10                mov    0x10(%ebp),%eax
c0100482:       89 04 24                mov    %eax,(%esp)
c0100485:       e8 29 fe ff ff          call   c01002b3 <vcprintf>
    cprintf("\n");
c010048a:       c7 04 24 b2 6e 10 c0    movl   $0xc0106eb2,(%esp)
c0100491:       e8 50 fe ff ff          call   c01002e6 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100496:       e8 34 14 00 00          call   c01018cf <intr_disable>
    while (1) {
        kmonitor(NULL);
c010049b:       c7 04 24 00 00 00 00    movl   $0x0,(%esp)
c01004a2:       e8 5f 08 00 00          call   c0100d06 <kmonitor>
    }
c01004a7:       eb f2                   jmp    c010049b <__panic+0x5e>

c01004a9 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c01004a9:       55                      push   %ebp
c01004aa:       89 e5                   mov    %esp,%ebp
c01004ac:       83 ec 28                sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c01004af:       8d 45 14                lea    0x14(%ebp),%eax
c01004b2:       89 45 f4                mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c01004b5:       8b 45 0c                mov    0xc(%ebp),%eax
c01004b8:       89 44 24 08             mov    %eax,0x8(%esp)
c01004bc:       8b 45 08                mov    0x8(%ebp),%eax
c01004bf:       89 44 24 04             mov    %eax,0x4(%esp)
c01004c3:       c7 04 24 b4 6e 10 c0    movl   $0xc0106eb4,(%esp)
c01004ca:       e8 17 fe ff ff          call   c01002e6 <cprintf>
    vcprintf(fmt, ap);
c01004cf:       8b 45 f4                mov    -0xc(%ebp),%eax
c01004d2:       89 44 24 04             mov    %eax,0x4(%esp)
c01004d6:       8b 45 10                mov    0x10(%ebp),%eax
c01004d9:       89 04 24                mov    %eax,(%esp)
c01004dc:       e8 d2 fd ff ff          call   c01002b3 <vcprintf>
    cprintf("\n");
c01004e1:       c7 04 24 b2 6e 10 c0    movl   $0xc0106eb2,(%esp)
c01004e8:       e8 f9 fd ff ff          call   c01002e6 <cprintf>
    va_end(ap);
}
c01004ed:       c9                      leave
c01004ee:       c3                      ret

c01004ef <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01004ef:       55                      push   %ebp
c01004f0:       89 e5                   mov    %esp,%ebp
    return is_panic;
c01004f2:       a1 60 be 10 c0          mov    0xc010be60,%eax
}
c01004f7:       5d                      pop    %ebp
c01004f8:       c3                      ret

c01004f9 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004f9:       55                      push   %ebp
c01004fa:       89 e5                   mov    %esp,%ebp
c01004fc:       83 ec 20                sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004ff:       8b 45 0c                mov    0xc(%ebp),%eax
c0100502:       8b 00                   mov    (%eax),%eax
c0100504:       89 45 fc                mov    %eax,-0x4(%ebp)
c0100507:       8b 45 10                mov    0x10(%ebp),%eax
c010050a:       8b 00                   mov    (%eax),%eax
c010050c:       89 45 f8                mov    %eax,-0x8(%ebp)
c010050f:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100516:       e9 d2 00 00 00          jmp    c01005ed <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c010051b:       8b 45 f8                mov    -0x8(%ebp),%eax
c010051e:       8b 55 fc                mov    -0x4(%ebp),%edx
c0100521:       01 d0                   add    %edx,%eax
c0100523:       89 c2                   mov    %eax,%edx
c0100525:       c1 ea 1f                shr    $0x1f,%edx
c0100528:       01 d0                   add    %edx,%eax
c010052a:       d1 f8                   sar    %eax
c010052c:       89 45 ec                mov    %eax,-0x14(%ebp)
c010052f:       8b 45 ec                mov    -0x14(%ebp),%eax
c0100532:       89 45 f0                mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100535:       eb 04                   jmp    c010053b <stab_binsearch+0x42>
            m --;
c0100537:       83 6d f0 01             subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010053b:       8b 45 f0                mov    -0x10(%ebp),%eax
c010053e:       3b 45 fc                cmp    -0x4(%ebp),%eax
c0100541:       7c 1f                   jl     c0100562 <stab_binsearch+0x69>
c0100543:       8b 55 f0                mov    -0x10(%ebp),%edx
c0100546:       89 d0                   mov    %edx,%eax
c0100548:       01 c0                   add    %eax,%eax
c010054a:       01 d0                   add    %edx,%eax
c010054c:       c1 e0 02                shl    $0x2,%eax
c010054f:       89 c2                   mov    %eax,%edx
c0100551:       8b 45 08                mov    0x8(%ebp),%eax
c0100554:       01 d0                   add    %edx,%eax
c0100556:       0f b6 40 04             movzbl 0x4(%eax),%eax
c010055a:       0f b6 c0                movzbl %al,%eax
c010055d:       3b 45 14                cmp    0x14(%ebp),%eax
c0100560:       75 d5                   jne    c0100537 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100562:       8b 45 f0                mov    -0x10(%ebp),%eax
c0100565:       3b 45 fc                cmp    -0x4(%ebp),%eax
c0100568:       7d 0b                   jge    c0100575 <stab_binsearch+0x7c>
            l = true_m + 1;
c010056a:       8b 45 ec                mov    -0x14(%ebp),%eax
c010056d:       83 c0 01                add    $0x1,%eax
c0100570:       89 45 fc                mov    %eax,-0x4(%ebp)
            continue;
c0100573:       eb 78                   jmp    c01005ed <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100575:       c7 45 f4 01 00 00 00    movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010057c:       8b 55 f0                mov    -0x10(%ebp),%edx
c010057f:       89 d0                   mov    %edx,%eax
c0100581:       01 c0                   add    %eax,%eax
c0100583:       01 d0                   add    %edx,%eax
c0100585:       c1 e0 02                shl    $0x2,%eax
c0100588:       89 c2                   mov    %eax,%edx
c010058a:       8b 45 08                mov    0x8(%ebp),%eax
c010058d:       01 d0                   add    %edx,%eax
c010058f:       8b 40 08                mov    0x8(%eax),%eax
c0100592:       3b 45 18                cmp    0x18(%ebp),%eax
c0100595:       73 13                   jae    c01005aa <stab_binsearch+0xb1>
            *region_left = m;
c0100597:       8b 45 0c                mov    0xc(%ebp),%eax
c010059a:       8b 55 f0                mov    -0x10(%ebp),%edx
c010059d:       89 10                   mov    %edx,(%eax)
            l = true_m + 1;
c010059f:       8b 45 ec                mov    -0x14(%ebp),%eax
c01005a2:       83 c0 01                add    $0x1,%eax
c01005a5:       89 45 fc                mov    %eax,-0x4(%ebp)
c01005a8:       eb 43                   jmp    c01005ed <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c01005aa:       8b 55 f0                mov    -0x10(%ebp),%edx
c01005ad:       89 d0                   mov    %edx,%eax
c01005af:       01 c0                   add    %eax,%eax
c01005b1:       01 d0                   add    %edx,%eax
c01005b3:       c1 e0 02                shl    $0x2,%eax
c01005b6:       89 c2                   mov    %eax,%edx
c01005b8:       8b 45 08                mov    0x8(%ebp),%eax
c01005bb:       01 d0                   add    %edx,%eax
c01005bd:       8b 40 08                mov    0x8(%eax),%eax
c01005c0:       3b 45 18                cmp    0x18(%ebp),%eax
c01005c3:       76 16                   jbe    c01005db <stab_binsearch+0xe2>
            *region_right = m - 1;
c01005c5:       8b 45 f0                mov    -0x10(%ebp),%eax
c01005c8:       8d 50 ff                lea    -0x1(%eax),%edx
c01005cb:       8b 45 10                mov    0x10(%ebp),%eax
c01005ce:       89 10                   mov    %edx,(%eax)
            r = m - 1;
c01005d0:       8b 45 f0                mov    -0x10(%ebp),%eax
c01005d3:       83 e8 01                sub    $0x1,%eax
c01005d6:       89 45 f8                mov    %eax,-0x8(%ebp)
c01005d9:       eb 12                   jmp    c01005ed <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005db:       8b 45 0c                mov    0xc(%ebp),%eax
c01005de:       8b 55 f0                mov    -0x10(%ebp),%edx
c01005e1:       89 10                   mov    %edx,(%eax)
            l = m;
c01005e3:       8b 45 f0                mov    -0x10(%ebp),%eax
c01005e6:       89 45 fc                mov    %eax,-0x4(%ebp)
            addr ++;
c01005e9:       83 45 18 01             addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005ed:       8b 45 fc                mov    -0x4(%ebp),%eax
c01005f0:       3b 45 f8                cmp    -0x8(%ebp),%eax
c01005f3:       0f 8e 22 ff ff ff       jle    c010051b <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005f9:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c01005fd:       75 0f                   jne    c010060e <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005ff:       8b 45 0c                mov    0xc(%ebp),%eax
c0100602:       8b 00                   mov    (%eax),%eax
c0100604:       8d 50 ff                lea    -0x1(%eax),%edx
c0100607:       8b 45 10                mov    0x10(%ebp),%eax
c010060a:       89 10                   mov    %edx,(%eax)
c010060c:       eb 3f                   jmp    c010064d <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c010060e:       8b 45 10                mov    0x10(%ebp),%eax
c0100611:       8b 00                   mov    (%eax),%eax
c0100613:       89 45 fc                mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100616:       eb 04                   jmp    c010061c <stab_binsearch+0x123>
c0100618:       83 6d fc 01             subl   $0x1,-0x4(%ebp)
c010061c:       8b 45 0c                mov    0xc(%ebp),%eax
c010061f:       8b 00                   mov    (%eax),%eax
c0100621:       3b 45 fc                cmp    -0x4(%ebp),%eax
c0100624:       7d 1f                   jge    c0100645 <stab_binsearch+0x14c>
c0100626:       8b 55 fc                mov    -0x4(%ebp),%edx
c0100629:       89 d0                   mov    %edx,%eax
c010062b:       01 c0                   add    %eax,%eax
c010062d:       01 d0                   add    %edx,%eax
c010062f:       c1 e0 02                shl    $0x2,%eax
c0100632:       89 c2                   mov    %eax,%edx
c0100634:       8b 45 08                mov    0x8(%ebp),%eax
c0100637:       01 d0                   add    %edx,%eax
c0100639:       0f b6 40 04             movzbl 0x4(%eax),%eax
c010063d:       0f b6 c0                movzbl %al,%eax
c0100640:       3b 45 14                cmp    0x14(%ebp),%eax
c0100643:       75 d3                   jne    c0100618 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100645:       8b 45 0c                mov    0xc(%ebp),%eax
c0100648:       8b 55 fc                mov    -0x4(%ebp),%edx
c010064b:       89 10                   mov    %edx,(%eax)
    }
}
c010064d:       c9                      leave
c010064e:       c3                      ret

c010064f <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010064f:       55                      push   %ebp
c0100650:       89 e5                   mov    %esp,%ebp
c0100652:       83 ec 58                sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100655:       8b 45 0c                mov    0xc(%ebp),%eax
c0100658:       c7 00 d4 6e 10 c0       movl   $0xc0106ed4,(%eax)
    info->eip_line = 0;
c010065e:       8b 45 0c                mov    0xc(%ebp),%eax
c0100661:       c7 40 04 00 00 00 00    movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100668:       8b 45 0c                mov    0xc(%ebp),%eax
c010066b:       c7 40 08 d4 6e 10 c0    movl   $0xc0106ed4,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100672:       8b 45 0c                mov    0xc(%ebp),%eax
c0100675:       c7 40 0c 09 00 00 00    movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010067c:       8b 45 0c                mov    0xc(%ebp),%eax
c010067f:       8b 55 08                mov    0x8(%ebp),%edx
c0100682:       89 50 10                mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100685:       8b 45 0c                mov    0xc(%ebp),%eax
c0100688:       c7 40 14 00 00 00 00    movl   $0x0,0x14(%eax)

    stabs = __STAB_BEGIN__;
c010068f:       c7 45 f4 58 84 10 c0    movl   $0xc0108458,-0xc(%ebp)
    stab_end = __STAB_END__;
c0100696:       c7 45 f0 58 84 10 c0    movl   $0xc0108458,-0x10(%ebp)
    stabstr = __STABSTR_BEGIN__;
c010069d:       c7 45 ec 59 84 10 c0    movl   $0xc0108459,-0x14(%ebp)
    stabstr_end = __STABSTR_END__;
c01006a4:       c7 45 e8 59 84 10 c0    movl   $0xc0108459,-0x18(%ebp)

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01006ab:       8b 45 e8                mov    -0x18(%ebp),%eax
c01006ae:       3b 45 ec                cmp    -0x14(%ebp),%eax
c01006b1:       76 0d                   jbe    c01006c0 <debuginfo_eip+0x71>
c01006b3:       8b 45 e8                mov    -0x18(%ebp),%eax
c01006b6:       83 e8 01                sub    $0x1,%eax
c01006b9:       0f b6 00                movzbl (%eax),%eax
c01006bc:       84 c0                   test   %al,%al
c01006be:       74 0a                   je     c01006ca <debuginfo_eip+0x7b>
        return -1;
c01006c0:       b8 ff ff ff ff          mov    $0xffffffff,%eax
c01006c5:       e9 c0 02 00 00          jmp    c010098a <debuginfo_eip+0x33b>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01006ca:       c7 45 e4 00 00 00 00    movl   $0x0,-0x1c(%ebp)
c01006d1:       8b 55 f0                mov    -0x10(%ebp),%edx
c01006d4:       8b 45 f4                mov    -0xc(%ebp),%eax
c01006d7:       29 c2                   sub    %eax,%edx
c01006d9:       89 d0                   mov    %edx,%eax
c01006db:       c1 f8 02                sar    $0x2,%eax
c01006de:       69 c0 ab aa aa aa       imul   $0xaaaaaaab,%eax,%eax
c01006e4:       83 e8 01                sub    $0x1,%eax
c01006e7:       89 45 e0                mov    %eax,-0x20(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01006ea:       8b 45 08                mov    0x8(%ebp),%eax
c01006ed:       89 44 24 10             mov    %eax,0x10(%esp)
c01006f1:       c7 44 24 0c 64 00 00    movl   $0x64,0xc(%esp)
c01006f8:       00
c01006f9:       8d 45 e0                lea    -0x20(%ebp),%eax
c01006fc:       89 44 24 08             mov    %eax,0x8(%esp)
c0100700:       8d 45 e4                lea    -0x1c(%ebp),%eax
c0100703:       89 44 24 04             mov    %eax,0x4(%esp)
c0100707:       8b 45 f4                mov    -0xc(%ebp),%eax
c010070a:       89 04 24                mov    %eax,(%esp)
c010070d:       e8 e7 fd ff ff          call   c01004f9 <stab_binsearch>
    if (lfile == 0)
c0100712:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0100715:       85 c0                   test   %eax,%eax
c0100717:       75 0a                   jne    c0100723 <debuginfo_eip+0xd4>
        return -1;
c0100719:       b8 ff ff ff ff          mov    $0xffffffff,%eax
c010071e:       e9 67 02 00 00          jmp    c010098a <debuginfo_eip+0x33b>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100723:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0100726:       89 45 dc                mov    %eax,-0x24(%ebp)
c0100729:       8b 45 e0                mov    -0x20(%ebp),%eax
c010072c:       89 45 d8                mov    %eax,-0x28(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c010072f:       8b 45 08                mov    0x8(%ebp),%eax
c0100732:       89 44 24 10             mov    %eax,0x10(%esp)
c0100736:       c7 44 24 0c 24 00 00    movl   $0x24,0xc(%esp)
c010073d:       00
c010073e:       8d 45 d8                lea    -0x28(%ebp),%eax
c0100741:       89 44 24 08             mov    %eax,0x8(%esp)
c0100745:       8d 45 dc                lea    -0x24(%ebp),%eax
c0100748:       89 44 24 04             mov    %eax,0x4(%esp)
c010074c:       8b 45 f4                mov    -0xc(%ebp),%eax
c010074f:       89 04 24                mov    %eax,(%esp)
c0100752:       e8 a2 fd ff ff          call   c01004f9 <stab_binsearch>

    if (lfun <= rfun) {
c0100757:       8b 55 dc                mov    -0x24(%ebp),%edx
c010075a:       8b 45 d8                mov    -0x28(%ebp),%eax
c010075d:       39 c2                   cmp    %eax,%edx
c010075f:       7f 7c                   jg     c01007dd <debuginfo_eip+0x18e>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100761:       8b 45 dc                mov    -0x24(%ebp),%eax
c0100764:       89 c2                   mov    %eax,%edx
c0100766:       89 d0                   mov    %edx,%eax
c0100768:       01 c0                   add    %eax,%eax
c010076a:       01 d0                   add    %edx,%eax
c010076c:       c1 e0 02                shl    $0x2,%eax
c010076f:       89 c2                   mov    %eax,%edx
c0100771:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100774:       01 d0                   add    %edx,%eax
c0100776:       8b 10                   mov    (%eax),%edx
c0100778:       8b 4d e8                mov    -0x18(%ebp),%ecx
c010077b:       8b 45 ec                mov    -0x14(%ebp),%eax
c010077e:       29 c1                   sub    %eax,%ecx
c0100780:       89 c8                   mov    %ecx,%eax
c0100782:       39 c2                   cmp    %eax,%edx
c0100784:       73 22                   jae    c01007a8 <debuginfo_eip+0x159>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100786:       8b 45 dc                mov    -0x24(%ebp),%eax
c0100789:       89 c2                   mov    %eax,%edx
c010078b:       89 d0                   mov    %edx,%eax
c010078d:       01 c0                   add    %eax,%eax
c010078f:       01 d0                   add    %edx,%eax
c0100791:       c1 e0 02                shl    $0x2,%eax
c0100794:       89 c2                   mov    %eax,%edx
c0100796:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100799:       01 d0                   add    %edx,%eax
c010079b:       8b 10                   mov    (%eax),%edx
c010079d:       8b 45 ec                mov    -0x14(%ebp),%eax
c01007a0:       01 c2                   add    %eax,%edx
c01007a2:       8b 45 0c                mov    0xc(%ebp),%eax
c01007a5:       89 50 08                mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01007a8:       8b 45 dc                mov    -0x24(%ebp),%eax
c01007ab:       89 c2                   mov    %eax,%edx
c01007ad:       89 d0                   mov    %edx,%eax
c01007af:       01 c0                   add    %eax,%eax
c01007b1:       01 d0                   add    %edx,%eax
c01007b3:       c1 e0 02                shl    $0x2,%eax
c01007b6:       89 c2                   mov    %eax,%edx
c01007b8:       8b 45 f4                mov    -0xc(%ebp),%eax
c01007bb:       01 d0                   add    %edx,%eax
c01007bd:       8b 50 08                mov    0x8(%eax),%edx
c01007c0:       8b 45 0c                mov    0xc(%ebp),%eax
c01007c3:       89 50 10                mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01007c6:       8b 45 0c                mov    0xc(%ebp),%eax
c01007c9:       8b 40 10                mov    0x10(%eax),%eax
c01007cc:       29 45 08                sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01007cf:       8b 45 dc                mov    -0x24(%ebp),%eax
c01007d2:       89 45 d4                mov    %eax,-0x2c(%ebp)
        rline = rfun;
c01007d5:       8b 45 d8                mov    -0x28(%ebp),%eax
c01007d8:       89 45 d0                mov    %eax,-0x30(%ebp)
c01007db:       eb 15                   jmp    c01007f2 <debuginfo_eip+0x1a3>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01007dd:       8b 45 0c                mov    0xc(%ebp),%eax
c01007e0:       8b 55 08                mov    0x8(%ebp),%edx
c01007e3:       89 50 10                mov    %edx,0x10(%eax)
        lline = lfile;
c01007e6:       8b 45 e4                mov    -0x1c(%ebp),%eax
c01007e9:       89 45 d4                mov    %eax,-0x2c(%ebp)
        rline = rfile;
c01007ec:       8b 45 e0                mov    -0x20(%ebp),%eax
c01007ef:       89 45 d0                mov    %eax,-0x30(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01007f2:       8b 45 0c                mov    0xc(%ebp),%eax
c01007f5:       8b 40 08                mov    0x8(%eax),%eax
c01007f8:       c7 44 24 04 3a 00 00    movl   $0x3a,0x4(%esp)
c01007ff:       00
c0100800:       89 04 24                mov    %eax,(%esp)
c0100803:       e8 1d 5c 00 00          call   c0106425 <strfind>
c0100808:       89 c2                   mov    %eax,%edx
c010080a:       8b 45 0c                mov    0xc(%ebp),%eax
c010080d:       8b 40 08                mov    0x8(%eax),%eax
c0100810:       29 c2                   sub    %eax,%edx
c0100812:       8b 45 0c                mov    0xc(%ebp),%eax
c0100815:       89 50 0c                mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0100818:       8b 45 08                mov    0x8(%ebp),%eax
c010081b:       89 44 24 10             mov    %eax,0x10(%esp)
c010081f:       c7 44 24 0c 44 00 00    movl   $0x44,0xc(%esp)
c0100826:       00
c0100827:       8d 45 d0                lea    -0x30(%ebp),%eax
c010082a:       89 44 24 08             mov    %eax,0x8(%esp)
c010082e:       8d 45 d4                lea    -0x2c(%ebp),%eax
c0100831:       89 44 24 04             mov    %eax,0x4(%esp)
c0100835:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100838:       89 04 24                mov    %eax,(%esp)
c010083b:       e8 b9 fc ff ff          call   c01004f9 <stab_binsearch>
    if (lline <= rline) {
c0100840:       8b 55 d4                mov    -0x2c(%ebp),%edx
c0100843:       8b 45 d0                mov    -0x30(%ebp),%eax
c0100846:       39 c2                   cmp    %eax,%edx
c0100848:       7f 24                   jg     c010086e <debuginfo_eip+0x21f>
        info->eip_line = stabs[rline].n_desc;
c010084a:       8b 45 d0                mov    -0x30(%ebp),%eax
c010084d:       89 c2                   mov    %eax,%edx
c010084f:       89 d0                   mov    %edx,%eax
c0100851:       01 c0                   add    %eax,%eax
c0100853:       01 d0                   add    %edx,%eax
c0100855:       c1 e0 02                shl    $0x2,%eax
c0100858:       89 c2                   mov    %eax,%edx
c010085a:       8b 45 f4                mov    -0xc(%ebp),%eax
c010085d:       01 d0                   add    %edx,%eax
c010085f:       0f b7 40 06             movzwl 0x6(%eax),%eax
c0100863:       0f b7 d0                movzwl %ax,%edx
c0100866:       8b 45 0c                mov    0xc(%ebp),%eax
c0100869:       89 50 04                mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c010086c:       eb 13                   jmp    c0100881 <debuginfo_eip+0x232>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c010086e:       b8 ff ff ff ff          mov    $0xffffffff,%eax
c0100873:       e9 12 01 00 00          jmp    c010098a <debuginfo_eip+0x33b>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0100878:       8b 45 d4                mov    -0x2c(%ebp),%eax
c010087b:       83 e8 01                sub    $0x1,%eax
c010087e:       89 45 d4                mov    %eax,-0x2c(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100881:       8b 55 d4                mov    -0x2c(%ebp),%edx
c0100884:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0100887:       39 c2                   cmp    %eax,%edx
c0100889:       7c 56                   jl     c01008e1 <debuginfo_eip+0x292>
           && stabs[lline].n_type != N_SOL
c010088b:       8b 45 d4                mov    -0x2c(%ebp),%eax
c010088e:       89 c2                   mov    %eax,%edx
c0100890:       89 d0                   mov    %edx,%eax
c0100892:       01 c0                   add    %eax,%eax
c0100894:       01 d0                   add    %edx,%eax
c0100896:       c1 e0 02                shl    $0x2,%eax
c0100899:       89 c2                   mov    %eax,%edx
c010089b:       8b 45 f4                mov    -0xc(%ebp),%eax
c010089e:       01 d0                   add    %edx,%eax
c01008a0:       0f b6 40 04             movzbl 0x4(%eax),%eax
c01008a4:       3c 84                   cmp    $0x84,%al
c01008a6:       74 39                   je     c01008e1 <debuginfo_eip+0x292>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c01008a8:       8b 45 d4                mov    -0x2c(%ebp),%eax
c01008ab:       89 c2                   mov    %eax,%edx
c01008ad:       89 d0                   mov    %edx,%eax
c01008af:       01 c0                   add    %eax,%eax
c01008b1:       01 d0                   add    %edx,%eax
c01008b3:       c1 e0 02                shl    $0x2,%eax
c01008b6:       89 c2                   mov    %eax,%edx
c01008b8:       8b 45 f4                mov    -0xc(%ebp),%eax
c01008bb:       01 d0                   add    %edx,%eax
c01008bd:       0f b6 40 04             movzbl 0x4(%eax),%eax
c01008c1:       3c 64                   cmp    $0x64,%al
c01008c3:       75 b3                   jne    c0100878 <debuginfo_eip+0x229>
c01008c5:       8b 45 d4                mov    -0x2c(%ebp),%eax
c01008c8:       89 c2                   mov    %eax,%edx
c01008ca:       89 d0                   mov    %edx,%eax
c01008cc:       01 c0                   add    %eax,%eax
c01008ce:       01 d0                   add    %edx,%eax
c01008d0:       c1 e0 02                shl    $0x2,%eax
c01008d3:       89 c2                   mov    %eax,%edx
c01008d5:       8b 45 f4                mov    -0xc(%ebp),%eax
c01008d8:       01 d0                   add    %edx,%eax
c01008da:       8b 40 08                mov    0x8(%eax),%eax
c01008dd:       85 c0                   test   %eax,%eax
c01008df:       74 97                   je     c0100878 <debuginfo_eip+0x229>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01008e1:       8b 55 d4                mov    -0x2c(%ebp),%edx
c01008e4:       8b 45 e4                mov    -0x1c(%ebp),%eax
c01008e7:       39 c2                   cmp    %eax,%edx
c01008e9:       7c 46                   jl     c0100931 <debuginfo_eip+0x2e2>
c01008eb:       8b 45 d4                mov    -0x2c(%ebp),%eax
c01008ee:       89 c2                   mov    %eax,%edx
c01008f0:       89 d0                   mov    %edx,%eax
c01008f2:       01 c0                   add    %eax,%eax
c01008f4:       01 d0                   add    %edx,%eax
c01008f6:       c1 e0 02                shl    $0x2,%eax
c01008f9:       89 c2                   mov    %eax,%edx
c01008fb:       8b 45 f4                mov    -0xc(%ebp),%eax
c01008fe:       01 d0                   add    %edx,%eax
c0100900:       8b 10                   mov    (%eax),%edx
c0100902:       8b 4d e8                mov    -0x18(%ebp),%ecx
c0100905:       8b 45 ec                mov    -0x14(%ebp),%eax
c0100908:       29 c1                   sub    %eax,%ecx
c010090a:       89 c8                   mov    %ecx,%eax
c010090c:       39 c2                   cmp    %eax,%edx
c010090e:       73 21                   jae    c0100931 <debuginfo_eip+0x2e2>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100910:       8b 45 d4                mov    -0x2c(%ebp),%eax
c0100913:       89 c2                   mov    %eax,%edx
c0100915:       89 d0                   mov    %edx,%eax
c0100917:       01 c0                   add    %eax,%eax
c0100919:       01 d0                   add    %edx,%eax
c010091b:       c1 e0 02                shl    $0x2,%eax
c010091e:       89 c2                   mov    %eax,%edx
c0100920:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100923:       01 d0                   add    %edx,%eax
c0100925:       8b 10                   mov    (%eax),%edx
c0100927:       8b 45 ec                mov    -0x14(%ebp),%eax
c010092a:       01 c2                   add    %eax,%edx
c010092c:       8b 45 0c                mov    0xc(%ebp),%eax
c010092f:       89 10                   mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100931:       8b 55 dc                mov    -0x24(%ebp),%edx
c0100934:       8b 45 d8                mov    -0x28(%ebp),%eax
c0100937:       39 c2                   cmp    %eax,%edx
c0100939:       7d 4a                   jge    c0100985 <debuginfo_eip+0x336>
        for (lline = lfun + 1;
c010093b:       8b 45 dc                mov    -0x24(%ebp),%eax
c010093e:       83 c0 01                add    $0x1,%eax
c0100941:       89 45 d4                mov    %eax,-0x2c(%ebp)
c0100944:       eb 18                   jmp    c010095e <debuginfo_eip+0x30f>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100946:       8b 45 0c                mov    0xc(%ebp),%eax
c0100949:       8b 40 14                mov    0x14(%eax),%eax
c010094c:       8d 50 01                lea    0x1(%eax),%edx
c010094f:       8b 45 0c                mov    0xc(%ebp),%eax
c0100952:       89 50 14                mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100955:       8b 45 d4                mov    -0x2c(%ebp),%eax
c0100958:       83 c0 01                add    $0x1,%eax
c010095b:       89 45 d4                mov    %eax,-0x2c(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c010095e:       8b 55 d4                mov    -0x2c(%ebp),%edx
c0100961:       8b 45 d8                mov    -0x28(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100964:       39 c2                   cmp    %eax,%edx
c0100966:       7d 1d                   jge    c0100985 <debuginfo_eip+0x336>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100968:       8b 45 d4                mov    -0x2c(%ebp),%eax
c010096b:       89 c2                   mov    %eax,%edx
c010096d:       89 d0                   mov    %edx,%eax
c010096f:       01 c0                   add    %eax,%eax
c0100971:       01 d0                   add    %edx,%eax
c0100973:       c1 e0 02                shl    $0x2,%eax
c0100976:       89 c2                   mov    %eax,%edx
c0100978:       8b 45 f4                mov    -0xc(%ebp),%eax
c010097b:       01 d0                   add    %edx,%eax
c010097d:       0f b6 40 04             movzbl 0x4(%eax),%eax
c0100981:       3c a0                   cmp    $0xa0,%al
c0100983:       74 c1                   je     c0100946 <debuginfo_eip+0x2f7>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100985:       b8 00 00 00 00          mov    $0x0,%eax
}
c010098a:       c9                      leave
c010098b:       c3                      ret

c010098c <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c010098c:       55                      push   %ebp
c010098d:       89 e5                   mov    %esp,%ebp
c010098f:       83 ec 18                sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100992:       c7 04 24 de 6e 10 c0    movl   $0xc0106ede,(%esp)
c0100999:       e8 48 f9 ff ff          call   c01002e6 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c010099e:       c7 44 24 04 2a 00 10    movl   $0xc010002a,0x4(%esp)
c01009a5:       c0
c01009a6:       c7 04 24 f7 6e 10 c0    movl   $0xc0106ef7,(%esp)
c01009ad:       e8 34 f9 ff ff          call   c01002e6 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c01009b2:       c7 44 24 04 bb 6d 10    movl   $0xc0106dbb,0x4(%esp)
c01009b9:       c0
c01009ba:       c7 04 24 0f 6f 10 c0    movl   $0xc0106f0f,(%esp)
c01009c1:       e8 20 f9 ff ff          call   c01002e6 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c01009c6:       c7 44 24 04 3c ba 10    movl   $0xc010ba3c,0x4(%esp)
c01009cd:       c0
c01009ce:       c7 04 24 27 6f 10 c0    movl   $0xc0106f27,(%esp)
c01009d5:       e8 0c f9 ff ff          call   c01002e6 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c01009da:       c7 44 24 04 e4 c9 10    movl   $0xc110c9e4,0x4(%esp)
c01009e1:       c1
c01009e2:       c7 04 24 3f 6f 10 c0    movl   $0xc0106f3f,(%esp)
c01009e9:       e8 f8 f8 ff ff          call   c01002e6 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c01009ee:       b8 e4 c9 10 c1          mov    $0xc110c9e4,%eax
c01009f3:       8d 90 ff 03 00 00       lea    0x3ff(%eax),%edx
c01009f9:       b8 2a 00 10 c0          mov    $0xc010002a,%eax
c01009fe:       29 c2                   sub    %eax,%edx
c0100a00:       89 d0                   mov    %edx,%eax
c0100a02:       8d 90 ff 03 00 00       lea    0x3ff(%eax),%edx
c0100a08:       85 c0                   test   %eax,%eax
c0100a0a:       0f 48 c2                cmovs  %edx,%eax
c0100a0d:       c1 f8 0a                sar    $0xa,%eax
c0100a10:       89 44 24 04             mov    %eax,0x4(%esp)
c0100a14:       c7 04 24 58 6f 10 c0    movl   $0xc0106f58,(%esp)
c0100a1b:       e8 c6 f8 ff ff          call   c01002e6 <cprintf>
}
c0100a20:       c9                      leave
c0100a21:       c3                      ret

c0100a22 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100a22:       55                      push   %ebp
c0100a23:       89 e5                   mov    %esp,%ebp
c0100a25:       81 ec 48 01 00 00       sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100a2b:       8d 45 dc                lea    -0x24(%ebp),%eax
c0100a2e:       89 44 24 04             mov    %eax,0x4(%esp)
c0100a32:       8b 45 08                mov    0x8(%ebp),%eax
c0100a35:       89 04 24                mov    %eax,(%esp)
c0100a38:       e8 12 fc ff ff          call   c010064f <debuginfo_eip>
c0100a3d:       85 c0                   test   %eax,%eax
c0100a3f:       74 15                   je     c0100a56 <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100a41:       8b 45 08                mov    0x8(%ebp),%eax
c0100a44:       89 44 24 04             mov    %eax,0x4(%esp)
c0100a48:       c7 04 24 82 6f 10 c0    movl   $0xc0106f82,(%esp)
c0100a4f:       e8 92 f8 ff ff          call   c01002e6 <cprintf>
c0100a54:       eb 6d                   jmp    c0100ac3 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a56:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
c0100a5d:       eb 1c                   jmp    c0100a7b <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100a5f:       8b 55 e4                mov    -0x1c(%ebp),%edx
c0100a62:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100a65:       01 d0                   add    %edx,%eax
c0100a67:       0f b6 00                movzbl (%eax),%eax
c0100a6a:       8d 8d dc fe ff ff       lea    -0x124(%ebp),%ecx
c0100a70:       8b 55 f4                mov    -0xc(%ebp),%edx
c0100a73:       01 ca                   add    %ecx,%edx
c0100a75:       88 02                   mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a77:       83 45 f4 01             addl   $0x1,-0xc(%ebp)
c0100a7b:       8b 45 e8                mov    -0x18(%ebp),%eax
c0100a7e:       3b 45 f4                cmp    -0xc(%ebp),%eax
c0100a81:       7f dc                   jg     c0100a5f <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100a83:       8d 95 dc fe ff ff       lea    -0x124(%ebp),%edx
c0100a89:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100a8c:       01 d0                   add    %edx,%eax
c0100a8e:       c6 00 00                movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100a91:       8b 45 ec                mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a94:       8b 55 08                mov    0x8(%ebp),%edx
c0100a97:       89 d1                   mov    %edx,%ecx
c0100a99:       29 c1                   sub    %eax,%ecx
c0100a9b:       8b 55 e0                mov    -0x20(%ebp),%edx
c0100a9e:       8b 45 dc                mov    -0x24(%ebp),%eax
c0100aa1:       89 4c 24 10             mov    %ecx,0x10(%esp)
c0100aa5:       8d 8d dc fe ff ff       lea    -0x124(%ebp),%ecx
c0100aab:       89 4c 24 0c             mov    %ecx,0xc(%esp)
c0100aaf:       89 54 24 08             mov    %edx,0x8(%esp)
c0100ab3:       89 44 24 04             mov    %eax,0x4(%esp)
c0100ab7:       c7 04 24 9e 6f 10 c0    movl   $0xc0106f9e,(%esp)
c0100abe:       e8 23 f8 ff ff          call   c01002e6 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100ac3:       c9                      leave
c0100ac4:       c3                      ret

c0100ac5 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100ac5:       55                      push   %ebp
c0100ac6:       89 e5                   mov    %esp,%ebp
c0100ac8:       83 ec 10                sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100acb:       8b 45 04                mov    0x4(%ebp),%eax
c0100ace:       89 45 fc                mov    %eax,-0x4(%ebp)
    return eip;
c0100ad1:       8b 45 fc                mov    -0x4(%ebp),%eax
}
c0100ad4:       c9                      leave
c0100ad5:       c3                      ret

c0100ad6 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ad6:       55                      push   %ebp
c0100ad7:       89 e5                   mov    %esp,%ebp
c0100ad9:       53                      push   %ebx
c0100ada:       83 ec 44                sub    $0x44,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100add:       89 e8                   mov    %ebp,%eax
c0100adf:       89 45 e8                mov    %eax,-0x18(%ebp)
    return ebp;
c0100ae2:       8b 45 e8                mov    -0x18(%ebp),%eax
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
  // 调用function，通过内联汇编来读到ebp和eip的值
  uint32_t ebp = read_ebp();
c0100ae5:       89 45 f4                mov    %eax,-0xc(%ebp)
  uint32_t eip = read_eip();
c0100ae8:       e8 d8 ff ff ff          call   c0100ac5 <read_eip>
c0100aed:       89 45 f0                mov    %eax,-0x10(%ebp)

  int index;
  for (index = 0; index < STACKFRAME_DEPTH && ebp != 0; index++) {
c0100af0:       c7 45 ec 00 00 00 00    movl   $0x0,-0x14(%ebp)
c0100af7:       e9 88 00 00 00          jmp    c0100b84 <print_stackframe+0xae>

    // ebp eip
    cprintf("ebp = 0x%08x\t eip = 0x%08x\t", ebp, eip);
c0100afc:       8b 45 f0                mov    -0x10(%ebp),%eax
c0100aff:       89 44 24 08             mov    %eax,0x8(%esp)
c0100b03:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100b06:       89 44 24 04             mov    %eax,0x4(%esp)
c0100b0a:       c7 04 24 b0 6f 10 c0    movl   $0xc0106fb0,(%esp)
c0100b11:       e8 d0 f7 ff ff          call   c01002e6 <cprintf>
    cprintf("\n");
c0100b16:       c7 04 24 cc 6f 10 c0    movl   $0xc0106fcc,(%esp)
c0100b1d:       e8 c4 f7 ff ff          call   c01002e6 <cprintf>
    // arguments 一般而言，ss:[ebp+4]处为返回地址，ss:[ebp+8]处为第一个参数值
    // 而我们这里uint32_t占4个字节，所以指针+2就可以
    uint32_t args[4];
    args[0] = (uint32_t *)ebp + 2;
c0100b22:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100b25:       83 c0 08                add    $0x8,%eax
c0100b28:       89 45 d8                mov    %eax,-0x28(%ebp)
    cprintf("args:0x%08x\t0x%08x\t0x%08x\t0x%08x\t", args[0], args[1], args[2],args[3]);
c0100b2b:       8b 5d e4                mov    -0x1c(%ebp),%ebx
c0100b2e:       8b 4d e0                mov    -0x20(%ebp),%ecx
c0100b31:       8b 55 dc                mov    -0x24(%ebp),%edx
c0100b34:       8b 45 d8                mov    -0x28(%ebp),%eax
c0100b37:       89 5c 24 10             mov    %ebx,0x10(%esp)
c0100b3b:       89 4c 24 0c             mov    %ecx,0xc(%esp)
c0100b3f:       89 54 24 08             mov    %edx,0x8(%esp)
c0100b43:       89 44 24 04             mov    %eax,0x4(%esp)
c0100b47:       c7 04 24 d0 6f 10 c0    movl   $0xc0106fd0,(%esp)
c0100b4e:       e8 93 f7 ff ff          call   c01002e6 <cprintf>
    cprintf("\n");
c0100b53:       c7 04 24 cc 6f 10 c0    movl   $0xc0106fcc,(%esp)
c0100b5a:       e8 87 f7 ff ff          call   c01002e6 <cprintf>
    print_debuginfo(eip - 1);
c0100b5f:       8b 45 f0                mov    -0x10(%ebp),%eax
c0100b62:       83 e8 01                sub    $0x1,%eax
c0100b65:       89 04 24                mov    %eax,(%esp)
c0100b68:       e8 b5 fe ff ff          call   c0100a22 <print_debuginfo>

    ebp = ((uint32_t *)ebp)[0];
c0100b6d:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100b70:       8b 00                   mov    (%eax),%eax
c0100b72:       89 45 f4                mov    %eax,-0xc(%ebp)
    eip = ((uint32_t *)ebp)[1];
c0100b75:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100b78:       83 c0 04                add    $0x4,%eax
c0100b7b:       8b 00                   mov    (%eax),%eax
c0100b7d:       89 45 f0                mov    %eax,-0x10(%ebp)
  // 调用function，通过内联汇编来读到ebp和eip的值
  uint32_t ebp = read_ebp();
  uint32_t eip = read_eip();

  int index;
  for (index = 0; index < STACKFRAME_DEPTH && ebp != 0; index++) {
c0100b80:       83 45 ec 01             addl   $0x1,-0x14(%ebp)
c0100b84:       83 7d ec 13             cmpl   $0x13,-0x14(%ebp)
c0100b88:       7f 0a                   jg     c0100b94 <print_stackframe+0xbe>
c0100b8a:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c0100b8e:       0f 85 68 ff ff ff       jne    c0100afc <print_stackframe+0x26>
    ebp = ((uint32_t *)ebp)[0];
    eip = ((uint32_t *)ebp)[1];

  }

}
c0100b94:       83 c4 44                add    $0x44,%esp
c0100b97:       5b                      pop    %ebx
c0100b98:       5d                      pop    %ebp
c0100b99:       c3                      ret

c0100b9a <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100b9a:       55                      push   %ebp
c0100b9b:       89 e5                   mov    %esp,%ebp
c0100b9d:       83 ec 28                sub    $0x28,%esp
    int argc = 0;
c0100ba0:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100ba7:       eb 0c                   jmp    c0100bb5 <parse+0x1b>
            *buf ++ = '\0';
c0100ba9:       8b 45 08                mov    0x8(%ebp),%eax
c0100bac:       8d 50 01                lea    0x1(%eax),%edx
c0100baf:       89 55 08                mov    %edx,0x8(%ebp)
c0100bb2:       c6 00 00                movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100bb5:       8b 45 08                mov    0x8(%ebp),%eax
c0100bb8:       0f b6 00                movzbl (%eax),%eax
c0100bbb:       84 c0                   test   %al,%al
c0100bbd:       74 1d                   je     c0100bdc <parse+0x42>
c0100bbf:       8b 45 08                mov    0x8(%ebp),%eax
c0100bc2:       0f b6 00                movzbl (%eax),%eax
c0100bc5:       0f be c0                movsbl %al,%eax
c0100bc8:       89 44 24 04             mov    %eax,0x4(%esp)
c0100bcc:       c7 04 24 74 70 10 c0    movl   $0xc0107074,(%esp)
c0100bd3:       e8 1a 58 00 00          call   c01063f2 <strchr>
c0100bd8:       85 c0                   test   %eax,%eax
c0100bda:       75 cd                   jne    c0100ba9 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100bdc:       8b 45 08                mov    0x8(%ebp),%eax
c0100bdf:       0f b6 00                movzbl (%eax),%eax
c0100be2:       84 c0                   test   %al,%al
c0100be4:       75 02                   jne    c0100be8 <parse+0x4e>
            break;
c0100be6:       eb 67                   jmp    c0100c4f <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100be8:       83 7d f4 0f             cmpl   $0xf,-0xc(%ebp)
c0100bec:       75 14                   jne    c0100c02 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100bee:       c7 44 24 04 10 00 00    movl   $0x10,0x4(%esp)
c0100bf5:       00
c0100bf6:       c7 04 24 79 70 10 c0    movl   $0xc0107079,(%esp)
c0100bfd:       e8 e4 f6 ff ff          call   c01002e6 <cprintf>
        }
        argv[argc ++] = buf;
c0100c02:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100c05:       8d 50 01                lea    0x1(%eax),%edx
c0100c08:       89 55 f4                mov    %edx,-0xc(%ebp)
c0100c0b:       8d 14 85 00 00 00 00    lea    0x0(,%eax,4),%edx
c0100c12:       8b 45 0c                mov    0xc(%ebp),%eax
c0100c15:       01 c2                   add    %eax,%edx
c0100c17:       8b 45 08                mov    0x8(%ebp),%eax
c0100c1a:       89 02                   mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c1c:       eb 04                   jmp    c0100c22 <parse+0x88>
            buf ++;
c0100c1e:       83 45 08 01             addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c22:       8b 45 08                mov    0x8(%ebp),%eax
c0100c25:       0f b6 00                movzbl (%eax),%eax
c0100c28:       84 c0                   test   %al,%al
c0100c2a:       74 1d                   je     c0100c49 <parse+0xaf>
c0100c2c:       8b 45 08                mov    0x8(%ebp),%eax
c0100c2f:       0f b6 00                movzbl (%eax),%eax
c0100c32:       0f be c0                movsbl %al,%eax
c0100c35:       89 44 24 04             mov    %eax,0x4(%esp)
c0100c39:       c7 04 24 74 70 10 c0    movl   $0xc0107074,(%esp)
c0100c40:       e8 ad 57 00 00          call   c01063f2 <strchr>
c0100c45:       85 c0                   test   %eax,%eax
c0100c47:       74 d5                   je     c0100c1e <parse+0x84>
            buf ++;
        }
    }
c0100c49:       90                      nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c4a:       e9 66 ff ff ff          jmp    c0100bb5 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100c4f:       8b 45 f4                mov    -0xc(%ebp),%eax
}
c0100c52:       c9                      leave
c0100c53:       c3                      ret

c0100c54 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100c54:       55                      push   %ebp
c0100c55:       89 e5                   mov    %esp,%ebp
c0100c57:       83 ec 68                sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100c5a:       8d 45 b0                lea    -0x50(%ebp),%eax
c0100c5d:       89 44 24 04             mov    %eax,0x4(%esp)
c0100c61:       8b 45 08                mov    0x8(%ebp),%eax
c0100c64:       89 04 24                mov    %eax,(%esp)
c0100c67:       e8 2e ff ff ff          call   c0100b9a <parse>
c0100c6c:       89 45 f0                mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100c6f:       83 7d f0 00             cmpl   $0x0,-0x10(%ebp)
c0100c73:       75 0a                   jne    c0100c7f <runcmd+0x2b>
        return 0;
c0100c75:       b8 00 00 00 00          mov    $0x0,%eax
c0100c7a:       e9 85 00 00 00          jmp    c0100d04 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100c7f:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
c0100c86:       eb 5c                   jmp    c0100ce4 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100c88:       8b 4d b0                mov    -0x50(%ebp),%ecx
c0100c8b:       8b 55 f4                mov    -0xc(%ebp),%edx
c0100c8e:       89 d0                   mov    %edx,%eax
c0100c90:       01 c0                   add    %eax,%eax
c0100c92:       01 d0                   add    %edx,%eax
c0100c94:       c1 e0 02                shl    $0x2,%eax
c0100c97:       05 20 b0 10 c0          add    $0xc010b020,%eax
c0100c9c:       8b 00                   mov    (%eax),%eax
c0100c9e:       89 4c 24 04             mov    %ecx,0x4(%esp)
c0100ca2:       89 04 24                mov    %eax,(%esp)
c0100ca5:       e8 a9 56 00 00          call   c0106353 <strcmp>
c0100caa:       85 c0                   test   %eax,%eax
c0100cac:       75 32                   jne    c0100ce0 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100cae:       8b 55 f4                mov    -0xc(%ebp),%edx
c0100cb1:       89 d0                   mov    %edx,%eax
c0100cb3:       01 c0                   add    %eax,%eax
c0100cb5:       01 d0                   add    %edx,%eax
c0100cb7:       c1 e0 02                shl    $0x2,%eax
c0100cba:       05 20 b0 10 c0          add    $0xc010b020,%eax
c0100cbf:       8b 40 08                mov    0x8(%eax),%eax
c0100cc2:       8b 55 f0                mov    -0x10(%ebp),%edx
c0100cc5:       8d 4a ff                lea    -0x1(%edx),%ecx
c0100cc8:       8b 55 0c                mov    0xc(%ebp),%edx
c0100ccb:       89 54 24 08             mov    %edx,0x8(%esp)
c0100ccf:       8d 55 b0                lea    -0x50(%ebp),%edx
c0100cd2:       83 c2 04                add    $0x4,%edx
c0100cd5:       89 54 24 04             mov    %edx,0x4(%esp)
c0100cd9:       89 0c 24                mov    %ecx,(%esp)
c0100cdc:       ff d0                   call   *%eax
c0100cde:       eb 24                   jmp    c0100d04 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100ce0:       83 45 f4 01             addl   $0x1,-0xc(%ebp)
c0100ce4:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100ce7:       83 f8 02                cmp    $0x2,%eax
c0100cea:       76 9c                   jbe    c0100c88 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100cec:       8b 45 b0                mov    -0x50(%ebp),%eax
c0100cef:       89 44 24 04             mov    %eax,0x4(%esp)
c0100cf3:       c7 04 24 97 70 10 c0    movl   $0xc0107097,(%esp)
c0100cfa:       e8 e7 f5 ff ff          call   c01002e6 <cprintf>
    return 0;
c0100cff:       b8 00 00 00 00          mov    $0x0,%eax
}
c0100d04:       c9                      leave
c0100d05:       c3                      ret

c0100d06 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100d06:       55                      push   %ebp
c0100d07:       89 e5                   mov    %esp,%ebp
c0100d09:       83 ec 28                sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100d0c:       c7 04 24 b0 70 10 c0    movl   $0xc01070b0,(%esp)
c0100d13:       e8 ce f5 ff ff          call   c01002e6 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100d18:       c7 04 24 d8 70 10 c0    movl   $0xc01070d8,(%esp)
c0100d1f:       e8 c2 f5 ff ff          call   c01002e6 <cprintf>

    if (tf != NULL) {
c0100d24:       83 7d 08 00             cmpl   $0x0,0x8(%ebp)
c0100d28:       74 0b                   je     c0100d35 <kmonitor+0x2f>
        print_trapframe(tf);
c0100d2a:       8b 45 08                mov    0x8(%ebp),%eax
c0100d2d:       89 04 24                mov    %eax,(%esp)
c0100d30:       e8 74 0d 00 00          call   c0101aa9 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d35:       c7 04 24 fd 70 10 c0    movl   $0xc01070fd,(%esp)
c0100d3c:       e8 46 f6 ff ff          call   c0100387 <readline>
c0100d41:       89 45 f4                mov    %eax,-0xc(%ebp)
c0100d44:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c0100d48:       74 18                   je     c0100d62 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100d4a:       8b 45 08                mov    0x8(%ebp),%eax
c0100d4d:       89 44 24 04             mov    %eax,0x4(%esp)
c0100d51:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100d54:       89 04 24                mov    %eax,(%esp)
c0100d57:       e8 f8 fe ff ff          call   c0100c54 <runcmd>
c0100d5c:       85 c0                   test   %eax,%eax
c0100d5e:       79 02                   jns    c0100d62 <kmonitor+0x5c>
                break;
c0100d60:       eb 02                   jmp    c0100d64 <kmonitor+0x5e>
            }
        }
    }
c0100d62:       eb d1                   jmp    c0100d35 <kmonitor+0x2f>
}
c0100d64:       c9                      leave
c0100d65:       c3                      ret

c0100d66 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100d66:       55                      push   %ebp
c0100d67:       89 e5                   mov    %esp,%ebp
c0100d69:       83 ec 28                sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d6c:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
c0100d73:       eb 3f                   jmp    c0100db4 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100d75:       8b 55 f4                mov    -0xc(%ebp),%edx
c0100d78:       89 d0                   mov    %edx,%eax
c0100d7a:       01 c0                   add    %eax,%eax
c0100d7c:       01 d0                   add    %edx,%eax
c0100d7e:       c1 e0 02                shl    $0x2,%eax
c0100d81:       05 20 b0 10 c0          add    $0xc010b020,%eax
c0100d86:       8b 48 04                mov    0x4(%eax),%ecx
c0100d89:       8b 55 f4                mov    -0xc(%ebp),%edx
c0100d8c:       89 d0                   mov    %edx,%eax
c0100d8e:       01 c0                   add    %eax,%eax
c0100d90:       01 d0                   add    %edx,%eax
c0100d92:       c1 e0 02                shl    $0x2,%eax
c0100d95:       05 20 b0 10 c0          add    $0xc010b020,%eax
c0100d9a:       8b 00                   mov    (%eax),%eax
c0100d9c:       89 4c 24 08             mov    %ecx,0x8(%esp)
c0100da0:       89 44 24 04             mov    %eax,0x4(%esp)
c0100da4:       c7 04 24 01 71 10 c0    movl   $0xc0107101,(%esp)
c0100dab:       e8 36 f5 ff ff          call   c01002e6 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100db0:       83 45 f4 01             addl   $0x1,-0xc(%ebp)
c0100db4:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100db7:       83 f8 02                cmp    $0x2,%eax
c0100dba:       76 b9                   jbe    c0100d75 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100dbc:       b8 00 00 00 00          mov    $0x0,%eax
}
c0100dc1:       c9                      leave
c0100dc2:       c3                      ret

c0100dc3 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100dc3:       55                      push   %ebp
c0100dc4:       89 e5                   mov    %esp,%ebp
c0100dc6:       83 ec 08                sub    $0x8,%esp
    print_kerninfo();
c0100dc9:       e8 be fb ff ff          call   c010098c <print_kerninfo>
    return 0;
c0100dce:       b8 00 00 00 00          mov    $0x0,%eax
}
c0100dd3:       c9                      leave
c0100dd4:       c3                      ret

c0100dd5 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100dd5:       55                      push   %ebp
c0100dd6:       89 e5                   mov    %esp,%ebp
c0100dd8:       83 ec 08                sub    $0x8,%esp
    print_stackframe();
c0100ddb:       e8 f6 fc ff ff          call   c0100ad6 <print_stackframe>
    return 0;
c0100de0:       b8 00 00 00 00          mov    $0x0,%eax
}
c0100de5:       c9                      leave
c0100de6:       c3                      ret

c0100de7 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100de7:       55                      push   %ebp
c0100de8:       89 e5                   mov    %esp,%ebp
c0100dea:       83 ec 28                sub    $0x28,%esp
c0100ded:       66 c7 45 f6 43 00       movw   $0x43,-0xa(%ebp)
c0100df3:       c6 45 f5 34             movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100df7:       0f b6 45 f5             movzbl -0xb(%ebp),%eax
c0100dfb:       0f b7 55 f6             movzwl -0xa(%ebp),%edx
c0100dff:       ee                      out    %al,(%dx)
c0100e00:       66 c7 45 f2 40 00       movw   $0x40,-0xe(%ebp)
c0100e06:       c6 45 f1 9c             movb   $0x9c,-0xf(%ebp)
c0100e0a:       0f b6 45 f1             movzbl -0xf(%ebp),%eax
c0100e0e:       0f b7 55 f2             movzwl -0xe(%ebp),%edx
c0100e12:       ee                      out    %al,(%dx)
c0100e13:       66 c7 45 ee 40 00       movw   $0x40,-0x12(%ebp)
c0100e19:       c6 45 ed 2e             movb   $0x2e,-0x13(%ebp)
c0100e1d:       0f b6 45 ed             movzbl -0x13(%ebp),%eax
c0100e21:       0f b7 55 ee             movzwl -0x12(%ebp),%edx
c0100e25:       ee                      out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100e26:       c7 05 50 c9 10 c0 00    movl   $0x0,0xc010c950
c0100e2d:       00 00 00

    cprintf("++ setup timer interrupts\n");
c0100e30:       c7 04 24 0a 71 10 c0    movl   $0xc010710a,(%esp)
c0100e37:       e8 aa f4 ff ff          call   c01002e6 <cprintf>
    pic_enable(IRQ_TIMER);
c0100e3c:       c7 04 24 00 00 00 00    movl   $0x0,(%esp)
c0100e43:       e8 18 09 00 00          call   c0101760 <pic_enable>
}
c0100e48:       c9                      leave
c0100e49:       c3                      ret

c0100e4a <__intr_save>:
#include <x86.h>
#include <intr.h>
#include <mmu.h>

static inline bool
__intr_save(void) {
c0100e4a:       55                      push   %ebp
c0100e4b:       89 e5                   mov    %esp,%ebp
c0100e4d:       83 ec 18                sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100e50:       9c                      pushf
c0100e51:       58                      pop    %eax
c0100e52:       89 45 f4                mov    %eax,-0xc(%ebp)
    return eflags;
c0100e55:       8b 45 f4                mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100e58:       25 00 02 00 00          and    $0x200,%eax
c0100e5d:       85 c0                   test   %eax,%eax
c0100e5f:       74 0c                   je     c0100e6d <__intr_save+0x23>
        intr_disable();
c0100e61:       e8 69 0a 00 00          call   c01018cf <intr_disable>
        return 1;
c0100e66:       b8 01 00 00 00          mov    $0x1,%eax
c0100e6b:       eb 05                   jmp    c0100e72 <__intr_save+0x28>
    }
    return 0;
c0100e6d:       b8 00 00 00 00          mov    $0x0,%eax
}
c0100e72:       c9                      leave
c0100e73:       c3                      ret

c0100e74 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0100e74:       55                      push   %ebp
c0100e75:       89 e5                   mov    %esp,%ebp
c0100e77:       83 ec 08                sub    $0x8,%esp
    if (flag) {
c0100e7a:       83 7d 08 00             cmpl   $0x0,0x8(%ebp)
c0100e7e:       74 05                   je     c0100e85 <__intr_restore+0x11>
        intr_enable();
c0100e80:       e8 44 0a 00 00          call   c01018c9 <intr_enable>
    }
}
c0100e85:       c9                      leave
c0100e86:       c3                      ret

c0100e87 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0100e87:       55                      push   %ebp
c0100e88:       89 e5                   mov    %esp,%ebp
c0100e8a:       83 ec 10                sub    $0x10,%esp
c0100e8d:       66 c7 45 fe 84 00       movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100e93:       0f b7 45 fe             movzwl -0x2(%ebp),%eax
c0100e97:       89 c2                   mov    %eax,%edx
c0100e99:       ec                      in     (%dx),%al
c0100e9a:       88 45 fd                mov    %al,-0x3(%ebp)
c0100e9d:       66 c7 45 fa 84 00       movw   $0x84,-0x6(%ebp)
c0100ea3:       0f b7 45 fa             movzwl -0x6(%ebp),%eax
c0100ea7:       89 c2                   mov    %eax,%edx
c0100ea9:       ec                      in     (%dx),%al
c0100eaa:       88 45 f9                mov    %al,-0x7(%ebp)
c0100ead:       66 c7 45 f6 84 00       movw   $0x84,-0xa(%ebp)
c0100eb3:       0f b7 45 f6             movzwl -0xa(%ebp),%eax
c0100eb7:       89 c2                   mov    %eax,%edx
c0100eb9:       ec                      in     (%dx),%al
c0100eba:       88 45 f5                mov    %al,-0xb(%ebp)
c0100ebd:       66 c7 45 f2 84 00       movw   $0x84,-0xe(%ebp)
c0100ec3:       0f b7 45 f2             movzwl -0xe(%ebp),%eax
c0100ec7:       89 c2                   mov    %eax,%edx
c0100ec9:       ec                      in     (%dx),%al
c0100eca:       88 45 f1                mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0100ecd:       c9                      leave
c0100ece:       c3                      ret

c0100ecf <cga_init>:
//    -- 数据寄存器 映射 到 端口 0x3D5或0x3B5
//    -- 索引寄存器 0x3D4或0x3B4,决定在数据寄存器中的数据表示什么。

/* TEXT-mode CGA/VGA display output */
static void
cga_init(void) {
c0100ecf:       55                      push   %ebp
c0100ed0:       89 e5                   mov    %esp,%ebp
c0100ed2:       83 ec 20                sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);  //CGA_BUF: 0xB8000 (彩色显示的显存物理基址)
c0100ed5:       c7 45 fc 00 80 0b c0    movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;                                            //保存当前显存0xB8000处的值
c0100edc:       8b 45 fc                mov    -0x4(%ebp),%eax
c0100edf:       0f b7 00                movzwl (%eax),%eax
c0100ee2:       66 89 45 fa             mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;                                   // 给这个地址随便写个值，看看能否再读出同样的值
c0100ee6:       8b 45 fc                mov    -0x4(%ebp),%eax
c0100ee9:       66 c7 00 5a a5          movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {                                            // 如果读不出来，说明没有这块显存，即是单显配置
c0100eee:       8b 45 fc                mov    -0x4(%ebp),%eax
c0100ef1:       0f b7 00                movzwl (%eax),%eax
c0100ef4:       66 3d 5a a5             cmp    $0xa55a,%ax
c0100ef8:       74 12                   je     c0100f0c <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);                 //设置为单显的显存基址 MONO_BUF： 0xB0000
c0100efa:       c7 45 fc 00 00 0b c0    movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;                           //设置为单显控制的IO地址，MONO_BASE: 0x3B4
c0100f01:       66 c7 05 86 be 10 c0    movw   $0x3b4,0xc010be86
c0100f08:       b4 03
c0100f0a:       eb 13                   jmp    c0100f1f <cga_init+0x50>
    } else {                                                                // 如果读出来了，有这块显存，即是彩显配置
        *cp = was;                                                      //还原原来显存位置的值
c0100f0c:       8b 45 fc                mov    -0x4(%ebp),%eax
c0100f0f:       0f b7 55 fa             movzwl -0x6(%ebp),%edx
c0100f13:       66 89 10                mov    %dx,(%eax)
        addr_6845 = CGA_BASE;                               // 设置为彩显控制的IO地址，CGA_BASE: 0x3D4
c0100f16:       66 c7 05 86 be 10 c0    movw   $0x3d4,0xc010be86
c0100f1d:       d4 03
    // Extract cursor location
    // 6845索引寄存器的index 0x0E（及十进制的14）== 光标位置(高位)
    // 6845索引寄存器的index 0x0F（及十进制的15）== 光标位置(低位)
    // 6845 reg 15 : Cursor Address (Low Byte)
    uint32_t pos;
    outb(addr_6845, 14);
c0100f1f:       0f b7 05 86 be 10 c0    movzwl 0xc010be86,%eax
c0100f26:       0f b7 c0                movzwl %ax,%eax
c0100f29:       66 89 45 f2             mov    %ax,-0xe(%ebp)
c0100f2d:       c6 45 f1 0e             movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f31:       0f b6 45 f1             movzbl -0xf(%ebp),%eax
c0100f35:       0f b7 55 f2             movzwl -0xe(%ebp),%edx
c0100f39:       ee                      out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;                       //读出了光标位置(高位)
c0100f3a:       0f b7 05 86 be 10 c0    movzwl 0xc010be86,%eax
c0100f41:       83 c0 01                add    $0x1,%eax
c0100f44:       0f b7 c0                movzwl %ax,%eax
c0100f47:       66 89 45 ee             mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f4b:       0f b7 45 ee             movzwl -0x12(%ebp),%eax
c0100f4f:       89 c2                   mov    %eax,%edx
c0100f51:       ec                      in     (%dx),%al
c0100f52:       88 45 ed                mov    %al,-0x13(%ebp)
    return data;
c0100f55:       0f b6 45 ed             movzbl -0x13(%ebp),%eax
c0100f59:       0f b6 c0                movzbl %al,%eax
c0100f5c:       c1 e0 08                shl    $0x8,%eax
c0100f5f:       89 45 f4                mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0100f62:       0f b7 05 86 be 10 c0    movzwl 0xc010be86,%eax
c0100f69:       0f b7 c0                movzwl %ax,%eax
c0100f6c:       66 89 45 ea             mov    %ax,-0x16(%ebp)
c0100f70:       c6 45 e9 0f             movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f74:       0f b6 45 e9             movzbl -0x17(%ebp),%eax
c0100f78:       0f b7 55 ea             movzwl -0x16(%ebp),%edx
c0100f7c:       ee                      out    %al,(%dx)
    pos |= inb(addr_6845 + 1);                             //读出了光标位置(低位)
c0100f7d:       0f b7 05 86 be 10 c0    movzwl 0xc010be86,%eax
c0100f84:       83 c0 01                add    $0x1,%eax
c0100f87:       0f b7 c0                movzwl %ax,%eax
c0100f8a:       66 89 45 e6             mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f8e:       0f b7 45 e6             movzwl -0x1a(%ebp),%eax
c0100f92:       89 c2                   mov    %eax,%edx
c0100f94:       ec                      in     (%dx),%al
c0100f95:       88 45 e5                mov    %al,-0x1b(%ebp)
    return data;
c0100f98:       0f b6 45 e5             movzbl -0x1b(%ebp),%eax
c0100f9c:       0f b6 c0                movzbl %al,%eax
c0100f9f:       09 45 f4                or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;                                  //crt_buf是CGA显存起始地址
c0100fa2:       8b 45 fc                mov    -0x4(%ebp),%eax
c0100fa5:       a3 80 be 10 c0          mov    %eax,0xc010be80
    crt_pos = pos;                                                  //crt_pos是CGA当前光标位置
c0100faa:       8b 45 f4                mov    -0xc(%ebp),%eax
c0100fad:       66 a3 84 be 10 c0       mov    %ax,0xc010be84
}
c0100fb3:       c9                      leave
c0100fb4:       c3                      ret

c0100fb5 <serial_init>:

static bool serial_exists = 0;

// 串口的初始化函数
static void
serial_init(void) {
c0100fb5:       55                      push   %ebp
c0100fb6:       89 e5                   mov    %esp,%ebp
c0100fb8:       83 ec 48                sub    $0x48,%esp
c0100fbb:       66 c7 45 f6 fa 03       movw   $0x3fa,-0xa(%ebp)
c0100fc1:       c6 45 f5 00             movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100fc5:       0f b6 45 f5             movzbl -0xb(%ebp),%eax
c0100fc9:       0f b7 55 f6             movzwl -0xa(%ebp),%edx
c0100fcd:       ee                      out    %al,(%dx)
c0100fce:       66 c7 45 f2 fb 03       movw   $0x3fb,-0xe(%ebp)
c0100fd4:       c6 45 f1 80             movb   $0x80,-0xf(%ebp)
c0100fd8:       0f b6 45 f1             movzbl -0xf(%ebp),%eax
c0100fdc:       0f b7 55 f2             movzwl -0xe(%ebp),%edx
c0100fe0:       ee                      out    %al,(%dx)
c0100fe1:       66 c7 45 ee f8 03       movw   $0x3f8,-0x12(%ebp)
c0100fe7:       c6 45 ed 0c             movb   $0xc,-0x13(%ebp)
c0100feb:       0f b6 45 ed             movzbl -0x13(%ebp),%eax
c0100fef:       0f b7 55 ee             movzwl -0x12(%ebp),%edx
c0100ff3:       ee                      out    %al,(%dx)
c0100ff4:       66 c7 45 ea f9 03       movw   $0x3f9,-0x16(%ebp)
c0100ffa:       c6 45 e9 00             movb   $0x0,-0x17(%ebp)
c0100ffe:       0f b6 45 e9             movzbl -0x17(%ebp),%eax
c0101002:       0f b7 55 ea             movzwl -0x16(%ebp),%edx
c0101006:       ee                      out    %al,(%dx)
c0101007:       66 c7 45 e6 fb 03       movw   $0x3fb,-0x1a(%ebp)
c010100d:       c6 45 e5 03             movb   $0x3,-0x1b(%ebp)
c0101011:       0f b6 45 e5             movzbl -0x1b(%ebp),%eax
c0101015:       0f b7 55 e6             movzwl -0x1a(%ebp),%edx
c0101019:       ee                      out    %al,(%dx)
c010101a:       66 c7 45 e2 fc 03       movw   $0x3fc,-0x1e(%ebp)
c0101020:       c6 45 e1 00             movb   $0x0,-0x1f(%ebp)
c0101024:       0f b6 45 e1             movzbl -0x1f(%ebp),%eax
c0101028:       0f b7 55 e2             movzwl -0x1e(%ebp),%edx
c010102c:       ee                      out    %al,(%dx)
c010102d:       66 c7 45 de f9 03       movw   $0x3f9,-0x22(%ebp)
c0101033:       c6 45 dd 01             movb   $0x1,-0x23(%ebp)
c0101037:       0f b6 45 dd             movzbl -0x23(%ebp),%eax
c010103b:       0f b7 55 de             movzwl -0x22(%ebp),%edx
c010103f:       ee                      out    %al,(%dx)
c0101040:       66 c7 45 da fd 03       movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101046:       0f b7 45 da             movzwl -0x26(%ebp),%eax
c010104a:       89 c2                   mov    %eax,%edx
c010104c:       ec                      in     (%dx),%al
c010104d:       88 45 d9                mov    %al,-0x27(%ebp)
    return data;
c0101050:       0f b6 45 d9             movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101054:       3c ff                   cmp    $0xff,%al
c0101056:       0f 95 c0                setne  %al
c0101059:       0f b6 c0                movzbl %al,%eax
c010105c:       a3 88 be 10 c0          mov    %eax,0xc010be88
c0101061:       66 c7 45 d6 fa 03       movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101067:       0f b7 45 d6             movzwl -0x2a(%ebp),%eax
c010106b:       89 c2                   mov    %eax,%edx
c010106d:       ec                      in     (%dx),%al
c010106e:       88 45 d5                mov    %al,-0x2b(%ebp)
c0101071:       66 c7 45 d2 f8 03       movw   $0x3f8,-0x2e(%ebp)
c0101077:       0f b7 45 d2             movzwl -0x2e(%ebp),%eax
c010107b:       89 c2                   mov    %eax,%edx
c010107d:       ec                      in     (%dx),%al
c010107e:       88 45 d1                mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101081:       a1 88 be 10 c0          mov    0xc010be88,%eax
c0101086:       85 c0                   test   %eax,%eax
c0101088:       74 0c                   je     c0101096 <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c010108a:       c7 04 24 04 00 00 00    movl   $0x4,(%esp)
c0101091:       e8 ca 06 00 00          call   c0101760 <pic_enable>
    }
}
c0101096:       c9                      leave
c0101097:       c3                      ret

c0101098 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101098:       55                      push   %ebp
c0101099:       89 e5                   mov    %esp,%ebp
c010109b:       83 ec 20                sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010109e:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%ebp)
c01010a5:       eb 09                   jmp    c01010b0 <lpt_putc_sub+0x18>
        delay();
c01010a7:       e8 db fd ff ff          call   c0100e87 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01010ac:       83 45 fc 01             addl   $0x1,-0x4(%ebp)
c01010b0:       66 c7 45 fa 79 03       movw   $0x379,-0x6(%ebp)
c01010b6:       0f b7 45 fa             movzwl -0x6(%ebp),%eax
c01010ba:       89 c2                   mov    %eax,%edx
c01010bc:       ec                      in     (%dx),%al
c01010bd:       88 45 f9                mov    %al,-0x7(%ebp)
    return data;
c01010c0:       0f b6 45 f9             movzbl -0x7(%ebp),%eax
c01010c4:       84 c0                   test   %al,%al
c01010c6:       78 09                   js     c01010d1 <lpt_putc_sub+0x39>
c01010c8:       81 7d fc ff 31 00 00    cmpl   $0x31ff,-0x4(%ebp)
c01010cf:       7e d6                   jle    c01010a7 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c01010d1:       8b 45 08                mov    0x8(%ebp),%eax
c01010d4:       0f b6 c0                movzbl %al,%eax
c01010d7:       66 c7 45 f6 78 03       movw   $0x378,-0xa(%ebp)
c01010dd:       88 45 f5                mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010e0:       0f b6 45 f5             movzbl -0xb(%ebp),%eax
c01010e4:       0f b7 55 f6             movzwl -0xa(%ebp),%edx
c01010e8:       ee                      out    %al,(%dx)
c01010e9:       66 c7 45 f2 7a 03       movw   $0x37a,-0xe(%ebp)
c01010ef:       c6 45 f1 0d             movb   $0xd,-0xf(%ebp)
c01010f3:       0f b6 45 f1             movzbl -0xf(%ebp),%eax
c01010f7:       0f b7 55 f2             movzwl -0xe(%ebp),%edx
c01010fb:       ee                      out    %al,(%dx)
c01010fc:       66 c7 45 ee 7a 03       movw   $0x37a,-0x12(%ebp)
c0101102:       c6 45 ed 08             movb   $0x8,-0x13(%ebp)
c0101106:       0f b6 45 ed             movzbl -0x13(%ebp),%eax
c010110a:       0f b7 55 ee             movzwl -0x12(%ebp),%edx
c010110e:       ee                      out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c010110f:       c9                      leave
c0101110:       c3                      ret

c0101111 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0101111:       55                      push   %ebp
c0101112:       89 e5                   mov    %esp,%ebp
c0101114:       83 ec 04                sub    $0x4,%esp
    if (c != '\b') {
c0101117:       83 7d 08 08             cmpl   $0x8,0x8(%ebp)
c010111b:       74 0d                   je     c010112a <lpt_putc+0x19>
        lpt_putc_sub(c);
c010111d:       8b 45 08                mov    0x8(%ebp),%eax
c0101120:       89 04 24                mov    %eax,(%esp)
c0101123:       e8 70 ff ff ff          call   c0101098 <lpt_putc_sub>
c0101128:       eb 24                   jmp    c010114e <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c010112a:       c7 04 24 08 00 00 00    movl   $0x8,(%esp)
c0101131:       e8 62 ff ff ff          call   c0101098 <lpt_putc_sub>
        lpt_putc_sub(' ');
c0101136:       c7 04 24 20 00 00 00    movl   $0x20,(%esp)
c010113d:       e8 56 ff ff ff          call   c0101098 <lpt_putc_sub>
        lpt_putc_sub('\b');
c0101142:       c7 04 24 08 00 00 00    movl   $0x8,(%esp)
c0101149:       e8 4a ff ff ff          call   c0101098 <lpt_putc_sub>
    }
}
c010114e:       c9                      leave
c010114f:       c3                      ret

c0101150 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101150:       55                      push   %ebp
c0101151:       89 e5                   mov    %esp,%ebp
c0101153:       53                      push   %ebx
c0101154:       83 ec 34                sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101157:       8b 45 08                mov    0x8(%ebp),%eax
c010115a:       b0 00                   mov    $0x0,%al
c010115c:       85 c0                   test   %eax,%eax
c010115e:       75 07                   jne    c0101167 <cga_putc+0x17>
        c |= 0x0700;
c0101160:       81 4d 08 00 07 00 00    orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101167:       8b 45 08                mov    0x8(%ebp),%eax
c010116a:       0f b6 c0                movzbl %al,%eax
c010116d:       83 f8 0a                cmp    $0xa,%eax
c0101170:       74 4c                   je     c01011be <cga_putc+0x6e>
c0101172:       83 f8 0d                cmp    $0xd,%eax
c0101175:       74 57                   je     c01011ce <cga_putc+0x7e>
c0101177:       83 f8 08                cmp    $0x8,%eax
c010117a:       0f 85 88 00 00 00       jne    c0101208 <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101180:       0f b7 05 84 be 10 c0    movzwl 0xc010be84,%eax
c0101187:       66 85 c0                test   %ax,%ax
c010118a:       74 30                   je     c01011bc <cga_putc+0x6c>
            crt_pos --;
c010118c:       0f b7 05 84 be 10 c0    movzwl 0xc010be84,%eax
c0101193:       83 e8 01                sub    $0x1,%eax
c0101196:       66 a3 84 be 10 c0       mov    %ax,0xc010be84
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c010119c:       a1 80 be 10 c0          mov    0xc010be80,%eax
c01011a1:       0f b7 15 84 be 10 c0    movzwl 0xc010be84,%edx
c01011a8:       0f b7 d2                movzwl %dx,%edx
c01011ab:       01 d2                   add    %edx,%edx
c01011ad:       01 c2                   add    %eax,%edx
c01011af:       8b 45 08                mov    0x8(%ebp),%eax
c01011b2:       b0 00                   mov    $0x0,%al
c01011b4:       83 c8 20                or     $0x20,%eax
c01011b7:       66 89 02                mov    %ax,(%edx)
        }
        break;
c01011ba:       eb 72                   jmp    c010122e <cga_putc+0xde>
c01011bc:       eb 70                   jmp    c010122e <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c01011be:       0f b7 05 84 be 10 c0    movzwl 0xc010be84,%eax
c01011c5:       83 c0 50                add    $0x50,%eax
c01011c8:       66 a3 84 be 10 c0       mov    %ax,0xc010be84
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c01011ce:       0f b7 1d 84 be 10 c0    movzwl 0xc010be84,%ebx
c01011d5:       0f b7 0d 84 be 10 c0    movzwl 0xc010be84,%ecx
c01011dc:       0f b7 c1                movzwl %cx,%eax
c01011df:       69 c0 cd cc 00 00       imul   $0xcccd,%eax,%eax
c01011e5:       c1 e8 10                shr    $0x10,%eax
c01011e8:       89 c2                   mov    %eax,%edx
c01011ea:       66 c1 ea 06             shr    $0x6,%dx
c01011ee:       89 d0                   mov    %edx,%eax
c01011f0:       c1 e0 02                shl    $0x2,%eax
c01011f3:       01 d0                   add    %edx,%eax
c01011f5:       c1 e0 04                shl    $0x4,%eax
c01011f8:       29 c1                   sub    %eax,%ecx
c01011fa:       89 ca                   mov    %ecx,%edx
c01011fc:       89 d8                   mov    %ebx,%eax
c01011fe:       29 d0                   sub    %edx,%eax
c0101200:       66 a3 84 be 10 c0       mov    %ax,0xc010be84
        break;
c0101206:       eb 26                   jmp    c010122e <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101208:       8b 0d 80 be 10 c0       mov    0xc010be80,%ecx
c010120e:       0f b7 05 84 be 10 c0    movzwl 0xc010be84,%eax
c0101215:       8d 50 01                lea    0x1(%eax),%edx
c0101218:       66 89 15 84 be 10 c0    mov    %dx,0xc010be84
c010121f:       0f b7 c0                movzwl %ax,%eax
c0101222:       01 c0                   add    %eax,%eax
c0101224:       8d 14 01                lea    (%ecx,%eax,1),%edx
c0101227:       8b 45 08                mov    0x8(%ebp),%eax
c010122a:       66 89 02                mov    %ax,(%edx)
        break;
c010122d:       90                      nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c010122e:       0f b7 05 84 be 10 c0    movzwl 0xc010be84,%eax
c0101235:       66 3d cf 07             cmp    $0x7cf,%ax
c0101239:       76 5b                   jbe    c0101296 <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c010123b:       a1 80 be 10 c0          mov    0xc010be80,%eax
c0101240:       8d 90 a0 00 00 00       lea    0xa0(%eax),%edx
c0101246:       a1 80 be 10 c0          mov    0xc010be80,%eax
c010124b:       c7 44 24 08 00 0f 00    movl   $0xf00,0x8(%esp)
c0101252:       00
c0101253:       89 54 24 04             mov    %edx,0x4(%esp)
c0101257:       89 04 24                mov    %eax,(%esp)
c010125a:       e8 91 53 00 00          call   c01065f0 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010125f:       c7 45 f4 80 07 00 00    movl   $0x780,-0xc(%ebp)
c0101266:       eb 15                   jmp    c010127d <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c0101268:       a1 80 be 10 c0          mov    0xc010be80,%eax
c010126d:       8b 55 f4                mov    -0xc(%ebp),%edx
c0101270:       01 d2                   add    %edx,%edx
c0101272:       01 d0                   add    %edx,%eax
c0101274:       66 c7 00 20 07          movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101279:       83 45 f4 01             addl   $0x1,-0xc(%ebp)
c010127d:       81 7d f4 cf 07 00 00    cmpl   $0x7cf,-0xc(%ebp)
c0101284:       7e e2                   jle    c0101268 <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101286:       0f b7 05 84 be 10 c0    movzwl 0xc010be84,%eax
c010128d:       83 e8 50                sub    $0x50,%eax
c0101290:       66 a3 84 be 10 c0       mov    %ax,0xc010be84
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101296:       0f b7 05 86 be 10 c0    movzwl 0xc010be86,%eax
c010129d:       0f b7 c0                movzwl %ax,%eax
c01012a0:       66 89 45 f2             mov    %ax,-0xe(%ebp)
c01012a4:       c6 45 f1 0e             movb   $0xe,-0xf(%ebp)
c01012a8:       0f b6 45 f1             movzbl -0xf(%ebp),%eax
c01012ac:       0f b7 55 f2             movzwl -0xe(%ebp),%edx
c01012b0:       ee                      out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c01012b1:       0f b7 05 84 be 10 c0    movzwl 0xc010be84,%eax
c01012b8:       66 c1 e8 08             shr    $0x8,%ax
c01012bc:       0f b6 c0                movzbl %al,%eax
c01012bf:       0f b7 15 86 be 10 c0    movzwl 0xc010be86,%edx
c01012c6:       83 c2 01                add    $0x1,%edx
c01012c9:       0f b7 d2                movzwl %dx,%edx
c01012cc:       66 89 55 ee             mov    %dx,-0x12(%ebp)
c01012d0:       88 45 ed                mov    %al,-0x13(%ebp)
c01012d3:       0f b6 45 ed             movzbl -0x13(%ebp),%eax
c01012d7:       0f b7 55 ee             movzwl -0x12(%ebp),%edx
c01012db:       ee                      out    %al,(%dx)
    outb(addr_6845, 15);
c01012dc:       0f b7 05 86 be 10 c0    movzwl 0xc010be86,%eax
c01012e3:       0f b7 c0                movzwl %ax,%eax
c01012e6:       66 89 45 ea             mov    %ax,-0x16(%ebp)
c01012ea:       c6 45 e9 0f             movb   $0xf,-0x17(%ebp)
c01012ee:       0f b6 45 e9             movzbl -0x17(%ebp),%eax
c01012f2:       0f b7 55 ea             movzwl -0x16(%ebp),%edx
c01012f6:       ee                      out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c01012f7:       0f b7 05 84 be 10 c0    movzwl 0xc010be84,%eax
c01012fe:       0f b6 c0                movzbl %al,%eax
c0101301:       0f b7 15 86 be 10 c0    movzwl 0xc010be86,%edx
c0101308:       83 c2 01                add    $0x1,%edx
c010130b:       0f b7 d2                movzwl %dx,%edx
c010130e:       66 89 55 e6             mov    %dx,-0x1a(%ebp)
c0101312:       88 45 e5                mov    %al,-0x1b(%ebp)
c0101315:       0f b6 45 e5             movzbl -0x1b(%ebp),%eax
c0101319:       0f b7 55 e6             movzwl -0x1a(%ebp),%edx
c010131d:       ee                      out    %al,(%dx)
}
c010131e:       83 c4 34                add    $0x34,%esp
c0101321:       5b                      pop    %ebx
c0101322:       5d                      pop    %ebp
c0101323:       c3                      ret

c0101324 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101324:       55                      push   %ebp
c0101325:       89 e5                   mov    %esp,%ebp
c0101327:       83 ec 10                sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c010132a:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%ebp)
c0101331:       eb 09                   jmp    c010133c <serial_putc_sub+0x18>
        delay();
c0101333:       e8 4f fb ff ff          call   c0100e87 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101338:       83 45 fc 01             addl   $0x1,-0x4(%ebp)
c010133c:       66 c7 45 fa fd 03       movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101342:       0f b7 45 fa             movzwl -0x6(%ebp),%eax
c0101346:       89 c2                   mov    %eax,%edx
c0101348:       ec                      in     (%dx),%al
c0101349:       88 45 f9                mov    %al,-0x7(%ebp)
    return data;
c010134c:       0f b6 45 f9             movzbl -0x7(%ebp),%eax
c0101350:       0f b6 c0                movzbl %al,%eax
c0101353:       83 e0 20                and    $0x20,%eax
c0101356:       85 c0                   test   %eax,%eax
c0101358:       75 09                   jne    c0101363 <serial_putc_sub+0x3f>
c010135a:       81 7d fc ff 31 00 00    cmpl   $0x31ff,-0x4(%ebp)
c0101361:       7e d0                   jle    c0101333 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101363:       8b 45 08                mov    0x8(%ebp),%eax
c0101366:       0f b6 c0                movzbl %al,%eax
c0101369:       66 c7 45 f6 f8 03       movw   $0x3f8,-0xa(%ebp)
c010136f:       88 45 f5                mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101372:       0f b6 45 f5             movzbl -0xb(%ebp),%eax
c0101376:       0f b7 55 f6             movzwl -0xa(%ebp),%edx
c010137a:       ee                      out    %al,(%dx)
}
c010137b:       c9                      leave
c010137c:       c3                      ret

c010137d <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c010137d:       55                      push   %ebp
c010137e:       89 e5                   mov    %esp,%ebp
c0101380:       83 ec 04                sub    $0x4,%esp
    if (c != '\b') {
c0101383:       83 7d 08 08             cmpl   $0x8,0x8(%ebp)
c0101387:       74 0d                   je     c0101396 <serial_putc+0x19>
        serial_putc_sub(c);
c0101389:       8b 45 08                mov    0x8(%ebp),%eax
c010138c:       89 04 24                mov    %eax,(%esp)
c010138f:       e8 90 ff ff ff          call   c0101324 <serial_putc_sub>
c0101394:       eb 24                   jmp    c01013ba <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c0101396:       c7 04 24 08 00 00 00    movl   $0x8,(%esp)
c010139d:       e8 82 ff ff ff          call   c0101324 <serial_putc_sub>
        serial_putc_sub(' ');
c01013a2:       c7 04 24 20 00 00 00    movl   $0x20,(%esp)
c01013a9:       e8 76 ff ff ff          call   c0101324 <serial_putc_sub>
        serial_putc_sub('\b');
c01013ae:       c7 04 24 08 00 00 00    movl   $0x8,(%esp)
c01013b5:       e8 6a ff ff ff          call   c0101324 <serial_putc_sub>
    }
}
c01013ba:       c9                      leave
c01013bb:       c3                      ret

c01013bc <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c01013bc:       55                      push   %ebp
c01013bd:       89 e5                   mov    %esp,%ebp
c01013bf:       83 ec 18                sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c01013c2:       eb 33                   jmp    c01013f7 <cons_intr+0x3b>
        if (c != 0) {
c01013c4:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c01013c8:       74 2d                   je     c01013f7 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c01013ca:       a1 a4 c0 10 c0          mov    0xc010c0a4,%eax
c01013cf:       8d 50 01                lea    0x1(%eax),%edx
c01013d2:       89 15 a4 c0 10 c0       mov    %edx,0xc010c0a4
c01013d8:       8b 55 f4                mov    -0xc(%ebp),%edx
c01013db:       88 90 a0 be 10 c0       mov    %dl,-0x3fef4160(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c01013e1:       a1 a4 c0 10 c0          mov    0xc010c0a4,%eax
c01013e6:       3d 00 02 00 00          cmp    $0x200,%eax
c01013eb:       75 0a                   jne    c01013f7 <cons_intr+0x3b>
                cons.wpos = 0;
c01013ed:       c7 05 a4 c0 10 c0 00    movl   $0x0,0xc010c0a4
c01013f4:       00 00 00
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c01013f7:       8b 45 08                mov    0x8(%ebp),%eax
c01013fa:       ff d0                   call   *%eax
c01013fc:       89 45 f4                mov    %eax,-0xc(%ebp)
c01013ff:       83 7d f4 ff             cmpl   $0xffffffff,-0xc(%ebp)
c0101403:       75 bf                   jne    c01013c4 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101405:       c9                      leave
c0101406:       c3                      ret

c0101407 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101407:       55                      push   %ebp
c0101408:       89 e5                   mov    %esp,%ebp
c010140a:       83 ec 10                sub    $0x10,%esp
c010140d:       66 c7 45 fa fd 03       movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101413:       0f b7 45 fa             movzwl -0x6(%ebp),%eax
c0101417:       89 c2                   mov    %eax,%edx
c0101419:       ec                      in     (%dx),%al
c010141a:       88 45 f9                mov    %al,-0x7(%ebp)
    return data;
c010141d:       0f b6 45 f9             movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101421:       0f b6 c0                movzbl %al,%eax
c0101424:       83 e0 01                and    $0x1,%eax
c0101427:       85 c0                   test   %eax,%eax
c0101429:       75 07                   jne    c0101432 <serial_proc_data+0x2b>
        return -1;
c010142b:       b8 ff ff ff ff          mov    $0xffffffff,%eax
c0101430:       eb 2a                   jmp    c010145c <serial_proc_data+0x55>
c0101432:       66 c7 45 f6 f8 03       movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101438:       0f b7 45 f6             movzwl -0xa(%ebp),%eax
c010143c:       89 c2                   mov    %eax,%edx
c010143e:       ec                      in     (%dx),%al
c010143f:       88 45 f5                mov    %al,-0xb(%ebp)
    return data;
c0101442:       0f b6 45 f5             movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101446:       0f b6 c0                movzbl %al,%eax
c0101449:       89 45 fc                mov    %eax,-0x4(%ebp)
    if (c == 127) {
c010144c:       83 7d fc 7f             cmpl   $0x7f,-0x4(%ebp)
c0101450:       75 07                   jne    c0101459 <serial_proc_data+0x52>
        c = '\b';
c0101452:       c7 45 fc 08 00 00 00    movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101459:       8b 45 fc                mov    -0x4(%ebp),%eax
}
c010145c:       c9                      leave
c010145d:       c3                      ret

c010145e <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c010145e:       55                      push   %ebp
c010145f:       89 e5                   mov    %esp,%ebp
c0101461:       83 ec 18                sub    $0x18,%esp
    if (serial_exists) {
c0101464:       a1 88 be 10 c0          mov    0xc010be88,%eax
c0101469:       85 c0                   test   %eax,%eax
c010146b:       74 0c                   je     c0101479 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c010146d:       c7 04 24 07 14 10 c0    movl   $0xc0101407,(%esp)
c0101474:       e8 43 ff ff ff          call   c01013bc <cons_intr>
    }
}
c0101479:       c9                      leave
c010147a:       c3                      ret

c010147b <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c010147b:       55                      push   %ebp
c010147c:       89 e5                   mov    %esp,%ebp
c010147e:       83 ec 38                sub    $0x38,%esp
c0101481:       66 c7 45 f0 64 00       movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101487:       0f b7 45 f0             movzwl -0x10(%ebp),%eax
c010148b:       89 c2                   mov    %eax,%edx
c010148d:       ec                      in     (%dx),%al
c010148e:       88 45 ef                mov    %al,-0x11(%ebp)
    return data;
c0101491:       0f b6 45 ef             movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101495:       0f b6 c0                movzbl %al,%eax
c0101498:       83 e0 01                and    $0x1,%eax
c010149b:       85 c0                   test   %eax,%eax
c010149d:       75 0a                   jne    c01014a9 <kbd_proc_data+0x2e>
        return -1;
c010149f:       b8 ff ff ff ff          mov    $0xffffffff,%eax
c01014a4:       e9 59 01 00 00          jmp    c0101602 <kbd_proc_data+0x187>
c01014a9:       66 c7 45 ec 60 00       movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014af:       0f b7 45 ec             movzwl -0x14(%ebp),%eax
c01014b3:       89 c2                   mov    %eax,%edx
c01014b5:       ec                      in     (%dx),%al
c01014b6:       88 45 eb                mov    %al,-0x15(%ebp)
    return data;
c01014b9:       0f b6 45 eb             movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c01014bd:       88 45 f3                mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c01014c0:       80 7d f3 e0             cmpb   $0xe0,-0xd(%ebp)
c01014c4:       75 17                   jne    c01014dd <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c01014c6:       a1 a8 c0 10 c0          mov    0xc010c0a8,%eax
c01014cb:       83 c8 40                or     $0x40,%eax
c01014ce:       a3 a8 c0 10 c0          mov    %eax,0xc010c0a8
        return 0;
c01014d3:       b8 00 00 00 00          mov    $0x0,%eax
c01014d8:       e9 25 01 00 00          jmp    c0101602 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c01014dd:       0f b6 45 f3             movzbl -0xd(%ebp),%eax
c01014e1:       84 c0                   test   %al,%al
c01014e3:       79 47                   jns    c010152c <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c01014e5:       a1 a8 c0 10 c0          mov    0xc010c0a8,%eax
c01014ea:       83 e0 40                and    $0x40,%eax
c01014ed:       85 c0                   test   %eax,%eax
c01014ef:       75 09                   jne    c01014fa <kbd_proc_data+0x7f>
c01014f1:       0f b6 45 f3             movzbl -0xd(%ebp),%eax
c01014f5:       83 e0 7f                and    $0x7f,%eax
c01014f8:       eb 04                   jmp    c01014fe <kbd_proc_data+0x83>
c01014fa:       0f b6 45 f3             movzbl -0xd(%ebp),%eax
c01014fe:       88 45 f3                mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101501:       0f b6 45 f3             movzbl -0xd(%ebp),%eax
c0101505:       0f b6 80 60 b0 10 c0    movzbl -0x3fef4fa0(%eax),%eax
c010150c:       83 c8 40                or     $0x40,%eax
c010150f:       0f b6 c0                movzbl %al,%eax
c0101512:       f7 d0                   not    %eax
c0101514:       89 c2                   mov    %eax,%edx
c0101516:       a1 a8 c0 10 c0          mov    0xc010c0a8,%eax
c010151b:       21 d0                   and    %edx,%eax
c010151d:       a3 a8 c0 10 c0          mov    %eax,0xc010c0a8
        return 0;
c0101522:       b8 00 00 00 00          mov    $0x0,%eax
c0101527:       e9 d6 00 00 00          jmp    c0101602 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c010152c:       a1 a8 c0 10 c0          mov    0xc010c0a8,%eax
c0101531:       83 e0 40                and    $0x40,%eax
c0101534:       85 c0                   test   %eax,%eax
c0101536:       74 11                   je     c0101549 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101538:       80 4d f3 80             orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c010153c:       a1 a8 c0 10 c0          mov    0xc010c0a8,%eax
c0101541:       83 e0 bf                and    $0xffffffbf,%eax
c0101544:       a3 a8 c0 10 c0          mov    %eax,0xc010c0a8
    }

    shift |= shiftcode[data];
c0101549:       0f b6 45 f3             movzbl -0xd(%ebp),%eax
c010154d:       0f b6 80 60 b0 10 c0    movzbl -0x3fef4fa0(%eax),%eax
c0101554:       0f b6 d0                movzbl %al,%edx
c0101557:       a1 a8 c0 10 c0          mov    0xc010c0a8,%eax
c010155c:       09 d0                   or     %edx,%eax
c010155e:       a3 a8 c0 10 c0          mov    %eax,0xc010c0a8
    shift ^= togglecode[data];
c0101563:       0f b6 45 f3             movzbl -0xd(%ebp),%eax
c0101567:       0f b6 80 60 b1 10 c0    movzbl -0x3fef4ea0(%eax),%eax
c010156e:       0f b6 d0                movzbl %al,%edx
c0101571:       a1 a8 c0 10 c0          mov    0xc010c0a8,%eax
c0101576:       31 d0                   xor    %edx,%eax
c0101578:       a3 a8 c0 10 c0          mov    %eax,0xc010c0a8

    c = charcode[shift & (CTL | SHIFT)][data];
c010157d:       a1 a8 c0 10 c0          mov    0xc010c0a8,%eax
c0101582:       83 e0 03                and    $0x3,%eax
c0101585:       8b 14 85 60 b5 10 c0    mov    -0x3fef4aa0(,%eax,4),%edx
c010158c:       0f b6 45 f3             movzbl -0xd(%ebp),%eax
c0101590:       01 d0                   add    %edx,%eax
c0101592:       0f b6 00                movzbl (%eax),%eax
c0101595:       0f b6 c0                movzbl %al,%eax
c0101598:       89 45 f4                mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c010159b:       a1 a8 c0 10 c0          mov    0xc010c0a8,%eax
c01015a0:       83 e0 08                and    $0x8,%eax
c01015a3:       85 c0                   test   %eax,%eax
c01015a5:       74 22                   je     c01015c9 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c01015a7:       83 7d f4 60             cmpl   $0x60,-0xc(%ebp)
c01015ab:       7e 0c                   jle    c01015b9 <kbd_proc_data+0x13e>
c01015ad:       83 7d f4 7a             cmpl   $0x7a,-0xc(%ebp)
c01015b1:       7f 06                   jg     c01015b9 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c01015b3:       83 6d f4 20             subl   $0x20,-0xc(%ebp)
c01015b7:       eb 10                   jmp    c01015c9 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c01015b9:       83 7d f4 40             cmpl   $0x40,-0xc(%ebp)
c01015bd:       7e 0a                   jle    c01015c9 <kbd_proc_data+0x14e>
c01015bf:       83 7d f4 5a             cmpl   $0x5a,-0xc(%ebp)
c01015c3:       7f 04                   jg     c01015c9 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c01015c5:       83 45 f4 20             addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c01015c9:       a1 a8 c0 10 c0          mov    0xc010c0a8,%eax
c01015ce:       f7 d0                   not    %eax
c01015d0:       83 e0 06                and    $0x6,%eax
c01015d3:       85 c0                   test   %eax,%eax
c01015d5:       75 28                   jne    c01015ff <kbd_proc_data+0x184>
c01015d7:       81 7d f4 e9 00 00 00    cmpl   $0xe9,-0xc(%ebp)
c01015de:       75 1f                   jne    c01015ff <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c01015e0:       c7 04 24 25 71 10 c0    movl   $0xc0107125,(%esp)
c01015e7:       e8 fa ec ff ff          call   c01002e6 <cprintf>
c01015ec:       66 c7 45 e8 92 00       movw   $0x92,-0x18(%ebp)
c01015f2:       c6 45 e7 03             movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01015f6:       0f b6 45 e7             movzbl -0x19(%ebp),%eax
c01015fa:       0f b7 55 e8             movzwl -0x18(%ebp),%edx
c01015fe:       ee                      out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01015ff:       8b 45 f4                mov    -0xc(%ebp),%eax
}
c0101602:       c9                      leave
c0101603:       c3                      ret

c0101604 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101604:       55                      push   %ebp
c0101605:       89 e5                   mov    %esp,%ebp
c0101607:       83 ec 18                sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c010160a:       c7 04 24 7b 14 10 c0    movl   $0xc010147b,(%esp)
c0101611:       e8 a6 fd ff ff          call   c01013bc <cons_intr>
}
c0101616:       c9                      leave
c0101617:       c3                      ret

c0101618 <kbd_init>:

static void
kbd_init(void) {
c0101618:       55                      push   %ebp
c0101619:       89 e5                   mov    %esp,%ebp
c010161b:       83 ec 18                sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c010161e:       e8 e1 ff ff ff          call   c0101604 <kbd_intr>
    pic_enable(IRQ_KBD);
c0101623:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c010162a:       e8 31 01 00 00          call   c0101760 <pic_enable>
}
c010162f:       c9                      leave
c0101630:       c3                      ret

c0101631 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101631:       55                      push   %ebp
c0101632:       89 e5                   mov    %esp,%ebp
c0101634:       83 ec 18                sub    $0x18,%esp
    cga_init();
c0101637:       e8 93 f8 ff ff          call   c0100ecf <cga_init>
    serial_init();
c010163c:       e8 74 f9 ff ff          call   c0100fb5 <serial_init>
    kbd_init();
c0101641:       e8 d2 ff ff ff          call   c0101618 <kbd_init>
    if (!serial_exists) {
c0101646:       a1 88 be 10 c0          mov    0xc010be88,%eax
c010164b:       85 c0                   test   %eax,%eax
c010164d:       75 0c                   jne    c010165b <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c010164f:       c7 04 24 31 71 10 c0    movl   $0xc0107131,(%esp)
c0101656:       e8 8b ec ff ff          call   c01002e6 <cprintf>
    }
}
c010165b:       c9                      leave
c010165c:       c3                      ret

c010165d <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c010165d:       55                      push   %ebp
c010165e:       89 e5                   mov    %esp,%ebp
c0101660:       83 ec 28                sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101663:       e8 e2 f7 ff ff          call   c0100e4a <__intr_save>
c0101668:       89 45 f4                mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c010166b:       8b 45 08                mov    0x8(%ebp),%eax
c010166e:       89 04 24                mov    %eax,(%esp)
c0101671:       e8 9b fa ff ff          call   c0101111 <lpt_putc>
        cga_putc(c);
c0101676:       8b 45 08                mov    0x8(%ebp),%eax
c0101679:       89 04 24                mov    %eax,(%esp)
c010167c:       e8 cf fa ff ff          call   c0101150 <cga_putc>
        serial_putc(c);
c0101681:       8b 45 08                mov    0x8(%ebp),%eax
c0101684:       89 04 24                mov    %eax,(%esp)
c0101687:       e8 f1 fc ff ff          call   c010137d <serial_putc>
    }
    local_intr_restore(intr_flag);
c010168c:       8b 45 f4                mov    -0xc(%ebp),%eax
c010168f:       89 04 24                mov    %eax,(%esp)
c0101692:       e8 dd f7 ff ff          call   c0100e74 <__intr_restore>
}
c0101697:       c9                      leave
c0101698:       c3                      ret

c0101699 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101699:       55                      push   %ebp
c010169a:       89 e5                   mov    %esp,%ebp
c010169c:       83 ec 28                sub    $0x28,%esp
    int c = 0;
c010169f:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c01016a6:       e8 9f f7 ff ff          call   c0100e4a <__intr_save>
c01016ab:       89 45 f0                mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c01016ae:       e8 ab fd ff ff          call   c010145e <serial_intr>
        kbd_intr();
c01016b3:       e8 4c ff ff ff          call   c0101604 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c01016b8:       8b 15 a0 c0 10 c0       mov    0xc010c0a0,%edx
c01016be:       a1 a4 c0 10 c0          mov    0xc010c0a4,%eax
c01016c3:       39 c2                   cmp    %eax,%edx
c01016c5:       74 31                   je     c01016f8 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c01016c7:       a1 a0 c0 10 c0          mov    0xc010c0a0,%eax
c01016cc:       8d 50 01                lea    0x1(%eax),%edx
c01016cf:       89 15 a0 c0 10 c0       mov    %edx,0xc010c0a0
c01016d5:       0f b6 80 a0 be 10 c0    movzbl -0x3fef4160(%eax),%eax
c01016dc:       0f b6 c0                movzbl %al,%eax
c01016df:       89 45 f4                mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c01016e2:       a1 a0 c0 10 c0          mov    0xc010c0a0,%eax
c01016e7:       3d 00 02 00 00          cmp    $0x200,%eax
c01016ec:       75 0a                   jne    c01016f8 <cons_getc+0x5f>
                cons.rpos = 0;
c01016ee:       c7 05 a0 c0 10 c0 00    movl   $0x0,0xc010c0a0
c01016f5:       00 00 00
            }
        }
    }
    local_intr_restore(intr_flag);
c01016f8:       8b 45 f0                mov    -0x10(%ebp),%eax
c01016fb:       89 04 24                mov    %eax,(%esp)
c01016fe:       e8 71 f7 ff ff          call   c0100e74 <__intr_restore>
    return c;
c0101703:       8b 45 f4                mov    -0xc(%ebp),%eax
}
c0101706:       c9                      leave
c0101707:       c3                      ret

c0101708 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0101708:       55                      push   %ebp
c0101709:       89 e5                   mov    %esp,%ebp
c010170b:       83 ec 14                sub    $0x14,%esp
c010170e:       8b 45 08                mov    0x8(%ebp),%eax
c0101711:       66 89 45 ec             mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0101715:       0f b7 45 ec             movzwl -0x14(%ebp),%eax
c0101719:       66 a3 70 b5 10 c0       mov    %ax,0xc010b570
    if (did_init) {
c010171f:       a1 ac c0 10 c0          mov    0xc010c0ac,%eax
c0101724:       85 c0                   test   %eax,%eax
c0101726:       74 36                   je     c010175e <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0101728:       0f b7 45 ec             movzwl -0x14(%ebp),%eax
c010172c:       0f b6 c0                movzbl %al,%eax
c010172f:       66 c7 45 fe 21 00       movw   $0x21,-0x2(%ebp)
c0101735:       88 45 fd                mov    %al,-0x3(%ebp)
c0101738:       0f b6 45 fd             movzbl -0x3(%ebp),%eax
c010173c:       0f b7 55 fe             movzwl -0x2(%ebp),%edx
c0101740:       ee                      out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0101741:       0f b7 45 ec             movzwl -0x14(%ebp),%eax
c0101745:       66 c1 e8 08             shr    $0x8,%ax
c0101749:       0f b6 c0                movzbl %al,%eax
c010174c:       66 c7 45 fa a1 00       movw   $0xa1,-0x6(%ebp)
c0101752:       88 45 f9                mov    %al,-0x7(%ebp)
c0101755:       0f b6 45 f9             movzbl -0x7(%ebp),%eax
c0101759:       0f b7 55 fa             movzwl -0x6(%ebp),%edx
c010175d:       ee                      out    %al,(%dx)
    }
}
c010175e:       c9                      leave
c010175f:       c3                      ret

c0101760 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0101760:       55                      push   %ebp
c0101761:       89 e5                   mov    %esp,%ebp
c0101763:       83 ec 04                sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c0101766:       8b 45 08                mov    0x8(%ebp),%eax
c0101769:       ba 01 00 00 00          mov    $0x1,%edx
c010176e:       89 c1                   mov    %eax,%ecx
c0101770:       d3 e2                   shl    %cl,%edx
c0101772:       89 d0                   mov    %edx,%eax
c0101774:       f7 d0                   not    %eax
c0101776:       89 c2                   mov    %eax,%edx
c0101778:       0f b7 05 70 b5 10 c0    movzwl 0xc010b570,%eax
c010177f:       21 d0                   and    %edx,%eax
c0101781:       0f b7 c0                movzwl %ax,%eax
c0101784:       89 04 24                mov    %eax,(%esp)
c0101787:       e8 7c ff ff ff          call   c0101708 <pic_setmask>
}
c010178c:       c9                      leave
c010178d:       c3                      ret

c010178e <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c010178e:       55                      push   %ebp
c010178f:       89 e5                   mov    %esp,%ebp
c0101791:       83 ec 44                sub    $0x44,%esp
    did_init = 1;
c0101794:       c7 05 ac c0 10 c0 01    movl   $0x1,0xc010c0ac
c010179b:       00 00 00
c010179e:       66 c7 45 fe 21 00       movw   $0x21,-0x2(%ebp)
c01017a4:       c6 45 fd ff             movb   $0xff,-0x3(%ebp)
c01017a8:       0f b6 45 fd             movzbl -0x3(%ebp),%eax
c01017ac:       0f b7 55 fe             movzwl -0x2(%ebp),%edx
c01017b0:       ee                      out    %al,(%dx)
c01017b1:       66 c7 45 fa a1 00       movw   $0xa1,-0x6(%ebp)
c01017b7:       c6 45 f9 ff             movb   $0xff,-0x7(%ebp)
c01017bb:       0f b6 45 f9             movzbl -0x7(%ebp),%eax
c01017bf:       0f b7 55 fa             movzwl -0x6(%ebp),%edx
c01017c3:       ee                      out    %al,(%dx)
c01017c4:       66 c7 45 f6 20 00       movw   $0x20,-0xa(%ebp)
c01017ca:       c6 45 f5 11             movb   $0x11,-0xb(%ebp)
c01017ce:       0f b6 45 f5             movzbl -0xb(%ebp),%eax
c01017d2:       0f b7 55 f6             movzwl -0xa(%ebp),%edx
c01017d6:       ee                      out    %al,(%dx)
c01017d7:       66 c7 45 f2 21 00       movw   $0x21,-0xe(%ebp)
c01017dd:       c6 45 f1 20             movb   $0x20,-0xf(%ebp)
c01017e1:       0f b6 45 f1             movzbl -0xf(%ebp),%eax
c01017e5:       0f b7 55 f2             movzwl -0xe(%ebp),%edx
c01017e9:       ee                      out    %al,(%dx)
c01017ea:       66 c7 45 ee 21 00       movw   $0x21,-0x12(%ebp)
c01017f0:       c6 45 ed 04             movb   $0x4,-0x13(%ebp)
c01017f4:       0f b6 45 ed             movzbl -0x13(%ebp),%eax
c01017f8:       0f b7 55 ee             movzwl -0x12(%ebp),%edx
c01017fc:       ee                      out    %al,(%dx)
c01017fd:       66 c7 45 ea 21 00       movw   $0x21,-0x16(%ebp)
c0101803:       c6 45 e9 03             movb   $0x3,-0x17(%ebp)
c0101807:       0f b6 45 e9             movzbl -0x17(%ebp),%eax
c010180b:       0f b7 55 ea             movzwl -0x16(%ebp),%edx
c010180f:       ee                      out    %al,(%dx)
c0101810:       66 c7 45 e6 a0 00       movw   $0xa0,-0x1a(%ebp)
c0101816:       c6 45 e5 11             movb   $0x11,-0x1b(%ebp)
c010181a:       0f b6 45 e5             movzbl -0x1b(%ebp),%eax
c010181e:       0f b7 55 e6             movzwl -0x1a(%ebp),%edx
c0101822:       ee                      out    %al,(%dx)
c0101823:       66 c7 45 e2 a1 00       movw   $0xa1,-0x1e(%ebp)
c0101829:       c6 45 e1 28             movb   $0x28,-0x1f(%ebp)
c010182d:       0f b6 45 e1             movzbl -0x1f(%ebp),%eax
c0101831:       0f b7 55 e2             movzwl -0x1e(%ebp),%edx
c0101835:       ee                      out    %al,(%dx)
c0101836:       66 c7 45 de a1 00       movw   $0xa1,-0x22(%ebp)
c010183c:       c6 45 dd 02             movb   $0x2,-0x23(%ebp)
c0101840:       0f b6 45 dd             movzbl -0x23(%ebp),%eax
c0101844:       0f b7 55 de             movzwl -0x22(%ebp),%edx
c0101848:       ee                      out    %al,(%dx)
c0101849:       66 c7 45 da a1 00       movw   $0xa1,-0x26(%ebp)
c010184f:       c6 45 d9 03             movb   $0x3,-0x27(%ebp)
c0101853:       0f b6 45 d9             movzbl -0x27(%ebp),%eax
c0101857:       0f b7 55 da             movzwl -0x26(%ebp),%edx
c010185b:       ee                      out    %al,(%dx)
c010185c:       66 c7 45 d6 20 00       movw   $0x20,-0x2a(%ebp)
c0101862:       c6 45 d5 68             movb   $0x68,-0x2b(%ebp)
c0101866:       0f b6 45 d5             movzbl -0x2b(%ebp),%eax
c010186a:       0f b7 55 d6             movzwl -0x2a(%ebp),%edx
c010186e:       ee                      out    %al,(%dx)
c010186f:       66 c7 45 d2 20 00       movw   $0x20,-0x2e(%ebp)
c0101875:       c6 45 d1 0a             movb   $0xa,-0x2f(%ebp)
c0101879:       0f b6 45 d1             movzbl -0x2f(%ebp),%eax
c010187d:       0f b7 55 d2             movzwl -0x2e(%ebp),%edx
c0101881:       ee                      out    %al,(%dx)
c0101882:       66 c7 45 ce a0 00       movw   $0xa0,-0x32(%ebp)
c0101888:       c6 45 cd 68             movb   $0x68,-0x33(%ebp)
c010188c:       0f b6 45 cd             movzbl -0x33(%ebp),%eax
c0101890:       0f b7 55 ce             movzwl -0x32(%ebp),%edx
c0101894:       ee                      out    %al,(%dx)
c0101895:       66 c7 45 ca a0 00       movw   $0xa0,-0x36(%ebp)
c010189b:       c6 45 c9 0a             movb   $0xa,-0x37(%ebp)
c010189f:       0f b6 45 c9             movzbl -0x37(%ebp),%eax
c01018a3:       0f b7 55 ca             movzwl -0x36(%ebp),%edx
c01018a7:       ee                      out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01018a8:       0f b7 05 70 b5 10 c0    movzwl 0xc010b570,%eax
c01018af:       66 83 f8 ff             cmp    $0xffff,%ax
c01018b3:       74 12                   je     c01018c7 <pic_init+0x139>
        pic_setmask(irq_mask);
c01018b5:       0f b7 05 70 b5 10 c0    movzwl 0xc010b570,%eax
c01018bc:       0f b7 c0                movzwl %ax,%eax
c01018bf:       89 04 24                mov    %eax,(%esp)
c01018c2:       e8 41 fe ff ff          call   c0101708 <pic_setmask>
    }
}
c01018c7:       c9                      leave
c01018c8:       c3                      ret

c01018c9 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01018c9:       55                      push   %ebp
c01018ca:       89 e5                   mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01018cc:       fb                      sti
    sti();
}
c01018cd:       5d                      pop    %ebp
c01018ce:       c3                      ret

c01018cf <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01018cf:       55                      push   %ebp
c01018d0:       89 e5                   mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01018d2:       fa                      cli
    cli();
}
c01018d3:       5d                      pop    %ebp
c01018d4:       c3                      ret

c01018d5 <print_ticks>:
#include <kdebug.h>
#include <string.h>

#define TICK_NUM 100

static void print_ticks() {
c01018d5:       55                      push   %ebp
c01018d6:       89 e5                   mov    %esp,%ebp
c01018d8:       83 ec 18                sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01018db:       c7 44 24 04 64 00 00    movl   $0x64,0x4(%esp)
c01018e2:       00
c01018e3:       c7 04 24 60 71 10 c0    movl   $0xc0107160,(%esp)
c01018ea:       e8 f7 e9 ff ff          call   c01002e6 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c01018ef:       c9                      leave
c01018f0:       c3                      ret

c01018f1 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01018f1:       55                      push   %ebp
c01018f2:       89 e5                   mov    %esp,%ebp
c01018f4:       83 ec 10                sub    $0x10,%esp
      */
  // 根据提示，首先要__vectors，extern是外部变量声明，__vectors是通过tools/vector.c生成的vectors.S里面定义的
  extern uintptr_t __vectors[];
  // 对2562个中断向量表初始化
  int i;
  for (i = 0; i < (sizeof(idt) / (sizeof(struct gatedesc))); i++)
c01018f7:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%ebp)
c01018fe:       e9 4f 01 00 00          jmp    c0101a52 <idt_init+0x161>
    // idt数据里面的每一个，也可以用指针表示，
    // 0表示是一个interrupt gate
    // segment selector设置为GD_KTEXT（代码段）
    // offset设置为__vectors对应的内容
    // DPL设置为0
    SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0101903:       8b 45 fc                mov    -0x4(%ebp),%eax
c0101906:       8b 04 85 00 b6 10 c0    mov    -0x3fef4a00(,%eax,4),%eax
c010190d:       89 c2                   mov    %eax,%edx
c010190f:       8b 45 fc                mov    -0x4(%ebp),%eax
c0101912:       66 89 14 c5 c0 c0 10    mov    %dx,-0x3fef3f40(,%eax,8)
c0101919:       c0
c010191a:       8b 45 fc                mov    -0x4(%ebp),%eax
c010191d:       66 c7 04 c5 c2 c0 10    movw   $0x8,-0x3fef3f3e(,%eax,8)
c0101924:       c0 08 00
c0101927:       8b 45 fc                mov    -0x4(%ebp),%eax
c010192a:       0f b6 14 c5 c4 c0 10    movzbl -0x3fef3f3c(,%eax,8),%edx
c0101931:       c0
c0101932:       83 e2 e0                and    $0xffffffe0,%edx
c0101935:       88 14 c5 c4 c0 10 c0    mov    %dl,-0x3fef3f3c(,%eax,8)
c010193c:       8b 45 fc                mov    -0x4(%ebp),%eax
c010193f:       0f b6 14 c5 c4 c0 10    movzbl -0x3fef3f3c(,%eax,8),%edx
c0101946:       c0
c0101947:       83 e2 1f                and    $0x1f,%edx
c010194a:       88 14 c5 c4 c0 10 c0    mov    %dl,-0x3fef3f3c(,%eax,8)
c0101951:       8b 45 fc                mov    -0x4(%ebp),%eax
c0101954:       0f b6 14 c5 c5 c0 10    movzbl -0x3fef3f3b(,%eax,8),%edx
c010195b:       c0
c010195c:       83 e2 f0                and    $0xfffffff0,%edx
c010195f:       83 ca 0e                or     $0xe,%edx
c0101962:       88 14 c5 c5 c0 10 c0    mov    %dl,-0x3fef3f3b(,%eax,8)
c0101969:       8b 45 fc                mov    -0x4(%ebp),%eax
c010196c:       0f b6 14 c5 c5 c0 10    movzbl -0x3fef3f3b(,%eax,8),%edx
c0101973:       c0
c0101974:       83 e2 ef                and    $0xffffffef,%edx
c0101977:       88 14 c5 c5 c0 10 c0    mov    %dl,-0x3fef3f3b(,%eax,8)
c010197e:       8b 45 fc                mov    -0x4(%ebp),%eax
c0101981:       0f b6 14 c5 c5 c0 10    movzbl -0x3fef3f3b(,%eax,8),%edx
c0101988:       c0
c0101989:       83 e2 9f                and    $0xffffff9f,%edx
c010198c:       88 14 c5 c5 c0 10 c0    mov    %dl,-0x3fef3f3b(,%eax,8)
c0101993:       8b 45 fc                mov    -0x4(%ebp),%eax
c0101996:       0f b6 14 c5 c5 c0 10    movzbl -0x3fef3f3b(,%eax,8),%edx
c010199d:       c0
c010199e:       83 ca 80                or     $0xffffff80,%edx
c01019a1:       88 14 c5 c5 c0 10 c0    mov    %dl,-0x3fef3f3b(,%eax,8)
c01019a8:       8b 45 fc                mov    -0x4(%ebp),%eax
c01019ab:       8b 04 85 00 b6 10 c0    mov    -0x3fef4a00(,%eax,4),%eax
c01019b2:       c1 e8 10                shr    $0x10,%eax
c01019b5:       89 c2                   mov    %eax,%edx
c01019b7:       8b 45 fc                mov    -0x4(%ebp),%eax
c01019ba:       66 89 14 c5 c6 c0 10    mov    %dx,-0x3fef3f3a(,%eax,8)
c01019c1:       c0
          // 再把从用户态切换到内核态使用的Segment Descriptor改一下
  // 需要注意的是，我们使用的segment都是一样的，都是GD_KTEXT
  // 而有一点不同的是这里的DPL是DPL_USER，即从user->kernel时，需要的该段的权限级别
  // 因为Privilege Check需要满足：DPL >= max {CPL, RPL}
  // 所以如果不单独改这个会造成Privilege Check失败，无法正确处理user->kernel的流程
  SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
c01019c2:       a1 e4 b7 10 c0          mov    0xc010b7e4,%eax
c01019c7:       66 a3 88 c4 10 c0       mov    %ax,0xc010c488
c01019cd:       66 c7 05 8a c4 10 c0    movw   $0x8,0xc010c48a
c01019d4:       08 00
c01019d6:       0f b6 05 8c c4 10 c0    movzbl 0xc010c48c,%eax
c01019dd:       83 e0 e0                and    $0xffffffe0,%eax
c01019e0:       a2 8c c4 10 c0          mov    %al,0xc010c48c
c01019e5:       0f b6 05 8c c4 10 c0    movzbl 0xc010c48c,%eax
c01019ec:       83 e0 1f                and    $0x1f,%eax
c01019ef:       a2 8c c4 10 c0          mov    %al,0xc010c48c
c01019f4:       0f b6 05 8d c4 10 c0    movzbl 0xc010c48d,%eax
c01019fb:       83 e0 f0                and    $0xfffffff0,%eax
c01019fe:       83 c8 0e                or     $0xe,%eax
c0101a01:       a2 8d c4 10 c0          mov    %al,0xc010c48d
c0101a06:       0f b6 05 8d c4 10 c0    movzbl 0xc010c48d,%eax
c0101a0d:       83 e0 ef                and    $0xffffffef,%eax
c0101a10:       a2 8d c4 10 c0          mov    %al,0xc010c48d
c0101a15:       0f b6 05 8d c4 10 c0    movzbl 0xc010c48d,%eax
c0101a1c:       83 c8 60                or     $0x60,%eax
c0101a1f:       a2 8d c4 10 c0          mov    %al,0xc010c48d
c0101a24:       0f b6 05 8d c4 10 c0    movzbl 0xc010c48d,%eax
c0101a2b:       83 c8 80                or     $0xffffff80,%eax
c0101a2e:       a2 8d c4 10 c0          mov    %al,0xc010c48d
c0101a33:       a1 e4 b7 10 c0          mov    0xc010b7e4,%eax
c0101a38:       c1 e8 10                shr    $0x10,%eax
c0101a3b:       66 a3 8e c4 10 c0       mov    %ax,0xc010c48e
c0101a41:       c7 45 f8 80 b5 10 c0    movl   $0xc010b580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c0101a48:       8b 45 f8                mov    -0x8(%ebp),%eax
c0101a4b:       0f 01 18                lidtl  (%eax)
      */
  // 根据提示，首先要__vectors，extern是外部变量声明，__vectors是通过tools/vector.c生成的vectors.S里面定义的
  extern uintptr_t __vectors[];
  // 对2562个中断向量表初始化
  int i;
  for (i = 0; i < (sizeof(idt) / (sizeof(struct gatedesc))); i++)
c0101a4e:       83 45 fc 01             addl   $0x1,-0x4(%ebp)
c0101a52:       8b 45 fc                mov    -0x4(%ebp),%eax
c0101a55:       3d ff 00 00 00          cmp    $0xff,%eax
c0101a5a:       0f 86 a3 fe ff ff       jbe    c0101903 <idt_init+0x12>
  SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);

  // 通过lidt加载
  lidt(&idt_pd);
  }
}
c0101a60:       c9                      leave
c0101a61:       c3                      ret

c0101a62 <trapname>:

static const char *
trapname(int trapno) {
c0101a62:       55                      push   %ebp
c0101a63:       89 e5                   mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c0101a65:       8b 45 08                mov    0x8(%ebp),%eax
c0101a68:       83 f8 13                cmp    $0x13,%eax
c0101a6b:       77 0c                   ja     c0101a79 <trapname+0x17>
        return excnames[trapno];
c0101a6d:       8b 45 08                mov    0x8(%ebp),%eax
c0101a70:       8b 04 85 c0 74 10 c0    mov    -0x3fef8b40(,%eax,4),%eax
c0101a77:       eb 18                   jmp    c0101a91 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0101a79:       83 7d 08 1f             cmpl   $0x1f,0x8(%ebp)
c0101a7d:       7e 0d                   jle    c0101a8c <trapname+0x2a>
c0101a7f:       83 7d 08 2f             cmpl   $0x2f,0x8(%ebp)
c0101a83:       7f 07                   jg     c0101a8c <trapname+0x2a>
        return "Hardware Interrupt";
c0101a85:       b8 6a 71 10 c0          mov    $0xc010716a,%eax
c0101a8a:       eb 05                   jmp    c0101a91 <trapname+0x2f>
    }
    return "(unknown trap)";
c0101a8c:       b8 7d 71 10 c0          mov    $0xc010717d,%eax
}
c0101a91:       5d                      pop    %ebp
c0101a92:       c3                      ret

c0101a93 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0101a93:       55                      push   %ebp
c0101a94:       89 e5                   mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c0101a96:       8b 45 08                mov    0x8(%ebp),%eax
c0101a99:       0f b7 40 3c             movzwl 0x3c(%eax),%eax
c0101a9d:       66 83 f8 08             cmp    $0x8,%ax
c0101aa1:       0f 94 c0                sete   %al
c0101aa4:       0f b6 c0                movzbl %al,%eax
}
c0101aa7:       5d                      pop    %ebp
c0101aa8:       c3                      ret

c0101aa9 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0101aa9:       55                      push   %ebp
c0101aaa:       89 e5                   mov    %esp,%ebp
c0101aac:       83 ec 28                sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c0101aaf:       8b 45 08                mov    0x8(%ebp),%eax
c0101ab2:       89 44 24 04             mov    %eax,0x4(%esp)
c0101ab6:       c7 04 24 be 71 10 c0    movl   $0xc01071be,(%esp)
c0101abd:       e8 24 e8 ff ff          call   c01002e6 <cprintf>
    print_regs(&tf->tf_regs);
c0101ac2:       8b 45 08                mov    0x8(%ebp),%eax
c0101ac5:       89 04 24                mov    %eax,(%esp)
c0101ac8:       e8 a1 01 00 00          call   c0101c6e <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0101acd:       8b 45 08                mov    0x8(%ebp),%eax
c0101ad0:       0f b7 40 2c             movzwl 0x2c(%eax),%eax
c0101ad4:       0f b7 c0                movzwl %ax,%eax
c0101ad7:       89 44 24 04             mov    %eax,0x4(%esp)
c0101adb:       c7 04 24 cf 71 10 c0    movl   $0xc01071cf,(%esp)
c0101ae2:       e8 ff e7 ff ff          call   c01002e6 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0101ae7:       8b 45 08                mov    0x8(%ebp),%eax
c0101aea:       0f b7 40 28             movzwl 0x28(%eax),%eax
c0101aee:       0f b7 c0                movzwl %ax,%eax
c0101af1:       89 44 24 04             mov    %eax,0x4(%esp)
c0101af5:       c7 04 24 e2 71 10 c0    movl   $0xc01071e2,(%esp)
c0101afc:       e8 e5 e7 ff ff          call   c01002e6 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0101b01:       8b 45 08                mov    0x8(%ebp),%eax
c0101b04:       0f b7 40 24             movzwl 0x24(%eax),%eax
c0101b08:       0f b7 c0                movzwl %ax,%eax
c0101b0b:       89 44 24 04             mov    %eax,0x4(%esp)
c0101b0f:       c7 04 24 f5 71 10 c0    movl   $0xc01071f5,(%esp)
c0101b16:       e8 cb e7 ff ff          call   c01002e6 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0101b1b:       8b 45 08                mov    0x8(%ebp),%eax
c0101b1e:       0f b7 40 20             movzwl 0x20(%eax),%eax
c0101b22:       0f b7 c0                movzwl %ax,%eax
c0101b25:       89 44 24 04             mov    %eax,0x4(%esp)
c0101b29:       c7 04 24 08 72 10 c0    movl   $0xc0107208,(%esp)
c0101b30:       e8 b1 e7 ff ff          call   c01002e6 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0101b35:       8b 45 08                mov    0x8(%ebp),%eax
c0101b38:       8b 40 30                mov    0x30(%eax),%eax
c0101b3b:       89 04 24                mov    %eax,(%esp)
c0101b3e:       e8 1f ff ff ff          call   c0101a62 <trapname>
c0101b43:       8b 55 08                mov    0x8(%ebp),%edx
c0101b46:       8b 52 30                mov    0x30(%edx),%edx
c0101b49:       89 44 24 08             mov    %eax,0x8(%esp)
c0101b4d:       89 54 24 04             mov    %edx,0x4(%esp)
c0101b51:       c7 04 24 1b 72 10 c0    movl   $0xc010721b,(%esp)
c0101b58:       e8 89 e7 ff ff          call   c01002e6 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c0101b5d:       8b 45 08                mov    0x8(%ebp),%eax
c0101b60:       8b 40 34                mov    0x34(%eax),%eax
c0101b63:       89 44 24 04             mov    %eax,0x4(%esp)
c0101b67:       c7 04 24 2d 72 10 c0    movl   $0xc010722d,(%esp)
c0101b6e:       e8 73 e7 ff ff          call   c01002e6 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0101b73:       8b 45 08                mov    0x8(%ebp),%eax
c0101b76:       8b 40 38                mov    0x38(%eax),%eax
c0101b79:       89 44 24 04             mov    %eax,0x4(%esp)
c0101b7d:       c7 04 24 3c 72 10 c0    movl   $0xc010723c,(%esp)
c0101b84:       e8 5d e7 ff ff          call   c01002e6 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c0101b89:       8b 45 08                mov    0x8(%ebp),%eax
c0101b8c:       0f b7 40 3c             movzwl 0x3c(%eax),%eax
c0101b90:       0f b7 c0                movzwl %ax,%eax
c0101b93:       89 44 24 04             mov    %eax,0x4(%esp)
c0101b97:       c7 04 24 4b 72 10 c0    movl   $0xc010724b,(%esp)
c0101b9e:       e8 43 e7 ff ff          call   c01002e6 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0101ba3:       8b 45 08                mov    0x8(%ebp),%eax
c0101ba6:       8b 40 40                mov    0x40(%eax),%eax
c0101ba9:       89 44 24 04             mov    %eax,0x4(%esp)
c0101bad:       c7 04 24 5e 72 10 c0    movl   $0xc010725e,(%esp)
c0101bb4:       e8 2d e7 ff ff          call   c01002e6 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0101bb9:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
c0101bc0:       c7 45 f0 01 00 00 00    movl   $0x1,-0x10(%ebp)
c0101bc7:       eb 3e                   jmp    c0101c07 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0101bc9:       8b 45 08                mov    0x8(%ebp),%eax
c0101bcc:       8b 50 40                mov    0x40(%eax),%edx
c0101bcf:       8b 45 f0                mov    -0x10(%ebp),%eax
c0101bd2:       21 d0                   and    %edx,%eax
c0101bd4:       85 c0                   test   %eax,%eax
c0101bd6:       74 28                   je     c0101c00 <print_trapframe+0x157>
c0101bd8:       8b 45 f4                mov    -0xc(%ebp),%eax
c0101bdb:       8b 04 85 a0 b5 10 c0    mov    -0x3fef4a60(,%eax,4),%eax
c0101be2:       85 c0                   test   %eax,%eax
c0101be4:       74 1a                   je     c0101c00 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c0101be6:       8b 45 f4                mov    -0xc(%ebp),%eax
c0101be9:       8b 04 85 a0 b5 10 c0    mov    -0x3fef4a60(,%eax,4),%eax
c0101bf0:       89 44 24 04             mov    %eax,0x4(%esp)
c0101bf4:       c7 04 24 6d 72 10 c0    movl   $0xc010726d,(%esp)
c0101bfb:       e8 e6 e6 ff ff          call   c01002e6 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0101c00:       83 45 f4 01             addl   $0x1,-0xc(%ebp)
c0101c04:       d1 65 f0                shll   -0x10(%ebp)
c0101c07:       8b 45 f4                mov    -0xc(%ebp),%eax
c0101c0a:       83 f8 17                cmp    $0x17,%eax
c0101c0d:       76 ba                   jbe    c0101bc9 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0101c0f:       8b 45 08                mov    0x8(%ebp),%eax
c0101c12:       8b 40 40                mov    0x40(%eax),%eax
c0101c15:       25 00 30 00 00          and    $0x3000,%eax
c0101c1a:       c1 e8 0c                shr    $0xc,%eax
c0101c1d:       89 44 24 04             mov    %eax,0x4(%esp)
c0101c21:       c7 04 24 71 72 10 c0    movl   $0xc0107271,(%esp)
c0101c28:       e8 b9 e6 ff ff          call   c01002e6 <cprintf>

    if (!trap_in_kernel(tf)) {
c0101c2d:       8b 45 08                mov    0x8(%ebp),%eax
c0101c30:       89 04 24                mov    %eax,(%esp)
c0101c33:       e8 5b fe ff ff          call   c0101a93 <trap_in_kernel>
c0101c38:       85 c0                   test   %eax,%eax
c0101c3a:       75 30                   jne    c0101c6c <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0101c3c:       8b 45 08                mov    0x8(%ebp),%eax
c0101c3f:       8b 40 44                mov    0x44(%eax),%eax
c0101c42:       89 44 24 04             mov    %eax,0x4(%esp)
c0101c46:       c7 04 24 7a 72 10 c0    movl   $0xc010727a,(%esp)
c0101c4d:       e8 94 e6 ff ff          call   c01002e6 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0101c52:       8b 45 08                mov    0x8(%ebp),%eax
c0101c55:       0f b7 40 48             movzwl 0x48(%eax),%eax
c0101c59:       0f b7 c0                movzwl %ax,%eax
c0101c5c:       89 44 24 04             mov    %eax,0x4(%esp)
c0101c60:       c7 04 24 89 72 10 c0    movl   $0xc0107289,(%esp)
c0101c67:       e8 7a e6 ff ff          call   c01002e6 <cprintf>
    }
}
c0101c6c:       c9                      leave
c0101c6d:       c3                      ret

c0101c6e <print_regs>:

void
print_regs(struct pushregs *regs) {
c0101c6e:       55                      push   %ebp
c0101c6f:       89 e5                   mov    %esp,%ebp
c0101c71:       83 ec 18                sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0101c74:       8b 45 08                mov    0x8(%ebp),%eax
c0101c77:       8b 00                   mov    (%eax),%eax
c0101c79:       89 44 24 04             mov    %eax,0x4(%esp)
c0101c7d:       c7 04 24 9c 72 10 c0    movl   $0xc010729c,(%esp)
c0101c84:       e8 5d e6 ff ff          call   c01002e6 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0101c89:       8b 45 08                mov    0x8(%ebp),%eax
c0101c8c:       8b 40 04                mov    0x4(%eax),%eax
c0101c8f:       89 44 24 04             mov    %eax,0x4(%esp)
c0101c93:       c7 04 24 ab 72 10 c0    movl   $0xc01072ab,(%esp)
c0101c9a:       e8 47 e6 ff ff          call   c01002e6 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0101c9f:       8b 45 08                mov    0x8(%ebp),%eax
c0101ca2:       8b 40 08                mov    0x8(%eax),%eax
c0101ca5:       89 44 24 04             mov    %eax,0x4(%esp)
c0101ca9:       c7 04 24 ba 72 10 c0    movl   $0xc01072ba,(%esp)
c0101cb0:       e8 31 e6 ff ff          call   c01002e6 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0101cb5:       8b 45 08                mov    0x8(%ebp),%eax
c0101cb8:       8b 40 0c                mov    0xc(%eax),%eax
c0101cbb:       89 44 24 04             mov    %eax,0x4(%esp)
c0101cbf:       c7 04 24 c9 72 10 c0    movl   $0xc01072c9,(%esp)
c0101cc6:       e8 1b e6 ff ff          call   c01002e6 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0101ccb:       8b 45 08                mov    0x8(%ebp),%eax
c0101cce:       8b 40 10                mov    0x10(%eax),%eax
c0101cd1:       89 44 24 04             mov    %eax,0x4(%esp)
c0101cd5:       c7 04 24 d8 72 10 c0    movl   $0xc01072d8,(%esp)
c0101cdc:       e8 05 e6 ff ff          call   c01002e6 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0101ce1:       8b 45 08                mov    0x8(%ebp),%eax
c0101ce4:       8b 40 14                mov    0x14(%eax),%eax
c0101ce7:       89 44 24 04             mov    %eax,0x4(%esp)
c0101ceb:       c7 04 24 e7 72 10 c0    movl   $0xc01072e7,(%esp)
c0101cf2:       e8 ef e5 ff ff          call   c01002e6 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0101cf7:       8b 45 08                mov    0x8(%ebp),%eax
c0101cfa:       8b 40 18                mov    0x18(%eax),%eax
c0101cfd:       89 44 24 04             mov    %eax,0x4(%esp)
c0101d01:       c7 04 24 f6 72 10 c0    movl   $0xc01072f6,(%esp)
c0101d08:       e8 d9 e5 ff ff          call   c01002e6 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0101d0d:       8b 45 08                mov    0x8(%ebp),%eax
c0101d10:       8b 40 1c                mov    0x1c(%eax),%eax
c0101d13:       89 44 24 04             mov    %eax,0x4(%esp)
c0101d17:       c7 04 24 05 73 10 c0    movl   $0xc0107305,(%esp)
c0101d1e:       e8 c3 e5 ff ff          call   c01002e6 <cprintf>
}
c0101d23:       c9                      leave
c0101d24:       c3                      ret

c0101d25 <switch2user>:

/**
 *
 */
void switch2user(struct trapframe *tf)
{
c0101d25:       55                      push   %ebp
c0101d26:       89 e5                   mov    %esp,%ebp
c0101d28:       57                      push   %edi
c0101d29:       56                      push   %esi
c0101d2a:       53                      push   %ebx
  // eflags
  // 0x3000 = 00110000 00000000
  // 把nested task位置1，也就是可以嵌套
  tf->tf_eflags |= 0x3000;
c0101d2b:       8b 45 08                mov    0x8(%ebp),%eax
c0101d2e:       8b 40 40                mov    0x40(%eax),%eax
c0101d31:       80 cc 30                or     $0x30,%ah
c0101d34:       89 c2                   mov    %eax,%edx
c0101d36:       8b 45 08                mov    0x8(%ebp),%eax
c0101d39:       89 50 40                mov    %edx,0x40(%eax)

  // USER_CS = 3 << 3 | 3 = 24 | 3 = 27 = 0x1B = 00011011;
  // 如果当前运行的程序不是在用户态的代码段执行（从内核切换过来肯定不会是）
  if (tf->tf_cs != USER_CS)
c0101d3c:       8b 45 08                mov    0x8(%ebp),%eax
c0101d3f:       0f b7 40 3c             movzwl 0x3c(%eax),%eax
c0101d43:       66 83 f8 1b             cmp    $0x1b,%ax
c0101d47:       74 5b                   je     c0101da4 <switch2user+0x7f>
  {
    switchk2u = *tf;
c0101d49:       8b 45 08                mov    0x8(%ebp),%eax
c0101d4c:       ba 60 c9 10 c0          mov    $0xc010c960,%edx
c0101d51:       89 c3                   mov    %eax,%ebx
c0101d53:       b8 13 00 00 00          mov    $0x13,%eax
c0101d58:       89 d7                   mov    %edx,%edi
c0101d5a:       89 de                   mov    %ebx,%esi
c0101d5c:       89 c1                   mov    %eax,%ecx
c0101d5e:       f3 a5                   rep movsl %ds:(%esi),%es:(%edi)
    switchk2u.tf_cs = USER_CS;
c0101d60:       66 c7 05 9c c9 10 c0    movw   $0x1b,0xc010c99c
c0101d67:       1b 00
    // 设置数据段为USER_DS
    switchk2u.tf_ds = switchk2u.tf_es = switchk2u.tf_ss = USER_DS;
c0101d69:       66 c7 05 a8 c9 10 c0    movw   $0x23,0xc010c9a8
c0101d70:       23 00
c0101d72:       0f b7 05 a8 c9 10 c0    movzwl 0xc010c9a8,%eax
c0101d79:       66 a3 88 c9 10 c0       mov    %ax,0xc010c988
c0101d7f:       0f b7 05 88 c9 10 c0    movzwl 0xc010c988,%eax
c0101d86:       66 a3 8c c9 10 c0       mov    %ax,0xc010c98c
    // 因为内存是从高到低，
    // 而这是从内核态切换到用户态（没有ss,sp）
    // (uint32_t)tf + sizeof(struct trapframe) - 8 即 tf->tf_esp的地址
    // 也就是switchk2u.tf_esp，指向旧的tf_esp的值
    switchk2u.tf_esp = (uint32_t)tf + sizeof(struct trapframe) - 8;
c0101d8c:       8b 45 08                mov    0x8(%ebp),%eax
c0101d8f:       83 c0 44                add    $0x44,%eax
c0101d92:       a3 a4 c9 10 c0          mov    %eax,0xc010c9a4
    switchk2u.tf_eflags | FL_IOPL_MASK;

    // (uint32_t *)tf是一个指针，指针的地址-1就
    // *((uint32_t *)tf - 1) 这个指针指向的地址设置为我们新樊笼出来的tss(switchk2u)

    *((uint32_t *)tf - 1) = (uint32_t)&switchk2u;
c0101d97:       8b 45 08                mov    0x8(%ebp),%eax
c0101d9a:       8d 50 fc                lea    -0x4(%eax),%edx
c0101d9d:       b8 60 c9 10 c0          mov    $0xc010c960,%eax
c0101da2:       89 02                   mov    %eax,(%edx)
  }
}
c0101da4:       5b                      pop    %ebx
c0101da5:       5e                      pop    %esi
c0101da6:       5f                      pop    %edi
c0101da7:       5d                      pop    %ebp
c0101da8:       c3                      ret

c0101da9 <switch2kernel>:

void switch2kernel(struct trapframe *tf)
{
c0101da9:       55                      push   %ebp
c0101daa:       89 e5                   mov    %esp,%ebp
c0101dac:       83 ec 18                sub    $0x18,%esp
  if (tf->tf_cs != KERNEL_CS)
c0101daf:       8b 45 08                mov    0x8(%ebp),%eax
c0101db2:       0f b7 40 3c             movzwl 0x3c(%eax),%eax
c0101db6:       66 83 f8 08             cmp    $0x8,%ax
c0101dba:       74 68                   je     c0101e24 <switch2kernel+0x7b>
  {
    // 设置CS为 KERNEL_CS = 0x8 = 1000 =  00001|0|00 -> Index = 1, GDT, RPL = 0
    tf->tf_cs = KERNEL_CS;
c0101dbc:       8b 45 08                mov    0x8(%ebp),%eax
c0101dbf:       66 c7 40 3c 08 00       movw   $0x8,0x3c(%eax)
    // KERNEL_DS = 00010|0|00 -> Index = 2, GDT, RPL = 0
    tf->tf_ds = tf->tf_es = KERNEL_DS;
c0101dc5:       8b 45 08                mov    0x8(%ebp),%eax
c0101dc8:       66 c7 40 28 10 00       movw   $0x10,0x28(%eax)
c0101dce:       8b 45 08                mov    0x8(%ebp),%eax
c0101dd1:       0f b7 50 28             movzwl 0x28(%eax),%edx
c0101dd5:       8b 45 08                mov    0x8(%ebp),%eax
c0101dd8:       66 89 50 2c             mov    %dx,0x2c(%eax)
    // 也就是把IOPL设置为0
    // IOPL(bits 12 and 13) [I/O privilege level field]
    // 指示当前运行任务的I/O特权级(I/O privilege level)，
    // 正在运行任务的当前特权级(CPL)必须小于或等于I/O特权级才能允许访问I/O地址空间。
    // 这个域只能在CPL为0时才能通过POPF以及IRET指令修改。
    tf->tf_eflags &= ~FL_IOPL_MASK;
c0101ddc:       8b 45 08                mov    0x8(%ebp),%eax
c0101ddf:       8b 40 40                mov    0x40(%eax),%eax
c0101de2:       80 e4 cf                and    $0xcf,%ah
c0101de5:       89 c2                   mov    %eax,%edx
c0101de7:       8b 45 08                mov    0x8(%ebp),%eax
c0101dea:       89 50 40                mov    %edx,0x40(%eax)

    // 由于内存布局是从高到低，所以这里修改switchu2k，指向
    switchu2k = (struct trapframe *)(tf->tf_esp - (sizeof(struct trapframe) - 8));
c0101ded:       8b 45 08                mov    0x8(%ebp),%eax
c0101df0:       8b 40 44                mov    0x44(%eax),%eax
c0101df3:       83 e8 44                sub    $0x44,%eax
c0101df6:       a3 ac c9 10 c0          mov    %eax,0xc010c9ac
    * @n:        number of bytes to copy
    *
    * The memmove() function returns @dst.
    * */
    // 相当于是把tf，拷贝到switchu2k
    memmove(switchu2k, tf, sizeof(struct trapframe) - 8);
c0101dfb:       a1 ac c9 10 c0          mov    0xc010c9ac,%eax
c0101e00:       c7 44 24 08 44 00 00    movl   $0x44,0x8(%esp)
c0101e07:       00
c0101e08:       8b 55 08                mov    0x8(%ebp),%edx
c0101e0b:       89 54 24 04             mov    %edx,0x4(%esp)
c0101e0f:       89 04 24                mov    %eax,(%esp)
c0101e12:       e8 d9 47 00 00          call   c01065f0 <memmove>

    // 修改tf - 1处，指向新的trapframe
    *((uint32_t *)tf - 1) = (uint32_t)switchu2k;
c0101e17:       8b 45 08                mov    0x8(%ebp),%eax
c0101e1a:       8d 50 fc                lea    -0x4(%eax),%edx
c0101e1d:       a1 ac c9 10 c0          mov    0xc010c9ac,%eax
c0101e22:       89 02                   mov    %eax,(%edx)
  }
}
c0101e24:       c9                      leave
c0101e25:       c3                      ret

c0101e26 <trap_dispatch>:

/* trap_dispatch - dispatch based on what type of trap occurred */
static void
trap_dispatch(struct trapframe *tf) {
c0101e26:       55                      push   %ebp
c0101e27:       89 e5                   mov    %esp,%ebp
c0101e29:       83 ec 28                sub    $0x28,%esp
    char c;

    switch (tf->tf_trapno) {
c0101e2c:       8b 45 08                mov    0x8(%ebp),%eax
c0101e2f:       8b 40 30                mov    0x30(%eax),%eax
c0101e32:       83 f8 2f                cmp    $0x2f,%eax
c0101e35:       77 21                   ja     c0101e58 <trap_dispatch+0x32>
c0101e37:       83 f8 2e                cmp    $0x2e,%eax
c0101e3a:       0f 83 45 01 00 00       jae    c0101f85 <trap_dispatch+0x15f>
c0101e40:       83 f8 21                cmp    $0x21,%eax
c0101e43:       0f 84 8a 00 00 00       je     c0101ed3 <trap_dispatch+0xad>
c0101e49:       83 f8 24                cmp    $0x24,%eax
c0101e4c:       74 5c                   je     c0101eaa <trap_dispatch+0x84>
c0101e4e:       83 f8 20                cmp    $0x20,%eax
c0101e51:       74 1c                   je     c0101e6f <trap_dispatch+0x49>
c0101e53:       e9 f5 00 00 00          jmp    c0101f4d <trap_dispatch+0x127>
c0101e58:       83 f8 78                cmp    $0x78,%eax
c0101e5b:       0f 84 d2 00 00 00       je     c0101f33 <trap_dispatch+0x10d>
c0101e61:       83 f8 79                cmp    $0x79,%eax
c0101e64:       0f 84 d6 00 00 00       je     c0101f40 <trap_dispatch+0x11a>
c0101e6a:       e9 de 00 00 00          jmp    c0101f4d <trap_dispatch+0x127>
        /* handle the timer interrupt */
        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
         * (3) Too Simple? Yes, I think so!
         */
    ticks++;
c0101e6f:       a1 50 c9 10 c0          mov    0xc010c950,%eax
c0101e74:       83 c0 01                add    $0x1,%eax
c0101e77:       a3 50 c9 10 c0          mov    %eax,0xc010c950
    if (ticks % TICK_NUM == 0)
c0101e7c:       8b 0d 50 c9 10 c0       mov    0xc010c950,%ecx
c0101e82:       ba 1f 85 eb 51          mov    $0x51eb851f,%edx
c0101e87:       89 c8                   mov    %ecx,%eax
c0101e89:       f7 e2                   mul    %edx
c0101e8b:       89 d0                   mov    %edx,%eax
c0101e8d:       c1 e8 05                shr    $0x5,%eax
c0101e90:       6b c0 64                imul   $0x64,%eax,%eax
c0101e93:       29 c1                   sub    %eax,%ecx
c0101e95:       89 c8                   mov    %ecx,%eax
c0101e97:       85 c0                   test   %eax,%eax
c0101e99:       75 0a                   jne    c0101ea5 <trap_dispatch+0x7f>
    {
      print_ticks();
c0101e9b:       e8 35 fa ff ff          call   c01018d5 <print_ticks>
    }
        break;
c0101ea0:       e9 e1 00 00 00          jmp    c0101f86 <trap_dispatch+0x160>
c0101ea5:       e9 dc 00 00 00          jmp    c0101f86 <trap_dispatch+0x160>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0101eaa:       e8 ea f7 ff ff          call   c0101699 <cons_getc>
c0101eaf:       88 45 f7                mov    %al,-0x9(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c0101eb2:       0f be 55 f7             movsbl -0x9(%ebp),%edx
c0101eb6:       0f be 45 f7             movsbl -0x9(%ebp),%eax
c0101eba:       89 54 24 08             mov    %edx,0x8(%esp)
c0101ebe:       89 44 24 04             mov    %eax,0x4(%esp)
c0101ec2:       c7 04 24 14 73 10 c0    movl   $0xc0107314,(%esp)
c0101ec9:       e8 18 e4 ff ff          call   c01002e6 <cprintf>
        break;
c0101ece:       e9 b3 00 00 00          jmp    c0101f86 <trap_dispatch+0x160>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0101ed3:       e8 c1 f7 ff ff          call   c0101699 <cons_getc>
c0101ed8:       88 45 f7                mov    %al,-0x9(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0101edb:       0f be 55 f7             movsbl -0x9(%ebp),%edx
c0101edf:       0f be 45 f7             movsbl -0x9(%ebp),%eax
c0101ee3:       89 54 24 08             mov    %edx,0x8(%esp)
c0101ee7:       89 44 24 04             mov    %eax,0x4(%esp)
c0101eeb:       c7 04 24 26 73 10 c0    movl   $0xc0107326,(%esp)
c0101ef2:       e8 ef e3 ff ff          call   c01002e6 <cprintf>
                /*********************/
                //Hardware Interrupt is different with software trap, so no need use temp stack

                //if keyboard input '3' it will go to USER mode

                if ( c =='3'){
c0101ef7:       80 7d f7 33             cmpb   $0x33,-0x9(%ebp)
c0101efb:       75 16                   jne    c0101f13 <trap_dispatch+0xed>
                        switch2user(tf);
c0101efd:       8b 45 08                mov    0x8(%ebp),%eax
c0101f00:       89 04 24                mov    %eax,(%esp)
c0101f03:       e8 1d fe ff ff          call   c0101d25 <switch2user>
                        //the status can show in trapframe,
                        //however register value change at iret in trapentry.s,
                        //so lab1_print_cur_status() does not work
                        print_trapframe(tf);
c0101f08:       8b 45 08                mov    0x8(%ebp),%eax
c0101f0b:       89 04 24                mov    %eax,(%esp)
c0101f0e:       e8 96 fb ff ff          call   c0101aa9 <print_trapframe>
                        //lab1_print_cur_status();
                }

                //if keyboard input '0' it will go to Kernel mode
                if ( c =='0'){
c0101f13:       80 7d f7 30             cmpb   $0x30,-0x9(%ebp)
c0101f17:       75 18                   jne    c0101f31 <trap_dispatch+0x10b>

                        switch2kernel(tf);
c0101f19:       8b 45 08                mov    0x8(%ebp),%eax
c0101f1c:       89 04 24                mov    %eax,(%esp)
c0101f1f:       e8 85 fe ff ff          call   c0101da9 <switch2kernel>
                        print_trapframe(tf);
c0101f24:       8b 45 08                mov    0x8(%ebp),%eax
c0101f27:       89 04 24                mov    %eax,(%esp)
c0101f2a:       e8 7a fb ff ff          call   c0101aa9 <print_trapframe>
                        //lab1_print_cur_status();
                }
                break;
c0101f2f:       eb 55                   jmp    c0101f86 <trap_dispatch+0x160>
c0101f31:       eb 53                   jmp    c0101f86 <trap_dispatch+0x160>
  // LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
  case T_SWITCH_TOU:
    // USER_CS = 3 << 3 | 3 = 24 | 3 = 27 = 0x1B = 00011011
    switch2user(tf);
c0101f33:       8b 45 08                mov    0x8(%ebp),%eax
c0101f36:       89 04 24                mov    %eax,(%esp)
c0101f39:       e8 e7 fd ff ff          call   c0101d25 <switch2user>
    break;
c0101f3e:       eb 46                   jmp    c0101f86 <trap_dispatch+0x160>
  case T_SWITCH_TOK:
    // panic("T_SWITCH_** ??\n");
    switch2kernel(tf);
c0101f40:       8b 45 08                mov    0x8(%ebp),%eax
c0101f43:       89 04 24                mov    %eax,(%esp)
c0101f46:       e8 5e fe ff ff          call   c0101da9 <switch2kernel>
    break;
c0101f4b:       eb 39                   jmp    c0101f86 <trap_dispatch+0x160>
  case IRQ_OFFSET + IRQ_IDE2:
    /* do nothing */
    break;
  default:
    // in kernel, it must be a mistake
    if ((tf->tf_cs & 3) == 0)
c0101f4d:       8b 45 08                mov    0x8(%ebp),%eax
c0101f50:       0f b7 40 3c             movzwl 0x3c(%eax),%eax
c0101f54:       0f b7 c0                movzwl %ax,%eax
c0101f57:       83 e0 03                and    $0x3,%eax
c0101f5a:       85 c0                   test   %eax,%eax
c0101f5c:       75 28                   jne    c0101f86 <trap_dispatch+0x160>
    {
      print_trapframe(tf);
c0101f5e:       8b 45 08                mov    0x8(%ebp),%eax
c0101f61:       89 04 24                mov    %eax,(%esp)
c0101f64:       e8 40 fb ff ff          call   c0101aa9 <print_trapframe>
      panic("unexpected trap in kernel.\n");
c0101f69:       c7 44 24 08 35 73 10    movl   $0xc0107335,0x8(%esp)
c0101f70:       c0
c0101f71:       c7 44 24 04 2f 01 00    movl   $0x12f,0x4(%esp)
c0101f78:       00
c0101f79:       c7 04 24 51 73 10 c0    movl   $0xc0107351,(%esp)
c0101f80:       e8 b8 e4 ff ff          call   c010043d <__panic>
    switch2kernel(tf);
    break;
  case IRQ_OFFSET + IRQ_IDE1:
  case IRQ_OFFSET + IRQ_IDE2:
    /* do nothing */
    break;
c0101f85:       90                      nop
    {
      print_trapframe(tf);
      panic("unexpected trap in kernel.\n");
    }
  }
}
c0101f86:       c9                      leave
c0101f87:       c3                      ret

c0101f88 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0101f88:       55                      push   %ebp
c0101f89:       89 e5                   mov    %esp,%ebp
c0101f8b:       83 ec 18                sub    $0x18,%esp
    // dispatch based on what type of trap occurred
    trap_dispatch(tf);
c0101f8e:       8b 45 08                mov    0x8(%ebp),%eax
c0101f91:       89 04 24                mov    %eax,(%esp)
c0101f94:       e8 8d fe ff ff          call   c0101e26 <trap_dispatch>
}
c0101f99:       c9                      leave
c0101f9a:       c3                      ret

c0101f9b <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0101f9b:       6a 00                   push   $0x0
  pushl $0
c0101f9d:       6a 00                   push   $0x0
  jmp __alltraps
c0101f9f:       e9 67 0a 00 00          jmp    c0102a0b <__alltraps>

c0101fa4 <vector1>:
.globl vector1
vector1:
  pushl $0
c0101fa4:       6a 00                   push   $0x0
  pushl $1
c0101fa6:       6a 01                   push   $0x1
  jmp __alltraps
c0101fa8:       e9 5e 0a 00 00          jmp    c0102a0b <__alltraps>

c0101fad <vector2>:
.globl vector2
vector2:
  pushl $0
c0101fad:       6a 00                   push   $0x0
  pushl $2
c0101faf:       6a 02                   push   $0x2
  jmp __alltraps
c0101fb1:       e9 55 0a 00 00          jmp    c0102a0b <__alltraps>

c0101fb6 <vector3>:
.globl vector3
vector3:
  pushl $0
c0101fb6:       6a 00                   push   $0x0
  pushl $3
c0101fb8:       6a 03                   push   $0x3
  jmp __alltraps
c0101fba:       e9 4c 0a 00 00          jmp    c0102a0b <__alltraps>

c0101fbf <vector4>:
.globl vector4
vector4:
  pushl $0
c0101fbf:       6a 00                   push   $0x0
  pushl $4
c0101fc1:       6a 04                   push   $0x4
  jmp __alltraps
c0101fc3:       e9 43 0a 00 00          jmp    c0102a0b <__alltraps>

c0101fc8 <vector5>:
.globl vector5
vector5:
  pushl $0
c0101fc8:       6a 00                   push   $0x0
  pushl $5
c0101fca:       6a 05                   push   $0x5
  jmp __alltraps
c0101fcc:       e9 3a 0a 00 00          jmp    c0102a0b <__alltraps>

c0101fd1 <vector6>:
.globl vector6
vector6:
  pushl $0
c0101fd1:       6a 00                   push   $0x0
  pushl $6
c0101fd3:       6a 06                   push   $0x6
  jmp __alltraps
c0101fd5:       e9 31 0a 00 00          jmp    c0102a0b <__alltraps>

c0101fda <vector7>:
.globl vector7
vector7:
  pushl $0
c0101fda:       6a 00                   push   $0x0
  pushl $7
c0101fdc:       6a 07                   push   $0x7
  jmp __alltraps
c0101fde:       e9 28 0a 00 00          jmp    c0102a0b <__alltraps>

c0101fe3 <vector8>:
.globl vector8
vector8:
  pushl $8
c0101fe3:       6a 08                   push   $0x8
  jmp __alltraps
c0101fe5:       e9 21 0a 00 00          jmp    c0102a0b <__alltraps>

c0101fea <vector9>:
.globl vector9
vector9:
  pushl $9
c0101fea:       6a 09                   push   $0x9
  jmp __alltraps
c0101fec:       e9 1a 0a 00 00          jmp    c0102a0b <__alltraps>

c0101ff1 <vector10>:
.globl vector10
vector10:
  pushl $10
c0101ff1:       6a 0a                   push   $0xa
  jmp __alltraps
c0101ff3:       e9 13 0a 00 00          jmp    c0102a0b <__alltraps>

c0101ff8 <vector11>:
.globl vector11
vector11:
  pushl $11
c0101ff8:       6a 0b                   push   $0xb
  jmp __alltraps
c0101ffa:       e9 0c 0a 00 00          jmp    c0102a0b <__alltraps>

c0101fff <vector12>:
.globl vector12
vector12:
  pushl $12
c0101fff:       6a 0c                   push   $0xc
  jmp __alltraps
c0102001:       e9 05 0a 00 00          jmp    c0102a0b <__alltraps>

c0102006 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102006:       6a 0d                   push   $0xd
  jmp __alltraps
c0102008:       e9 fe 09 00 00          jmp    c0102a0b <__alltraps>

c010200d <vector14>:
.globl vector14
vector14:
  pushl $14
c010200d:       6a 0e                   push   $0xe
  jmp __alltraps
c010200f:       e9 f7 09 00 00          jmp    c0102a0b <__alltraps>

c0102014 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102014:       6a 00                   push   $0x0
  pushl $15
c0102016:       6a 0f                   push   $0xf
  jmp __alltraps
c0102018:       e9 ee 09 00 00          jmp    c0102a0b <__alltraps>

c010201d <vector16>:
.globl vector16
vector16:
  pushl $0
c010201d:       6a 00                   push   $0x0
  pushl $16
c010201f:       6a 10                   push   $0x10
  jmp __alltraps
c0102021:       e9 e5 09 00 00          jmp    c0102a0b <__alltraps>

c0102026 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102026:       6a 11                   push   $0x11
  jmp __alltraps
c0102028:       e9 de 09 00 00          jmp    c0102a0b <__alltraps>

c010202d <vector18>:
.globl vector18
vector18:
  pushl $0
c010202d:       6a 00                   push   $0x0
  pushl $18
c010202f:       6a 12                   push   $0x12
  jmp __alltraps
c0102031:       e9 d5 09 00 00          jmp    c0102a0b <__alltraps>

c0102036 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102036:       6a 00                   push   $0x0
  pushl $19
c0102038:       6a 13                   push   $0x13
  jmp __alltraps
c010203a:       e9 cc 09 00 00          jmp    c0102a0b <__alltraps>

c010203f <vector20>:
.globl vector20
vector20:
  pushl $0
c010203f:       6a 00                   push   $0x0
  pushl $20
c0102041:       6a 14                   push   $0x14
  jmp __alltraps
c0102043:       e9 c3 09 00 00          jmp    c0102a0b <__alltraps>

c0102048 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102048:       6a 00                   push   $0x0
  pushl $21
c010204a:       6a 15                   push   $0x15
  jmp __alltraps
c010204c:       e9 ba 09 00 00          jmp    c0102a0b <__alltraps>

c0102051 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102051:       6a 00                   push   $0x0
  pushl $22
c0102053:       6a 16                   push   $0x16
  jmp __alltraps
c0102055:       e9 b1 09 00 00          jmp    c0102a0b <__alltraps>

c010205a <vector23>:
.globl vector23
vector23:
  pushl $0
c010205a:       6a 00                   push   $0x0
  pushl $23
c010205c:       6a 17                   push   $0x17
  jmp __alltraps
c010205e:       e9 a8 09 00 00          jmp    c0102a0b <__alltraps>

c0102063 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102063:       6a 00                   push   $0x0
  pushl $24
c0102065:       6a 18                   push   $0x18
  jmp __alltraps
c0102067:       e9 9f 09 00 00          jmp    c0102a0b <__alltraps>

c010206c <vector25>:
.globl vector25
vector25:
  pushl $0
c010206c:       6a 00                   push   $0x0
  pushl $25
c010206e:       6a 19                   push   $0x19
  jmp __alltraps
c0102070:       e9 96 09 00 00          jmp    c0102a0b <__alltraps>

c0102075 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102075:       6a 00                   push   $0x0
  pushl $26
c0102077:       6a 1a                   push   $0x1a
  jmp __alltraps
c0102079:       e9 8d 09 00 00          jmp    c0102a0b <__alltraps>

c010207e <vector27>:
.globl vector27
vector27:
  pushl $0
c010207e:       6a 00                   push   $0x0
  pushl $27
c0102080:       6a 1b                   push   $0x1b
  jmp __alltraps
c0102082:       e9 84 09 00 00          jmp    c0102a0b <__alltraps>

c0102087 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102087:       6a 00                   push   $0x0
  pushl $28
c0102089:       6a 1c                   push   $0x1c
  jmp __alltraps
c010208b:       e9 7b 09 00 00          jmp    c0102a0b <__alltraps>

c0102090 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102090:       6a 00                   push   $0x0
  pushl $29
c0102092:       6a 1d                   push   $0x1d
  jmp __alltraps
c0102094:       e9 72 09 00 00          jmp    c0102a0b <__alltraps>

c0102099 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102099:       6a 00                   push   $0x0
  pushl $30
c010209b:       6a 1e                   push   $0x1e
  jmp __alltraps
c010209d:       e9 69 09 00 00          jmp    c0102a0b <__alltraps>

c01020a2 <vector31>:
.globl vector31
vector31:
  pushl $0
c01020a2:       6a 00                   push   $0x0
  pushl $31
c01020a4:       6a 1f                   push   $0x1f
  jmp __alltraps
c01020a6:       e9 60 09 00 00          jmp    c0102a0b <__alltraps>

c01020ab <vector32>:
.globl vector32
vector32:
  pushl $0
c01020ab:       6a 00                   push   $0x0
  pushl $32
c01020ad:       6a 20                   push   $0x20
  jmp __alltraps
c01020af:       e9 57 09 00 00          jmp    c0102a0b <__alltraps>

c01020b4 <vector33>:
.globl vector33
vector33:
  pushl $0
c01020b4:       6a 00                   push   $0x0
  pushl $33
c01020b6:       6a 21                   push   $0x21
  jmp __alltraps
c01020b8:       e9 4e 09 00 00          jmp    c0102a0b <__alltraps>

c01020bd <vector34>:
.globl vector34
vector34:
  pushl $0
c01020bd:       6a 00                   push   $0x0
  pushl $34
c01020bf:       6a 22                   push   $0x22
  jmp __alltraps
c01020c1:       e9 45 09 00 00          jmp    c0102a0b <__alltraps>

c01020c6 <vector35>:
.globl vector35
vector35:
  pushl $0
c01020c6:       6a 00                   push   $0x0
  pushl $35
c01020c8:       6a 23                   push   $0x23
  jmp __alltraps
c01020ca:       e9 3c 09 00 00          jmp    c0102a0b <__alltraps>

c01020cf <vector36>:
.globl vector36
vector36:
  pushl $0
c01020cf:       6a 00                   push   $0x0
  pushl $36
c01020d1:       6a 24                   push   $0x24
  jmp __alltraps
c01020d3:       e9 33 09 00 00          jmp    c0102a0b <__alltraps>

c01020d8 <vector37>:
.globl vector37
vector37:
  pushl $0
c01020d8:       6a 00                   push   $0x0
  pushl $37
c01020da:       6a 25                   push   $0x25
  jmp __alltraps
c01020dc:       e9 2a 09 00 00          jmp    c0102a0b <__alltraps>

c01020e1 <vector38>:
.globl vector38
vector38:
  pushl $0
c01020e1:       6a 00                   push   $0x0
  pushl $38
c01020e3:       6a 26                   push   $0x26
  jmp __alltraps
c01020e5:       e9 21 09 00 00          jmp    c0102a0b <__alltraps>

c01020ea <vector39>:
.globl vector39
vector39:
  pushl $0
c01020ea:       6a 00                   push   $0x0
  pushl $39
c01020ec:       6a 27                   push   $0x27
  jmp __alltraps
c01020ee:       e9 18 09 00 00          jmp    c0102a0b <__alltraps>

c01020f3 <vector40>:
.globl vector40
vector40:
  pushl $0
c01020f3:       6a 00                   push   $0x0
  pushl $40
c01020f5:       6a 28                   push   $0x28
  jmp __alltraps
c01020f7:       e9 0f 09 00 00          jmp    c0102a0b <__alltraps>

c01020fc <vector41>:
.globl vector41
vector41:
  pushl $0
c01020fc:       6a 00                   push   $0x0
  pushl $41
c01020fe:       6a 29                   push   $0x29
  jmp __alltraps
c0102100:       e9 06 09 00 00          jmp    c0102a0b <__alltraps>

c0102105 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102105:       6a 00                   push   $0x0
  pushl $42
c0102107:       6a 2a                   push   $0x2a
  jmp __alltraps
c0102109:       e9 fd 08 00 00          jmp    c0102a0b <__alltraps>

c010210e <vector43>:
.globl vector43
vector43:
  pushl $0
c010210e:       6a 00                   push   $0x0
  pushl $43
c0102110:       6a 2b                   push   $0x2b
  jmp __alltraps
c0102112:       e9 f4 08 00 00          jmp    c0102a0b <__alltraps>

c0102117 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102117:       6a 00                   push   $0x0
  pushl $44
c0102119:       6a 2c                   push   $0x2c
  jmp __alltraps
c010211b:       e9 eb 08 00 00          jmp    c0102a0b <__alltraps>

c0102120 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102120:       6a 00                   push   $0x0
  pushl $45
c0102122:       6a 2d                   push   $0x2d
  jmp __alltraps
c0102124:       e9 e2 08 00 00          jmp    c0102a0b <__alltraps>

c0102129 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102129:       6a 00                   push   $0x0
  pushl $46
c010212b:       6a 2e                   push   $0x2e
  jmp __alltraps
c010212d:       e9 d9 08 00 00          jmp    c0102a0b <__alltraps>

c0102132 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102132:       6a 00                   push   $0x0
  pushl $47
c0102134:       6a 2f                   push   $0x2f
  jmp __alltraps
c0102136:       e9 d0 08 00 00          jmp    c0102a0b <__alltraps>

c010213b <vector48>:
.globl vector48
vector48:
  pushl $0
c010213b:       6a 00                   push   $0x0
  pushl $48
c010213d:       6a 30                   push   $0x30
  jmp __alltraps
c010213f:       e9 c7 08 00 00          jmp    c0102a0b <__alltraps>

c0102144 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102144:       6a 00                   push   $0x0
  pushl $49
c0102146:       6a 31                   push   $0x31
  jmp __alltraps
c0102148:       e9 be 08 00 00          jmp    c0102a0b <__alltraps>

c010214d <vector50>:
.globl vector50
vector50:
  pushl $0
c010214d:       6a 00                   push   $0x0
  pushl $50
c010214f:       6a 32                   push   $0x32
  jmp __alltraps
c0102151:       e9 b5 08 00 00          jmp    c0102a0b <__alltraps>

c0102156 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102156:       6a 00                   push   $0x0
  pushl $51
c0102158:       6a 33                   push   $0x33
  jmp __alltraps
c010215a:       e9 ac 08 00 00          jmp    c0102a0b <__alltraps>

c010215f <vector52>:
.globl vector52
vector52:
  pushl $0
c010215f:       6a 00                   push   $0x0
  pushl $52
c0102161:       6a 34                   push   $0x34
  jmp __alltraps
c0102163:       e9 a3 08 00 00          jmp    c0102a0b <__alltraps>

c0102168 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102168:       6a 00                   push   $0x0
  pushl $53
c010216a:       6a 35                   push   $0x35
  jmp __alltraps
c010216c:       e9 9a 08 00 00          jmp    c0102a0b <__alltraps>

c0102171 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102171:       6a 00                   push   $0x0
  pushl $54
c0102173:       6a 36                   push   $0x36
  jmp __alltraps
c0102175:       e9 91 08 00 00          jmp    c0102a0b <__alltraps>

c010217a <vector55>:
.globl vector55
vector55:
  pushl $0
c010217a:       6a 00                   push   $0x0
  pushl $55
c010217c:       6a 37                   push   $0x37
  jmp __alltraps
c010217e:       e9 88 08 00 00          jmp    c0102a0b <__alltraps>

c0102183 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102183:       6a 00                   push   $0x0
  pushl $56
c0102185:       6a 38                   push   $0x38
  jmp __alltraps
c0102187:       e9 7f 08 00 00          jmp    c0102a0b <__alltraps>

c010218c <vector57>:
.globl vector57
vector57:
  pushl $0
c010218c:       6a 00                   push   $0x0
  pushl $57
c010218e:       6a 39                   push   $0x39
  jmp __alltraps
c0102190:       e9 76 08 00 00          jmp    c0102a0b <__alltraps>

c0102195 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102195:       6a 00                   push   $0x0
  pushl $58
c0102197:       6a 3a                   push   $0x3a
  jmp __alltraps
c0102199:       e9 6d 08 00 00          jmp    c0102a0b <__alltraps>

c010219e <vector59>:
.globl vector59
vector59:
  pushl $0
c010219e:       6a 00                   push   $0x0
  pushl $59
c01021a0:       6a 3b                   push   $0x3b
  jmp __alltraps
c01021a2:       e9 64 08 00 00          jmp    c0102a0b <__alltraps>

c01021a7 <vector60>:
.globl vector60
vector60:
  pushl $0
c01021a7:       6a 00                   push   $0x0
  pushl $60
c01021a9:       6a 3c                   push   $0x3c
  jmp __alltraps
c01021ab:       e9 5b 08 00 00          jmp    c0102a0b <__alltraps>

c01021b0 <vector61>:
.globl vector61
vector61:
  pushl $0
c01021b0:       6a 00                   push   $0x0
  pushl $61
c01021b2:       6a 3d                   push   $0x3d
  jmp __alltraps
c01021b4:       e9 52 08 00 00          jmp    c0102a0b <__alltraps>

c01021b9 <vector62>:
.globl vector62
vector62:
  pushl $0
c01021b9:       6a 00                   push   $0x0
  pushl $62
c01021bb:       6a 3e                   push   $0x3e
  jmp __alltraps
c01021bd:       e9 49 08 00 00          jmp    c0102a0b <__alltraps>

c01021c2 <vector63>:
.globl vector63
vector63:
  pushl $0
c01021c2:       6a 00                   push   $0x0
  pushl $63
c01021c4:       6a 3f                   push   $0x3f
  jmp __alltraps
c01021c6:       e9 40 08 00 00          jmp    c0102a0b <__alltraps>

c01021cb <vector64>:
.globl vector64
vector64:
  pushl $0
c01021cb:       6a 00                   push   $0x0
  pushl $64
c01021cd:       6a 40                   push   $0x40
  jmp __alltraps
c01021cf:       e9 37 08 00 00          jmp    c0102a0b <__alltraps>

c01021d4 <vector65>:
.globl vector65
vector65:
  pushl $0
c01021d4:       6a 00                   push   $0x0
  pushl $65
c01021d6:       6a 41                   push   $0x41
  jmp __alltraps
c01021d8:       e9 2e 08 00 00          jmp    c0102a0b <__alltraps>

c01021dd <vector66>:
.globl vector66
vector66:
  pushl $0
c01021dd:       6a 00                   push   $0x0
  pushl $66
c01021df:       6a 42                   push   $0x42
  jmp __alltraps
c01021e1:       e9 25 08 00 00          jmp    c0102a0b <__alltraps>

c01021e6 <vector67>:
.globl vector67
vector67:
  pushl $0
c01021e6:       6a 00                   push   $0x0
  pushl $67
c01021e8:       6a 43                   push   $0x43
  jmp __alltraps
c01021ea:       e9 1c 08 00 00          jmp    c0102a0b <__alltraps>

c01021ef <vector68>:
.globl vector68
vector68:
  pushl $0
c01021ef:       6a 00                   push   $0x0
  pushl $68
c01021f1:       6a 44                   push   $0x44
  jmp __alltraps
c01021f3:       e9 13 08 00 00          jmp    c0102a0b <__alltraps>

c01021f8 <vector69>:
.globl vector69
vector69:
  pushl $0
c01021f8:       6a 00                   push   $0x0
  pushl $69
c01021fa:       6a 45                   push   $0x45
  jmp __alltraps
c01021fc:       e9 0a 08 00 00          jmp    c0102a0b <__alltraps>

c0102201 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102201:       6a 00                   push   $0x0
  pushl $70
c0102203:       6a 46                   push   $0x46
  jmp __alltraps
c0102205:       e9 01 08 00 00          jmp    c0102a0b <__alltraps>

c010220a <vector71>:
.globl vector71
vector71:
  pushl $0
c010220a:       6a 00                   push   $0x0
  pushl $71
c010220c:       6a 47                   push   $0x47
  jmp __alltraps
c010220e:       e9 f8 07 00 00          jmp    c0102a0b <__alltraps>

c0102213 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102213:       6a 00                   push   $0x0
  pushl $72
c0102215:       6a 48                   push   $0x48
  jmp __alltraps
c0102217:       e9 ef 07 00 00          jmp    c0102a0b <__alltraps>

c010221c <vector73>:
.globl vector73
vector73:
  pushl $0
c010221c:       6a 00                   push   $0x0
  pushl $73
c010221e:       6a 49                   push   $0x49
  jmp __alltraps
c0102220:       e9 e6 07 00 00          jmp    c0102a0b <__alltraps>

c0102225 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102225:       6a 00                   push   $0x0
  pushl $74
c0102227:       6a 4a                   push   $0x4a
  jmp __alltraps
c0102229:       e9 dd 07 00 00          jmp    c0102a0b <__alltraps>

c010222e <vector75>:
.globl vector75
vector75:
  pushl $0
c010222e:       6a 00                   push   $0x0
  pushl $75
c0102230:       6a 4b                   push   $0x4b
  jmp __alltraps
c0102232:       e9 d4 07 00 00          jmp    c0102a0b <__alltraps>

c0102237 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102237:       6a 00                   push   $0x0
  pushl $76
c0102239:       6a 4c                   push   $0x4c
  jmp __alltraps
c010223b:       e9 cb 07 00 00          jmp    c0102a0b <__alltraps>

c0102240 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102240:       6a 00                   push   $0x0
  pushl $77
c0102242:       6a 4d                   push   $0x4d
  jmp __alltraps
c0102244:       e9 c2 07 00 00          jmp    c0102a0b <__alltraps>

c0102249 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102249:       6a 00                   push   $0x0
  pushl $78
c010224b:       6a 4e                   push   $0x4e
  jmp __alltraps
c010224d:       e9 b9 07 00 00          jmp    c0102a0b <__alltraps>

c0102252 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102252:       6a 00                   push   $0x0
  pushl $79
c0102254:       6a 4f                   push   $0x4f
  jmp __alltraps
c0102256:       e9 b0 07 00 00          jmp    c0102a0b <__alltraps>

c010225b <vector80>:
.globl vector80
vector80:
  pushl $0
c010225b:       6a 00                   push   $0x0
  pushl $80
c010225d:       6a 50                   push   $0x50
  jmp __alltraps
c010225f:       e9 a7 07 00 00          jmp    c0102a0b <__alltraps>

c0102264 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102264:       6a 00                   push   $0x0
  pushl $81
c0102266:       6a 51                   push   $0x51
  jmp __alltraps
c0102268:       e9 9e 07 00 00          jmp    c0102a0b <__alltraps>

c010226d <vector82>:
.globl vector82
vector82:
  pushl $0
c010226d:       6a 00                   push   $0x0
  pushl $82
c010226f:       6a 52                   push   $0x52
  jmp __alltraps
c0102271:       e9 95 07 00 00          jmp    c0102a0b <__alltraps>

c0102276 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102276:       6a 00                   push   $0x0
  pushl $83
c0102278:       6a 53                   push   $0x53
  jmp __alltraps
c010227a:       e9 8c 07 00 00          jmp    c0102a0b <__alltraps>

c010227f <vector84>:
.globl vector84
vector84:
  pushl $0
c010227f:       6a 00                   push   $0x0
  pushl $84
c0102281:       6a 54                   push   $0x54
  jmp __alltraps
c0102283:       e9 83 07 00 00          jmp    c0102a0b <__alltraps>

c0102288 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102288:       6a 00                   push   $0x0
  pushl $85
c010228a:       6a 55                   push   $0x55
  jmp __alltraps
c010228c:       e9 7a 07 00 00          jmp    c0102a0b <__alltraps>

c0102291 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102291:       6a 00                   push   $0x0
  pushl $86
c0102293:       6a 56                   push   $0x56
  jmp __alltraps
c0102295:       e9 71 07 00 00          jmp    c0102a0b <__alltraps>

c010229a <vector87>:
.globl vector87
vector87:
  pushl $0
c010229a:       6a 00                   push   $0x0
  pushl $87
c010229c:       6a 57                   push   $0x57
  jmp __alltraps
c010229e:       e9 68 07 00 00          jmp    c0102a0b <__alltraps>

c01022a3 <vector88>:
.globl vector88
vector88:
  pushl $0
c01022a3:       6a 00                   push   $0x0
  pushl $88
c01022a5:       6a 58                   push   $0x58
  jmp __alltraps
c01022a7:       e9 5f 07 00 00          jmp    c0102a0b <__alltraps>

c01022ac <vector89>:
.globl vector89
vector89:
  pushl $0
c01022ac:       6a 00                   push   $0x0
  pushl $89
c01022ae:       6a 59                   push   $0x59
  jmp __alltraps
c01022b0:       e9 56 07 00 00          jmp    c0102a0b <__alltraps>

c01022b5 <vector90>:
.globl vector90
vector90:
  pushl $0
c01022b5:       6a 00                   push   $0x0
  pushl $90
c01022b7:       6a 5a                   push   $0x5a
  jmp __alltraps
c01022b9:       e9 4d 07 00 00          jmp    c0102a0b <__alltraps>

c01022be <vector91>:
.globl vector91
vector91:
  pushl $0
c01022be:       6a 00                   push   $0x0
  pushl $91
c01022c0:       6a 5b                   push   $0x5b
  jmp __alltraps
c01022c2:       e9 44 07 00 00          jmp    c0102a0b <__alltraps>

c01022c7 <vector92>:
.globl vector92
vector92:
  pushl $0
c01022c7:       6a 00                   push   $0x0
  pushl $92
c01022c9:       6a 5c                   push   $0x5c
  jmp __alltraps
c01022cb:       e9 3b 07 00 00          jmp    c0102a0b <__alltraps>

c01022d0 <vector93>:
.globl vector93
vector93:
  pushl $0
c01022d0:       6a 00                   push   $0x0
  pushl $93
c01022d2:       6a 5d                   push   $0x5d
  jmp __alltraps
c01022d4:       e9 32 07 00 00          jmp    c0102a0b <__alltraps>

c01022d9 <vector94>:
.globl vector94
vector94:
  pushl $0
c01022d9:       6a 00                   push   $0x0
  pushl $94
c01022db:       6a 5e                   push   $0x5e
  jmp __alltraps
c01022dd:       e9 29 07 00 00          jmp    c0102a0b <__alltraps>

c01022e2 <vector95>:
.globl vector95
vector95:
  pushl $0
c01022e2:       6a 00                   push   $0x0
  pushl $95
c01022e4:       6a 5f                   push   $0x5f
  jmp __alltraps
c01022e6:       e9 20 07 00 00          jmp    c0102a0b <__alltraps>

c01022eb <vector96>:
.globl vector96
vector96:
  pushl $0
c01022eb:       6a 00                   push   $0x0
  pushl $96
c01022ed:       6a 60                   push   $0x60
  jmp __alltraps
c01022ef:       e9 17 07 00 00          jmp    c0102a0b <__alltraps>

c01022f4 <vector97>:
.globl vector97
vector97:
  pushl $0
c01022f4:       6a 00                   push   $0x0
  pushl $97
c01022f6:       6a 61                   push   $0x61
  jmp __alltraps
c01022f8:       e9 0e 07 00 00          jmp    c0102a0b <__alltraps>

c01022fd <vector98>:
.globl vector98
vector98:
  pushl $0
c01022fd:       6a 00                   push   $0x0
  pushl $98
c01022ff:       6a 62                   push   $0x62
  jmp __alltraps
c0102301:       e9 05 07 00 00          jmp    c0102a0b <__alltraps>

c0102306 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102306:       6a 00                   push   $0x0
  pushl $99
c0102308:       6a 63                   push   $0x63
  jmp __alltraps
c010230a:       e9 fc 06 00 00          jmp    c0102a0b <__alltraps>

c010230f <vector100>:
.globl vector100
vector100:
  pushl $0
c010230f:       6a 00                   push   $0x0
  pushl $100
c0102311:       6a 64                   push   $0x64
  jmp __alltraps
c0102313:       e9 f3 06 00 00          jmp    c0102a0b <__alltraps>

c0102318 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102318:       6a 00                   push   $0x0
  pushl $101
c010231a:       6a 65                   push   $0x65
  jmp __alltraps
c010231c:       e9 ea 06 00 00          jmp    c0102a0b <__alltraps>

c0102321 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102321:       6a 00                   push   $0x0
  pushl $102
c0102323:       6a 66                   push   $0x66
  jmp __alltraps
c0102325:       e9 e1 06 00 00          jmp    c0102a0b <__alltraps>

c010232a <vector103>:
.globl vector103
vector103:
  pushl $0
c010232a:       6a 00                   push   $0x0
  pushl $103
c010232c:       6a 67                   push   $0x67
  jmp __alltraps
c010232e:       e9 d8 06 00 00          jmp    c0102a0b <__alltraps>

c0102333 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102333:       6a 00                   push   $0x0
  pushl $104
c0102335:       6a 68                   push   $0x68
  jmp __alltraps
c0102337:       e9 cf 06 00 00          jmp    c0102a0b <__alltraps>

c010233c <vector105>:
.globl vector105
vector105:
  pushl $0
c010233c:       6a 00                   push   $0x0
  pushl $105
c010233e:       6a 69                   push   $0x69
  jmp __alltraps
c0102340:       e9 c6 06 00 00          jmp    c0102a0b <__alltraps>

c0102345 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102345:       6a 00                   push   $0x0
  pushl $106
c0102347:       6a 6a                   push   $0x6a
  jmp __alltraps
c0102349:       e9 bd 06 00 00          jmp    c0102a0b <__alltraps>

c010234e <vector107>:
.globl vector107
vector107:
  pushl $0
c010234e:       6a 00                   push   $0x0
  pushl $107
c0102350:       6a 6b                   push   $0x6b
  jmp __alltraps
c0102352:       e9 b4 06 00 00          jmp    c0102a0b <__alltraps>

c0102357 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102357:       6a 00                   push   $0x0
  pushl $108
c0102359:       6a 6c                   push   $0x6c
  jmp __alltraps
c010235b:       e9 ab 06 00 00          jmp    c0102a0b <__alltraps>

c0102360 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102360:       6a 00                   push   $0x0
  pushl $109
c0102362:       6a 6d                   push   $0x6d
  jmp __alltraps
c0102364:       e9 a2 06 00 00          jmp    c0102a0b <__alltraps>

c0102369 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102369:       6a 00                   push   $0x0
  pushl $110
c010236b:       6a 6e                   push   $0x6e
  jmp __alltraps
c010236d:       e9 99 06 00 00          jmp    c0102a0b <__alltraps>

c0102372 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102372:       6a 00                   push   $0x0
  pushl $111
c0102374:       6a 6f                   push   $0x6f
  jmp __alltraps
c0102376:       e9 90 06 00 00          jmp    c0102a0b <__alltraps>

c010237b <vector112>:
.globl vector112
vector112:
  pushl $0
c010237b:       6a 00                   push   $0x0
  pushl $112
c010237d:       6a 70                   push   $0x70
  jmp __alltraps
c010237f:       e9 87 06 00 00          jmp    c0102a0b <__alltraps>

c0102384 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102384:       6a 00                   push   $0x0
  pushl $113
c0102386:       6a 71                   push   $0x71
  jmp __alltraps
c0102388:       e9 7e 06 00 00          jmp    c0102a0b <__alltraps>

c010238d <vector114>:
.globl vector114
vector114:
  pushl $0
c010238d:       6a 00                   push   $0x0
  pushl $114
c010238f:       6a 72                   push   $0x72
  jmp __alltraps
c0102391:       e9 75 06 00 00          jmp    c0102a0b <__alltraps>

c0102396 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102396:       6a 00                   push   $0x0
  pushl $115
c0102398:       6a 73                   push   $0x73
  jmp __alltraps
c010239a:       e9 6c 06 00 00          jmp    c0102a0b <__alltraps>

c010239f <vector116>:
.globl vector116
vector116:
  pushl $0
c010239f:       6a 00                   push   $0x0
  pushl $116
c01023a1:       6a 74                   push   $0x74
  jmp __alltraps
c01023a3:       e9 63 06 00 00          jmp    c0102a0b <__alltraps>

c01023a8 <vector117>:
.globl vector117
vector117:
  pushl $0
c01023a8:       6a 00                   push   $0x0
  pushl $117
c01023aa:       6a 75                   push   $0x75
  jmp __alltraps
c01023ac:       e9 5a 06 00 00          jmp    c0102a0b <__alltraps>

c01023b1 <vector118>:
.globl vector118
vector118:
  pushl $0
c01023b1:       6a 00                   push   $0x0
  pushl $118
c01023b3:       6a 76                   push   $0x76
  jmp __alltraps
c01023b5:       e9 51 06 00 00          jmp    c0102a0b <__alltraps>

c01023ba <vector119>:
.globl vector119
vector119:
  pushl $0
c01023ba:       6a 00                   push   $0x0
  pushl $119
c01023bc:       6a 77                   push   $0x77
  jmp __alltraps
c01023be:       e9 48 06 00 00          jmp    c0102a0b <__alltraps>

c01023c3 <vector120>:
.globl vector120
vector120:
  pushl $0
c01023c3:       6a 00                   push   $0x0
  pushl $120
c01023c5:       6a 78                   push   $0x78
  jmp __alltraps
c01023c7:       e9 3f 06 00 00          jmp    c0102a0b <__alltraps>

c01023cc <vector121>:
.globl vector121
vector121:
  pushl $0
c01023cc:       6a 00                   push   $0x0
  pushl $121
c01023ce:       6a 79                   push   $0x79
  jmp __alltraps
c01023d0:       e9 36 06 00 00          jmp    c0102a0b <__alltraps>

c01023d5 <vector122>:
.globl vector122
vector122:
  pushl $0
c01023d5:       6a 00                   push   $0x0
  pushl $122
c01023d7:       6a 7a                   push   $0x7a
  jmp __alltraps
c01023d9:       e9 2d 06 00 00          jmp    c0102a0b <__alltraps>

c01023de <vector123>:
.globl vector123
vector123:
  pushl $0
c01023de:       6a 00                   push   $0x0
  pushl $123
c01023e0:       6a 7b                   push   $0x7b
  jmp __alltraps
c01023e2:       e9 24 06 00 00          jmp    c0102a0b <__alltraps>

c01023e7 <vector124>:
.globl vector124
vector124:
  pushl $0
c01023e7:       6a 00                   push   $0x0
  pushl $124
c01023e9:       6a 7c                   push   $0x7c
  jmp __alltraps
c01023eb:       e9 1b 06 00 00          jmp    c0102a0b <__alltraps>

c01023f0 <vector125>:
.globl vector125
vector125:
  pushl $0
c01023f0:       6a 00                   push   $0x0
  pushl $125
c01023f2:       6a 7d                   push   $0x7d
  jmp __alltraps
c01023f4:       e9 12 06 00 00          jmp    c0102a0b <__alltraps>

c01023f9 <vector126>:
.globl vector126
vector126:
  pushl $0
c01023f9:       6a 00                   push   $0x0
  pushl $126
c01023fb:       6a 7e                   push   $0x7e
  jmp __alltraps
c01023fd:       e9 09 06 00 00          jmp    c0102a0b <__alltraps>

c0102402 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102402:       6a 00                   push   $0x0
  pushl $127
c0102404:       6a 7f                   push   $0x7f
  jmp __alltraps
c0102406:       e9 00 06 00 00          jmp    c0102a0b <__alltraps>

c010240b <vector128>:
.globl vector128
vector128:
  pushl $0
c010240b:       6a 00                   push   $0x0
  pushl $128
c010240d:       68 80 00 00 00          push   $0x80
  jmp __alltraps
c0102412:       e9 f4 05 00 00          jmp    c0102a0b <__alltraps>

c0102417 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102417:       6a 00                   push   $0x0
  pushl $129
c0102419:       68 81 00 00 00          push   $0x81
  jmp __alltraps
c010241e:       e9 e8 05 00 00          jmp    c0102a0b <__alltraps>

c0102423 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102423:       6a 00                   push   $0x0
  pushl $130
c0102425:       68 82 00 00 00          push   $0x82
  jmp __alltraps
c010242a:       e9 dc 05 00 00          jmp    c0102a0b <__alltraps>

c010242f <vector131>:
.globl vector131
vector131:
  pushl $0
c010242f:       6a 00                   push   $0x0
  pushl $131
c0102431:       68 83 00 00 00          push   $0x83
  jmp __alltraps
c0102436:       e9 d0 05 00 00          jmp    c0102a0b <__alltraps>

c010243b <vector132>:
.globl vector132
vector132:
  pushl $0
c010243b:       6a 00                   push   $0x0
  pushl $132
c010243d:       68 84 00 00 00          push   $0x84
  jmp __alltraps
c0102442:       e9 c4 05 00 00          jmp    c0102a0b <__alltraps>

c0102447 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102447:       6a 00                   push   $0x0
  pushl $133
c0102449:       68 85 00 00 00          push   $0x85
  jmp __alltraps
c010244e:       e9 b8 05 00 00          jmp    c0102a0b <__alltraps>

c0102453 <vector134>:
.globl vector134
vector134:
  pushl $0
c0102453:       6a 00                   push   $0x0
  pushl $134
c0102455:       68 86 00 00 00          push   $0x86
  jmp __alltraps
c010245a:       e9 ac 05 00 00          jmp    c0102a0b <__alltraps>

c010245f <vector135>:
.globl vector135
vector135:
  pushl $0
c010245f:       6a 00                   push   $0x0
  pushl $135
c0102461:       68 87 00 00 00          push   $0x87
  jmp __alltraps
c0102466:       e9 a0 05 00 00          jmp    c0102a0b <__alltraps>

c010246b <vector136>:
.globl vector136
vector136:
  pushl $0
c010246b:       6a 00                   push   $0x0
  pushl $136
c010246d:       68 88 00 00 00          push   $0x88
  jmp __alltraps
c0102472:       e9 94 05 00 00          jmp    c0102a0b <__alltraps>

c0102477 <vector137>:
.globl vector137
vector137:
  pushl $0
c0102477:       6a 00                   push   $0x0
  pushl $137
c0102479:       68 89 00 00 00          push   $0x89
  jmp __alltraps
c010247e:       e9 88 05 00 00          jmp    c0102a0b <__alltraps>

c0102483 <vector138>:
.globl vector138
vector138:
  pushl $0
c0102483:       6a 00                   push   $0x0
  pushl $138
c0102485:       68 8a 00 00 00          push   $0x8a
  jmp __alltraps
c010248a:       e9 7c 05 00 00          jmp    c0102a0b <__alltraps>

c010248f <vector139>:
.globl vector139
vector139:
  pushl $0
c010248f:       6a 00                   push   $0x0
  pushl $139
c0102491:       68 8b 00 00 00          push   $0x8b
  jmp __alltraps
c0102496:       e9 70 05 00 00          jmp    c0102a0b <__alltraps>

c010249b <vector140>:
.globl vector140
vector140:
  pushl $0
c010249b:       6a 00                   push   $0x0
  pushl $140
c010249d:       68 8c 00 00 00          push   $0x8c
  jmp __alltraps
c01024a2:       e9 64 05 00 00          jmp    c0102a0b <__alltraps>

c01024a7 <vector141>:
.globl vector141
vector141:
  pushl $0
c01024a7:       6a 00                   push   $0x0
  pushl $141
c01024a9:       68 8d 00 00 00          push   $0x8d
  jmp __alltraps
c01024ae:       e9 58 05 00 00          jmp    c0102a0b <__alltraps>

c01024b3 <vector142>:
.globl vector142
vector142:
  pushl $0
c01024b3:       6a 00                   push   $0x0
  pushl $142
c01024b5:       68 8e 00 00 00          push   $0x8e
  jmp __alltraps
c01024ba:       e9 4c 05 00 00          jmp    c0102a0b <__alltraps>

c01024bf <vector143>:
.globl vector143
vector143:
  pushl $0
c01024bf:       6a 00                   push   $0x0
  pushl $143
c01024c1:       68 8f 00 00 00          push   $0x8f
  jmp __alltraps
c01024c6:       e9 40 05 00 00          jmp    c0102a0b <__alltraps>

c01024cb <vector144>:
.globl vector144
vector144:
  pushl $0
c01024cb:       6a 00                   push   $0x0
  pushl $144
c01024cd:       68 90 00 00 00          push   $0x90
  jmp __alltraps
c01024d2:       e9 34 05 00 00          jmp    c0102a0b <__alltraps>

c01024d7 <vector145>:
.globl vector145
vector145:
  pushl $0
c01024d7:       6a 00                   push   $0x0
  pushl $145
c01024d9:       68 91 00 00 00          push   $0x91
  jmp __alltraps
c01024de:       e9 28 05 00 00          jmp    c0102a0b <__alltraps>

c01024e3 <vector146>:
.globl vector146
vector146:
  pushl $0
c01024e3:       6a 00                   push   $0x0
  pushl $146
c01024e5:       68 92 00 00 00          push   $0x92
  jmp __alltraps
c01024ea:       e9 1c 05 00 00          jmp    c0102a0b <__alltraps>

c01024ef <vector147>:
.globl vector147
vector147:
  pushl $0
c01024ef:       6a 00                   push   $0x0
  pushl $147
c01024f1:       68 93 00 00 00          push   $0x93
  jmp __alltraps
c01024f6:       e9 10 05 00 00          jmp    c0102a0b <__alltraps>

c01024fb <vector148>:
.globl vector148
vector148:
  pushl $0
c01024fb:       6a 00                   push   $0x0
  pushl $148
c01024fd:       68 94 00 00 00          push   $0x94
  jmp __alltraps
c0102502:       e9 04 05 00 00          jmp    c0102a0b <__alltraps>

c0102507 <vector149>:
.globl vector149
vector149:
  pushl $0
c0102507:       6a 00                   push   $0x0
  pushl $149
c0102509:       68 95 00 00 00          push   $0x95
  jmp __alltraps
c010250e:       e9 f8 04 00 00          jmp    c0102a0b <__alltraps>

c0102513 <vector150>:
.globl vector150
vector150:
  pushl $0
c0102513:       6a 00                   push   $0x0
  pushl $150
c0102515:       68 96 00 00 00          push   $0x96
  jmp __alltraps
c010251a:       e9 ec 04 00 00          jmp    c0102a0b <__alltraps>

c010251f <vector151>:
.globl vector151
vector151:
  pushl $0
c010251f:       6a 00                   push   $0x0
  pushl $151
c0102521:       68 97 00 00 00          push   $0x97
  jmp __alltraps
c0102526:       e9 e0 04 00 00          jmp    c0102a0b <__alltraps>

c010252b <vector152>:
.globl vector152
vector152:
  pushl $0
c010252b:       6a 00                   push   $0x0
  pushl $152
c010252d:       68 98 00 00 00          push   $0x98
  jmp __alltraps
c0102532:       e9 d4 04 00 00          jmp    c0102a0b <__alltraps>

c0102537 <vector153>:
.globl vector153
vector153:
  pushl $0
c0102537:       6a 00                   push   $0x0
  pushl $153
c0102539:       68 99 00 00 00          push   $0x99
  jmp __alltraps
c010253e:       e9 c8 04 00 00          jmp    c0102a0b <__alltraps>

c0102543 <vector154>:
.globl vector154
vector154:
  pushl $0
c0102543:       6a 00                   push   $0x0
  pushl $154
c0102545:       68 9a 00 00 00          push   $0x9a
  jmp __alltraps
c010254a:       e9 bc 04 00 00          jmp    c0102a0b <__alltraps>

c010254f <vector155>:
.globl vector155
vector155:
  pushl $0
c010254f:       6a 00                   push   $0x0
  pushl $155
c0102551:       68 9b 00 00 00          push   $0x9b
  jmp __alltraps
c0102556:       e9 b0 04 00 00          jmp    c0102a0b <__alltraps>

c010255b <vector156>:
.globl vector156
vector156:
  pushl $0
c010255b:       6a 00                   push   $0x0
  pushl $156
c010255d:       68 9c 00 00 00          push   $0x9c
  jmp __alltraps
c0102562:       e9 a4 04 00 00          jmp    c0102a0b <__alltraps>

c0102567 <vector157>:
.globl vector157
vector157:
  pushl $0
c0102567:       6a 00                   push   $0x0
  pushl $157
c0102569:       68 9d 00 00 00          push   $0x9d
  jmp __alltraps
c010256e:       e9 98 04 00 00          jmp    c0102a0b <__alltraps>

c0102573 <vector158>:
.globl vector158
vector158:
  pushl $0
c0102573:       6a 00                   push   $0x0
  pushl $158
c0102575:       68 9e 00 00 00          push   $0x9e
  jmp __alltraps
c010257a:       e9 8c 04 00 00          jmp    c0102a0b <__alltraps>

c010257f <vector159>:
.globl vector159
vector159:
  pushl $0
c010257f:       6a 00                   push   $0x0
  pushl $159
c0102581:       68 9f 00 00 00          push   $0x9f
  jmp __alltraps
c0102586:       e9 80 04 00 00          jmp    c0102a0b <__alltraps>

c010258b <vector160>:
.globl vector160
vector160:
  pushl $0
c010258b:       6a 00                   push   $0x0
  pushl $160
c010258d:       68 a0 00 00 00          push   $0xa0
  jmp __alltraps
c0102592:       e9 74 04 00 00          jmp    c0102a0b <__alltraps>

c0102597 <vector161>:
.globl vector161
vector161:
  pushl $0
c0102597:       6a 00                   push   $0x0
  pushl $161
c0102599:       68 a1 00 00 00          push   $0xa1
  jmp __alltraps
c010259e:       e9 68 04 00 00          jmp    c0102a0b <__alltraps>

c01025a3 <vector162>:
.globl vector162
vector162:
  pushl $0
c01025a3:       6a 00                   push   $0x0
  pushl $162
c01025a5:       68 a2 00 00 00          push   $0xa2
  jmp __alltraps
c01025aa:       e9 5c 04 00 00          jmp    c0102a0b <__alltraps>

c01025af <vector163>:
.globl vector163
vector163:
  pushl $0
c01025af:       6a 00                   push   $0x0
  pushl $163
c01025b1:       68 a3 00 00 00          push   $0xa3
  jmp __alltraps
c01025b6:       e9 50 04 00 00          jmp    c0102a0b <__alltraps>

c01025bb <vector164>:
.globl vector164
vector164:
  pushl $0
c01025bb:       6a 00                   push   $0x0
  pushl $164
c01025bd:       68 a4 00 00 00          push   $0xa4
  jmp __alltraps
c01025c2:       e9 44 04 00 00          jmp    c0102a0b <__alltraps>

c01025c7 <vector165>:
.globl vector165
vector165:
  pushl $0
c01025c7:       6a 00                   push   $0x0
  pushl $165
c01025c9:       68 a5 00 00 00          push   $0xa5
  jmp __alltraps
c01025ce:       e9 38 04 00 00          jmp    c0102a0b <__alltraps>

c01025d3 <vector166>:
.globl vector166
vector166:
  pushl $0
c01025d3:       6a 00                   push   $0x0
  pushl $166
c01025d5:       68 a6 00 00 00          push   $0xa6
  jmp __alltraps
c01025da:       e9 2c 04 00 00          jmp    c0102a0b <__alltraps>

c01025df <vector167>:
.globl vector167
vector167:
  pushl $0
c01025df:       6a 00                   push   $0x0
  pushl $167
c01025e1:       68 a7 00 00 00          push   $0xa7
  jmp __alltraps
c01025e6:       e9 20 04 00 00          jmp    c0102a0b <__alltraps>

c01025eb <vector168>:
.globl vector168
vector168:
  pushl $0
c01025eb:       6a 00                   push   $0x0
  pushl $168
c01025ed:       68 a8 00 00 00          push   $0xa8
  jmp __alltraps
c01025f2:       e9 14 04 00 00          jmp    c0102a0b <__alltraps>

c01025f7 <vector169>:
.globl vector169
vector169:
  pushl $0
c01025f7:       6a 00                   push   $0x0
  pushl $169
c01025f9:       68 a9 00 00 00          push   $0xa9
  jmp __alltraps
c01025fe:       e9 08 04 00 00          jmp    c0102a0b <__alltraps>

c0102603 <vector170>:
.globl vector170
vector170:
  pushl $0
c0102603:       6a 00                   push   $0x0
  pushl $170
c0102605:       68 aa 00 00 00          push   $0xaa
  jmp __alltraps
c010260a:       e9 fc 03 00 00          jmp    c0102a0b <__alltraps>

c010260f <vector171>:
.globl vector171
vector171:
  pushl $0
c010260f:       6a 00                   push   $0x0
  pushl $171
c0102611:       68 ab 00 00 00          push   $0xab
  jmp __alltraps
c0102616:       e9 f0 03 00 00          jmp    c0102a0b <__alltraps>

c010261b <vector172>:
.globl vector172
vector172:
  pushl $0
c010261b:       6a 00                   push   $0x0
  pushl $172
c010261d:       68 ac 00 00 00          push   $0xac
  jmp __alltraps
c0102622:       e9 e4 03 00 00          jmp    c0102a0b <__alltraps>

c0102627 <vector173>:
.globl vector173
vector173:
  pushl $0
c0102627:       6a 00                   push   $0x0
  pushl $173
c0102629:       68 ad 00 00 00          push   $0xad
  jmp __alltraps
c010262e:       e9 d8 03 00 00          jmp    c0102a0b <__alltraps>

c0102633 <vector174>:
.globl vector174
vector174:
  pushl $0
c0102633:       6a 00                   push   $0x0
  pushl $174
c0102635:       68 ae 00 00 00          push   $0xae
  jmp __alltraps
c010263a:       e9 cc 03 00 00          jmp    c0102a0b <__alltraps>

c010263f <vector175>:
.globl vector175
vector175:
  pushl $0
c010263f:       6a 00                   push   $0x0
  pushl $175
c0102641:       68 af 00 00 00          push   $0xaf
  jmp __alltraps
c0102646:       e9 c0 03 00 00          jmp    c0102a0b <__alltraps>

c010264b <vector176>:
.globl vector176
vector176:
  pushl $0
c010264b:       6a 00                   push   $0x0
  pushl $176
c010264d:       68 b0 00 00 00          push   $0xb0
  jmp __alltraps
c0102652:       e9 b4 03 00 00          jmp    c0102a0b <__alltraps>

c0102657 <vector177>:
.globl vector177
vector177:
  pushl $0
c0102657:       6a 00                   push   $0x0
  pushl $177
c0102659:       68 b1 00 00 00          push   $0xb1
  jmp __alltraps
c010265e:       e9 a8 03 00 00          jmp    c0102a0b <__alltraps>

c0102663 <vector178>:
.globl vector178
vector178:
  pushl $0
c0102663:       6a 00                   push   $0x0
  pushl $178
c0102665:       68 b2 00 00 00          push   $0xb2
  jmp __alltraps
c010266a:       e9 9c 03 00 00          jmp    c0102a0b <__alltraps>

c010266f <vector179>:
.globl vector179
vector179:
  pushl $0
c010266f:       6a 00                   push   $0x0
  pushl $179
c0102671:       68 b3 00 00 00          push   $0xb3
  jmp __alltraps
c0102676:       e9 90 03 00 00          jmp    c0102a0b <__alltraps>

c010267b <vector180>:
.globl vector180
vector180:
  pushl $0
c010267b:       6a 00                   push   $0x0
  pushl $180
c010267d:       68 b4 00 00 00          push   $0xb4
  jmp __alltraps
c0102682:       e9 84 03 00 00          jmp    c0102a0b <__alltraps>

c0102687 <vector181>:
.globl vector181
vector181:
  pushl $0
c0102687:       6a 00                   push   $0x0
  pushl $181
c0102689:       68 b5 00 00 00          push   $0xb5
  jmp __alltraps
c010268e:       e9 78 03 00 00          jmp    c0102a0b <__alltraps>

c0102693 <vector182>:
.globl vector182
vector182:
  pushl $0
c0102693:       6a 00                   push   $0x0
  pushl $182
c0102695:       68 b6 00 00 00          push   $0xb6
  jmp __alltraps
c010269a:       e9 6c 03 00 00          jmp    c0102a0b <__alltraps>

c010269f <vector183>:
.globl vector183
vector183:
  pushl $0
c010269f:       6a 00                   push   $0x0
  pushl $183
c01026a1:       68 b7 00 00 00          push   $0xb7
  jmp __alltraps
c01026a6:       e9 60 03 00 00          jmp    c0102a0b <__alltraps>

c01026ab <vector184>:
.globl vector184
vector184:
  pushl $0
c01026ab:       6a 00                   push   $0x0
  pushl $184
c01026ad:       68 b8 00 00 00          push   $0xb8
  jmp __alltraps
c01026b2:       e9 54 03 00 00          jmp    c0102a0b <__alltraps>

c01026b7 <vector185>:
.globl vector185
vector185:
  pushl $0
c01026b7:       6a 00                   push   $0x0
  pushl $185
c01026b9:       68 b9 00 00 00          push   $0xb9
  jmp __alltraps
c01026be:       e9 48 03 00 00          jmp    c0102a0b <__alltraps>

c01026c3 <vector186>:
.globl vector186
vector186:
  pushl $0
c01026c3:       6a 00                   push   $0x0
  pushl $186
c01026c5:       68 ba 00 00 00          push   $0xba
  jmp __alltraps
c01026ca:       e9 3c 03 00 00          jmp    c0102a0b <__alltraps>

c01026cf <vector187>:
.globl vector187
vector187:
  pushl $0
c01026cf:       6a 00                   push   $0x0
  pushl $187
c01026d1:       68 bb 00 00 00          push   $0xbb
  jmp __alltraps
c01026d6:       e9 30 03 00 00          jmp    c0102a0b <__alltraps>

c01026db <vector188>:
.globl vector188
vector188:
  pushl $0
c01026db:       6a 00                   push   $0x0
  pushl $188
c01026dd:       68 bc 00 00 00          push   $0xbc
  jmp __alltraps
c01026e2:       e9 24 03 00 00          jmp    c0102a0b <__alltraps>

c01026e7 <vector189>:
.globl vector189
vector189:
  pushl $0
c01026e7:       6a 00                   push   $0x0
  pushl $189
c01026e9:       68 bd 00 00 00          push   $0xbd
  jmp __alltraps
c01026ee:       e9 18 03 00 00          jmp    c0102a0b <__alltraps>

c01026f3 <vector190>:
.globl vector190
vector190:
  pushl $0
c01026f3:       6a 00                   push   $0x0
  pushl $190
c01026f5:       68 be 00 00 00          push   $0xbe
  jmp __alltraps
c01026fa:       e9 0c 03 00 00          jmp    c0102a0b <__alltraps>

c01026ff <vector191>:
.globl vector191
vector191:
  pushl $0
c01026ff:       6a 00                   push   $0x0
  pushl $191
c0102701:       68 bf 00 00 00          push   $0xbf
  jmp __alltraps
c0102706:       e9 00 03 00 00          jmp    c0102a0b <__alltraps>

c010270b <vector192>:
.globl vector192
vector192:
  pushl $0
c010270b:       6a 00                   push   $0x0
  pushl $192
c010270d:       68 c0 00 00 00          push   $0xc0
  jmp __alltraps
c0102712:       e9 f4 02 00 00          jmp    c0102a0b <__alltraps>

c0102717 <vector193>:
.globl vector193
vector193:
  pushl $0
c0102717:       6a 00                   push   $0x0
  pushl $193
c0102719:       68 c1 00 00 00          push   $0xc1
  jmp __alltraps
c010271e:       e9 e8 02 00 00          jmp    c0102a0b <__alltraps>

c0102723 <vector194>:
.globl vector194
vector194:
  pushl $0
c0102723:       6a 00                   push   $0x0
  pushl $194
c0102725:       68 c2 00 00 00          push   $0xc2
  jmp __alltraps
c010272a:       e9 dc 02 00 00          jmp    c0102a0b <__alltraps>

c010272f <vector195>:
.globl vector195
vector195:
  pushl $0
c010272f:       6a 00                   push   $0x0
  pushl $195
c0102731:       68 c3 00 00 00          push   $0xc3
  jmp __alltraps
c0102736:       e9 d0 02 00 00          jmp    c0102a0b <__alltraps>

c010273b <vector196>:
.globl vector196
vector196:
  pushl $0
c010273b:       6a 00                   push   $0x0
  pushl $196
c010273d:       68 c4 00 00 00          push   $0xc4
  jmp __alltraps
c0102742:       e9 c4 02 00 00          jmp    c0102a0b <__alltraps>

c0102747 <vector197>:
.globl vector197
vector197:
  pushl $0
c0102747:       6a 00                   push   $0x0
  pushl $197
c0102749:       68 c5 00 00 00          push   $0xc5
  jmp __alltraps
c010274e:       e9 b8 02 00 00          jmp    c0102a0b <__alltraps>

c0102753 <vector198>:
.globl vector198
vector198:
  pushl $0
c0102753:       6a 00                   push   $0x0
  pushl $198
c0102755:       68 c6 00 00 00          push   $0xc6
  jmp __alltraps
c010275a:       e9 ac 02 00 00          jmp    c0102a0b <__alltraps>

c010275f <vector199>:
.globl vector199
vector199:
  pushl $0
c010275f:       6a 00                   push   $0x0
  pushl $199
c0102761:       68 c7 00 00 00          push   $0xc7
  jmp __alltraps
c0102766:       e9 a0 02 00 00          jmp    c0102a0b <__alltraps>

c010276b <vector200>:
.globl vector200
vector200:
  pushl $0
c010276b:       6a 00                   push   $0x0
  pushl $200
c010276d:       68 c8 00 00 00          push   $0xc8
  jmp __alltraps
c0102772:       e9 94 02 00 00          jmp    c0102a0b <__alltraps>

c0102777 <vector201>:
.globl vector201
vector201:
  pushl $0
c0102777:       6a 00                   push   $0x0
  pushl $201
c0102779:       68 c9 00 00 00          push   $0xc9
  jmp __alltraps
c010277e:       e9 88 02 00 00          jmp    c0102a0b <__alltraps>

c0102783 <vector202>:
.globl vector202
vector202:
  pushl $0
c0102783:       6a 00                   push   $0x0
  pushl $202
c0102785:       68 ca 00 00 00          push   $0xca
  jmp __alltraps
c010278a:       e9 7c 02 00 00          jmp    c0102a0b <__alltraps>

c010278f <vector203>:
.globl vector203
vector203:
  pushl $0
c010278f:       6a 00                   push   $0x0
  pushl $203
c0102791:       68 cb 00 00 00          push   $0xcb
  jmp __alltraps
c0102796:       e9 70 02 00 00          jmp    c0102a0b <__alltraps>

c010279b <vector204>:
.globl vector204
vector204:
  pushl $0
c010279b:       6a 00                   push   $0x0
  pushl $204
c010279d:       68 cc 00 00 00          push   $0xcc
  jmp __alltraps
c01027a2:       e9 64 02 00 00          jmp    c0102a0b <__alltraps>

c01027a7 <vector205>:
.globl vector205
vector205:
  pushl $0
c01027a7:       6a 00                   push   $0x0
  pushl $205
c01027a9:       68 cd 00 00 00          push   $0xcd
  jmp __alltraps
c01027ae:       e9 58 02 00 00          jmp    c0102a0b <__alltraps>

c01027b3 <vector206>:
.globl vector206
vector206:
  pushl $0
c01027b3:       6a 00                   push   $0x0
  pushl $206
c01027b5:       68 ce 00 00 00          push   $0xce
  jmp __alltraps
c01027ba:       e9 4c 02 00 00          jmp    c0102a0b <__alltraps>

c01027bf <vector207>:
.globl vector207
vector207:
  pushl $0
c01027bf:       6a 00                   push   $0x0
  pushl $207
c01027c1:       68 cf 00 00 00          push   $0xcf
  jmp __alltraps
c01027c6:       e9 40 02 00 00          jmp    c0102a0b <__alltraps>

c01027cb <vector208>:
.globl vector208
vector208:
  pushl $0
c01027cb:       6a 00                   push   $0x0
  pushl $208
c01027cd:       68 d0 00 00 00          push   $0xd0
  jmp __alltraps
c01027d2:       e9 34 02 00 00          jmp    c0102a0b <__alltraps>

c01027d7 <vector209>:
.globl vector209
vector209:
  pushl $0
c01027d7:       6a 00                   push   $0x0
  pushl $209
c01027d9:       68 d1 00 00 00          push   $0xd1
  jmp __alltraps
c01027de:       e9 28 02 00 00          jmp    c0102a0b <__alltraps>

c01027e3 <vector210>:
.globl vector210
vector210:
  pushl $0
c01027e3:       6a 00                   push   $0x0
  pushl $210
c01027e5:       68 d2 00 00 00          push   $0xd2
  jmp __alltraps
c01027ea:       e9 1c 02 00 00          jmp    c0102a0b <__alltraps>

c01027ef <vector211>:
.globl vector211
vector211:
  pushl $0
c01027ef:       6a 00                   push   $0x0
  pushl $211
c01027f1:       68 d3 00 00 00          push   $0xd3
  jmp __alltraps
c01027f6:       e9 10 02 00 00          jmp    c0102a0b <__alltraps>

c01027fb <vector212>:
.globl vector212
vector212:
  pushl $0
c01027fb:       6a 00                   push   $0x0
  pushl $212
c01027fd:       68 d4 00 00 00          push   $0xd4
  jmp __alltraps
c0102802:       e9 04 02 00 00          jmp    c0102a0b <__alltraps>

c0102807 <vector213>:
.globl vector213
vector213:
  pushl $0
c0102807:       6a 00                   push   $0x0
  pushl $213
c0102809:       68 d5 00 00 00          push   $0xd5
  jmp __alltraps
c010280e:       e9 f8 01 00 00          jmp    c0102a0b <__alltraps>

c0102813 <vector214>:
.globl vector214
vector214:
  pushl $0
c0102813:       6a 00                   push   $0x0
  pushl $214
c0102815:       68 d6 00 00 00          push   $0xd6
  jmp __alltraps
c010281a:       e9 ec 01 00 00          jmp    c0102a0b <__alltraps>

c010281f <vector215>:
.globl vector215
vector215:
  pushl $0
c010281f:       6a 00                   push   $0x0
  pushl $215
c0102821:       68 d7 00 00 00          push   $0xd7
  jmp __alltraps
c0102826:       e9 e0 01 00 00          jmp    c0102a0b <__alltraps>

c010282b <vector216>:
.globl vector216
vector216:
  pushl $0
c010282b:       6a 00                   push   $0x0
  pushl $216
c010282d:       68 d8 00 00 00          push   $0xd8
  jmp __alltraps
c0102832:       e9 d4 01 00 00          jmp    c0102a0b <__alltraps>

c0102837 <vector217>:
.globl vector217
vector217:
  pushl $0
c0102837:       6a 00                   push   $0x0
  pushl $217
c0102839:       68 d9 00 00 00          push   $0xd9
  jmp __alltraps
c010283e:       e9 c8 01 00 00          jmp    c0102a0b <__alltraps>

c0102843 <vector218>:
.globl vector218
vector218:
  pushl $0
c0102843:       6a 00                   push   $0x0
  pushl $218
c0102845:       68 da 00 00 00          push   $0xda
  jmp __alltraps
c010284a:       e9 bc 01 00 00          jmp    c0102a0b <__alltraps>

c010284f <vector219>:
.globl vector219
vector219:
  pushl $0
c010284f:       6a 00                   push   $0x0
  pushl $219
c0102851:       68 db 00 00 00          push   $0xdb
  jmp __alltraps
c0102856:       e9 b0 01 00 00          jmp    c0102a0b <__alltraps>

c010285b <vector220>:
.globl vector220
vector220:
  pushl $0
c010285b:       6a 00                   push   $0x0
  pushl $220
c010285d:       68 dc 00 00 00          push   $0xdc
  jmp __alltraps
c0102862:       e9 a4 01 00 00          jmp    c0102a0b <__alltraps>

c0102867 <vector221>:
.globl vector221
vector221:
  pushl $0
c0102867:       6a 00                   push   $0x0
  pushl $221
c0102869:       68 dd 00 00 00          push   $0xdd
  jmp __alltraps
c010286e:       e9 98 01 00 00          jmp    c0102a0b <__alltraps>

c0102873 <vector222>:
.globl vector222
vector222:
  pushl $0
c0102873:       6a 00                   push   $0x0
  pushl $222
c0102875:       68 de 00 00 00          push   $0xde
  jmp __alltraps
c010287a:       e9 8c 01 00 00          jmp    c0102a0b <__alltraps>

c010287f <vector223>:
.globl vector223
vector223:
  pushl $0
c010287f:       6a 00                   push   $0x0
  pushl $223
c0102881:       68 df 00 00 00          push   $0xdf
  jmp __alltraps
c0102886:       e9 80 01 00 00          jmp    c0102a0b <__alltraps>

c010288b <vector224>:
.globl vector224
vector224:
  pushl $0
c010288b:       6a 00                   push   $0x0
  pushl $224
c010288d:       68 e0 00 00 00          push   $0xe0
  jmp __alltraps
c0102892:       e9 74 01 00 00          jmp    c0102a0b <__alltraps>

c0102897 <vector225>:
.globl vector225
vector225:
  pushl $0
c0102897:       6a 00                   push   $0x0
  pushl $225
c0102899:       68 e1 00 00 00          push   $0xe1
  jmp __alltraps
c010289e:       e9 68 01 00 00          jmp    c0102a0b <__alltraps>

c01028a3 <vector226>:
.globl vector226
vector226:
  pushl $0
c01028a3:       6a 00                   push   $0x0
  pushl $226
c01028a5:       68 e2 00 00 00          push   $0xe2
  jmp __alltraps
c01028aa:       e9 5c 01 00 00          jmp    c0102a0b <__alltraps>

c01028af <vector227>:
.globl vector227
vector227:
  pushl $0
c01028af:       6a 00                   push   $0x0
  pushl $227
c01028b1:       68 e3 00 00 00          push   $0xe3
  jmp __alltraps
c01028b6:       e9 50 01 00 00          jmp    c0102a0b <__alltraps>

c01028bb <vector228>:
.globl vector228
vector228:
  pushl $0
c01028bb:       6a 00                   push   $0x0
  pushl $228
c01028bd:       68 e4 00 00 00          push   $0xe4
  jmp __alltraps
c01028c2:       e9 44 01 00 00          jmp    c0102a0b <__alltraps>

c01028c7 <vector229>:
.globl vector229
vector229:
  pushl $0
c01028c7:       6a 00                   push   $0x0
  pushl $229
c01028c9:       68 e5 00 00 00          push   $0xe5
  jmp __alltraps
c01028ce:       e9 38 01 00 00          jmp    c0102a0b <__alltraps>

c01028d3 <vector230>:
.globl vector230
vector230:
  pushl $0
c01028d3:       6a 00                   push   $0x0
  pushl $230
c01028d5:       68 e6 00 00 00          push   $0xe6
  jmp __alltraps
c01028da:       e9 2c 01 00 00          jmp    c0102a0b <__alltraps>

c01028df <vector231>:
.globl vector231
vector231:
  pushl $0
c01028df:       6a 00                   push   $0x0
  pushl $231
c01028e1:       68 e7 00 00 00          push   $0xe7
  jmp __alltraps
c01028e6:       e9 20 01 00 00          jmp    c0102a0b <__alltraps>

c01028eb <vector232>:
.globl vector232
vector232:
  pushl $0
c01028eb:       6a 00                   push   $0x0
  pushl $232
c01028ed:       68 e8 00 00 00          push   $0xe8
  jmp __alltraps
c01028f2:       e9 14 01 00 00          jmp    c0102a0b <__alltraps>

c01028f7 <vector233>:
.globl vector233
vector233:
  pushl $0
c01028f7:       6a 00                   push   $0x0
  pushl $233
c01028f9:       68 e9 00 00 00          push   $0xe9
  jmp __alltraps
c01028fe:       e9 08 01 00 00          jmp    c0102a0b <__alltraps>

c0102903 <vector234>:
.globl vector234
vector234:
  pushl $0
c0102903:       6a 00                   push   $0x0
  pushl $234
c0102905:       68 ea 00 00 00          push   $0xea
  jmp __alltraps
c010290a:       e9 fc 00 00 00          jmp    c0102a0b <__alltraps>

c010290f <vector235>:
.globl vector235
vector235:
  pushl $0
c010290f:       6a 00                   push   $0x0
  pushl $235
c0102911:       68 eb 00 00 00          push   $0xeb
  jmp __alltraps
c0102916:       e9 f0 00 00 00          jmp    c0102a0b <__alltraps>

c010291b <vector236>:
.globl vector236
vector236:
  pushl $0
c010291b:       6a 00                   push   $0x0
  pushl $236
c010291d:       68 ec 00 00 00          push   $0xec
  jmp __alltraps
c0102922:       e9 e4 00 00 00          jmp    c0102a0b <__alltraps>

c0102927 <vector237>:
.globl vector237
vector237:
  pushl $0
c0102927:       6a 00                   push   $0x0
  pushl $237
c0102929:       68 ed 00 00 00          push   $0xed
  jmp __alltraps
c010292e:       e9 d8 00 00 00          jmp    c0102a0b <__alltraps>

c0102933 <vector238>:
.globl vector238
vector238:
  pushl $0
c0102933:       6a 00                   push   $0x0
  pushl $238
c0102935:       68 ee 00 00 00          push   $0xee
  jmp __alltraps
c010293a:       e9 cc 00 00 00          jmp    c0102a0b <__alltraps>

c010293f <vector239>:
.globl vector239
vector239:
  pushl $0
c010293f:       6a 00                   push   $0x0
  pushl $239
c0102941:       68 ef 00 00 00          push   $0xef
  jmp __alltraps
c0102946:       e9 c0 00 00 00          jmp    c0102a0b <__alltraps>

c010294b <vector240>:
.globl vector240
vector240:
  pushl $0
c010294b:       6a 00                   push   $0x0
  pushl $240
c010294d:       68 f0 00 00 00          push   $0xf0
  jmp __alltraps
c0102952:       e9 b4 00 00 00          jmp    c0102a0b <__alltraps>

c0102957 <vector241>:
.globl vector241
vector241:
  pushl $0
c0102957:       6a 00                   push   $0x0
  pushl $241
c0102959:       68 f1 00 00 00          push   $0xf1
  jmp __alltraps
c010295e:       e9 a8 00 00 00          jmp    c0102a0b <__alltraps>

c0102963 <vector242>:
.globl vector242
vector242:
  pushl $0
c0102963:       6a 00                   push   $0x0
  pushl $242
c0102965:       68 f2 00 00 00          push   $0xf2
  jmp __alltraps
c010296a:       e9 9c 00 00 00          jmp    c0102a0b <__alltraps>

c010296f <vector243>:
.globl vector243
vector243:
  pushl $0
c010296f:       6a 00                   push   $0x0
  pushl $243
c0102971:       68 f3 00 00 00          push   $0xf3
  jmp __alltraps
c0102976:       e9 90 00 00 00          jmp    c0102a0b <__alltraps>

c010297b <vector244>:
.globl vector244
vector244:
  pushl $0
c010297b:       6a 00                   push   $0x0
  pushl $244
c010297d:       68 f4 00 00 00          push   $0xf4
  jmp __alltraps
c0102982:       e9 84 00 00 00          jmp    c0102a0b <__alltraps>

c0102987 <vector245>:
.globl vector245
vector245:
  pushl $0
c0102987:       6a 00                   push   $0x0
  pushl $245
c0102989:       68 f5 00 00 00          push   $0xf5
  jmp __alltraps
c010298e:       e9 78 00 00 00          jmp    c0102a0b <__alltraps>

c0102993 <vector246>:
.globl vector246
vector246:
  pushl $0
c0102993:       6a 00                   push   $0x0
  pushl $246
c0102995:       68 f6 00 00 00          push   $0xf6
  jmp __alltraps
c010299a:       e9 6c 00 00 00          jmp    c0102a0b <__alltraps>

c010299f <vector247>:
.globl vector247
vector247:
  pushl $0
c010299f:       6a 00                   push   $0x0
  pushl $247
c01029a1:       68 f7 00 00 00          push   $0xf7
  jmp __alltraps
c01029a6:       e9 60 00 00 00          jmp    c0102a0b <__alltraps>

c01029ab <vector248>:
.globl vector248
vector248:
  pushl $0
c01029ab:       6a 00                   push   $0x0
  pushl $248
c01029ad:       68 f8 00 00 00          push   $0xf8
  jmp __alltraps
c01029b2:       e9 54 00 00 00          jmp    c0102a0b <__alltraps>

c01029b7 <vector249>:
.globl vector249
vector249:
  pushl $0
c01029b7:       6a 00                   push   $0x0
  pushl $249
c01029b9:       68 f9 00 00 00          push   $0xf9
  jmp __alltraps
c01029be:       e9 48 00 00 00          jmp    c0102a0b <__alltraps>

c01029c3 <vector250>:
.globl vector250
vector250:
  pushl $0
c01029c3:       6a 00                   push   $0x0
  pushl $250
c01029c5:       68 fa 00 00 00          push   $0xfa
  jmp __alltraps
c01029ca:       e9 3c 00 00 00          jmp    c0102a0b <__alltraps>

c01029cf <vector251>:
.globl vector251
vector251:
  pushl $0
c01029cf:       6a 00                   push   $0x0
  pushl $251
c01029d1:       68 fb 00 00 00          push   $0xfb
  jmp __alltraps
c01029d6:       e9 30 00 00 00          jmp    c0102a0b <__alltraps>

c01029db <vector252>:
.globl vector252
vector252:
  pushl $0
c01029db:       6a 00                   push   $0x0
  pushl $252
c01029dd:       68 fc 00 00 00          push   $0xfc
  jmp __alltraps
c01029e2:       e9 24 00 00 00          jmp    c0102a0b <__alltraps>

c01029e7 <vector253>:
.globl vector253
vector253:
  pushl $0
c01029e7:       6a 00                   push   $0x0
  pushl $253
c01029e9:       68 fd 00 00 00          push   $0xfd
  jmp __alltraps
c01029ee:       e9 18 00 00 00          jmp    c0102a0b <__alltraps>

c01029f3 <vector254>:
.globl vector254
vector254:
  pushl $0
c01029f3:       6a 00                   push   $0x0
  pushl $254
c01029f5:       68 fe 00 00 00          push   $0xfe
  jmp __alltraps
c01029fa:       e9 0c 00 00 00          jmp    c0102a0b <__alltraps>

c01029ff <vector255>:
.globl vector255
vector255:
  pushl $0
c01029ff:       6a 00                   push   $0x0
  pushl $255
c0102a01:       68 ff 00 00 00          push   $0xff
  jmp __alltraps
c0102a06:       e9 00 00 00 00          jmp    c0102a0b <__alltraps>

c0102a0b <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102a0b:       1e                      push   %ds
    pushl %es
c0102a0c:       06                      push   %es
    pushl %fs
c0102a0d:       0f a0                   push   %fs
    pushl %gs
c0102a0f:       0f a8                   push   %gs

    # pushl, popl       - push/pop long
    # pushal, popal     - push/pop * order : EAX - ECX - EDX - EBX - ESP - EBP - ESI - EDI
    pushal
c0102a11:       60                      pusha

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102a12:       b8 10 00 00 00          mov    $0x10,%eax
    movw %ax, %ds
c0102a17:       8e d8                   mov    %eax,%ds
    movw %ax, %es
c0102a19:       8e c0                   mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102a1b:       54                      push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102a1c:       e8 67 f5 ff ff          call   c0101f88 <trap>

    # pop the pushed stack pointer
    popl %esp
c0102a21:       5c                      pop    %esp

c0102a22 <__trapret>:
.globl __trapret
__trapret:
    # restore registers from stack
    # pushl, popl       - push/pop long
    # pushal, popal     - push/pop * order : EAX - ECX - EDX - EBX - ESP - EBP - ESI - EDI
    popal
c0102a22:       61                      popa

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102a23:       0f a9                   pop    %gs
    popl %fs
c0102a25:       0f a1                   pop    %fs
    popl %es
c0102a27:       07                      pop    %es
    popl %ds
c0102a28:       1f                      pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102a29:       83 c4 08                add    $0x8,%esp
    iret
c0102a2c:       cf                      iret

c0102a2d <page2ppn>:
extern size_t npage;

// pages: virtual address of physicall page array
// page - pages相当于pages数组的索引值
static inline ppn_t
page2ppn(struct Page *page) {
c0102a2d:       55                      push   %ebp
c0102a2e:       89 e5                   mov    %esp,%ebp
    return page - pages;
c0102a30:       8b 55 08                mov    0x8(%ebp),%edx
c0102a33:       a1 b8 c9 10 c0          mov    0xc010c9b8,%eax
c0102a38:       29 c2                   sub    %eax,%edx
c0102a3a:       89 d0                   mov    %edx,%eax
c0102a3c:       c1 f8 02                sar    $0x2,%eax
c0102a3f:       69 c0 cd cc cc cc       imul   $0xcccccccd,%eax,%eax
}
c0102a45:       5d                      pop    %ebp
c0102a46:       c3                      ret

c0102a47 <page2pa>:

// pages: virtual address of physicall page array
// page - pages相当于pages数组的索引值
// 得到相对pages数组起始地址的偏移量，再左移12位，也就是变成page table的索引值
static inline uintptr_t
page2pa(struct Page *page) {
c0102a47:       55                      push   %ebp
c0102a48:       89 e5                   mov    %esp,%ebp
c0102a4a:       83 ec 04                sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0102a4d:       8b 45 08                mov    0x8(%ebp),%eax
c0102a50:       89 04 24                mov    %eax,(%esp)
c0102a53:       e8 d5 ff ff ff          call   c0102a2d <page2ppn>
c0102a58:       c1 e0 0c                shl    $0xc,%eax
}
c0102a5b:       c9                      leave
c0102a5c:       c3                      ret

c0102a5d <pa2page>:
// page number field of address
// #define PPN(la) (((uintptr_t)(la)) >> PTXSHIFT)
// PTXSHIFT = 12
//
static inline struct Page *
pa2page(uintptr_t pa) {
c0102a5d:       55                      push   %ebp
c0102a5e:       89 e5                   mov    %esp,%ebp
c0102a60:       83 ec 18                sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0102a63:       8b 45 08                mov    0x8(%ebp),%eax
c0102a66:       c1 e8 0c                shr    $0xc,%eax
c0102a69:       89 c2                   mov    %eax,%edx
c0102a6b:       a1 c0 c8 10 c0          mov    0xc010c8c0,%eax
c0102a70:       39 c2                   cmp    %eax,%edx
c0102a72:       72 1c                   jb     c0102a90 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0102a74:       c7 44 24 08 10 75 10    movl   $0xc0107510,0x8(%esp)
c0102a7b:       c0
c0102a7c:       c7 44 24 04 6c 00 00    movl   $0x6c,0x4(%esp)
c0102a83:       00
c0102a84:       c7 04 24 2f 75 10 c0    movl   $0xc010752f,(%esp)
c0102a8b:       e8 ad d9 ff ff          call   c010043d <__panic>
    }
    return &pages[PPN(pa)];
c0102a90:       8b 0d b8 c9 10 c0       mov    0xc010c9b8,%ecx
c0102a96:       8b 45 08                mov    0x8(%ebp),%eax
c0102a99:       c1 e8 0c                shr    $0xc,%eax
c0102a9c:       89 c2                   mov    %eax,%edx
c0102a9e:       89 d0                   mov    %edx,%eax
c0102aa0:       c1 e0 02                shl    $0x2,%eax
c0102aa3:       01 d0                   add    %edx,%eax
c0102aa5:       c1 e0 02                shl    $0x2,%eax
c0102aa8:       01 c8                   add    %ecx,%eax
}
c0102aaa:       c9                      leave
c0102aab:       c3                      ret

c0102aac <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0102aac:       55                      push   %ebp
c0102aad:       89 e5                   mov    %esp,%ebp
c0102aaf:       83 ec 28                sub    $0x28,%esp
    return KADDR(page2pa(page));
c0102ab2:       8b 45 08                mov    0x8(%ebp),%eax
c0102ab5:       89 04 24                mov    %eax,(%esp)
c0102ab8:       e8 8a ff ff ff          call   c0102a47 <page2pa>
c0102abd:       89 45 f4                mov    %eax,-0xc(%ebp)
c0102ac0:       8b 45 f4                mov    -0xc(%ebp),%eax
c0102ac3:       c1 e8 0c                shr    $0xc,%eax
c0102ac6:       89 45 f0                mov    %eax,-0x10(%ebp)
c0102ac9:       a1 c0 c8 10 c0          mov    0xc010c8c0,%eax
c0102ace:       39 45 f0                cmp    %eax,-0x10(%ebp)
c0102ad1:       72 23                   jb     c0102af6 <page2kva+0x4a>
c0102ad3:       8b 45 f4                mov    -0xc(%ebp),%eax
c0102ad6:       89 44 24 0c             mov    %eax,0xc(%esp)
c0102ada:       c7 44 24 08 40 75 10    movl   $0xc0107540,0x8(%esp)
c0102ae1:       c0
c0102ae2:       c7 44 24 04 73 00 00    movl   $0x73,0x4(%esp)
c0102ae9:       00
c0102aea:       c7 04 24 2f 75 10 c0    movl   $0xc010752f,(%esp)
c0102af1:       e8 47 d9 ff ff          call   c010043d <__panic>
c0102af6:       8b 45 f4                mov    -0xc(%ebp),%eax
c0102af9:       2d 00 00 00 40          sub    $0x40000000,%eax
}
c0102afe:       c9                      leave
c0102aff:       c3                      ret

c0102b00 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0102b00:       55                      push   %ebp
c0102b01:       89 e5                   mov    %esp,%ebp
c0102b03:       83 ec 18                sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0102b06:       8b 45 08                mov    0x8(%ebp),%eax
c0102b09:       83 e0 01                and    $0x1,%eax
c0102b0c:       85 c0                   test   %eax,%eax
c0102b0e:       75 1c                   jne    c0102b2c <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0102b10:       c7 44 24 08 64 75 10    movl   $0xc0107564,0x8(%esp)
c0102b17:       c0
c0102b18:       c7 44 24 04 7e 00 00    movl   $0x7e,0x4(%esp)
c0102b1f:       00
c0102b20:       c7 04 24 2f 75 10 c0    movl   $0xc010752f,(%esp)
c0102b27:       e8 11 d9 ff ff          call   c010043d <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0102b2c:       8b 45 08                mov    0x8(%ebp),%eax
c0102b2f:       25 00 f0 ff ff          and    $0xfffff000,%eax
c0102b34:       89 04 24                mov    %eax,(%esp)
c0102b37:       e8 21 ff ff ff          call   c0102a5d <pa2page>
}
c0102b3c:       c9                      leave
c0102b3d:       c3                      ret

c0102b3e <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0102b3e:       55                      push   %ebp
c0102b3f:       89 e5                   mov    %esp,%ebp
c0102b41:       83 ec 18                sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0102b44:       8b 45 08                mov    0x8(%ebp),%eax
c0102b47:       25 00 f0 ff ff          and    $0xfffff000,%eax
c0102b4c:       89 04 24                mov    %eax,(%esp)
c0102b4f:       e8 09 ff ff ff          call   c0102a5d <pa2page>
}
c0102b54:       c9                      leave
c0102b55:       c3                      ret

c0102b56 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0102b56:       55                      push   %ebp
c0102b57:       89 e5                   mov    %esp,%ebp
    return page->ref;
c0102b59:       8b 45 08                mov    0x8(%ebp),%eax
c0102b5c:       8b 00                   mov    (%eax),%eax
}
c0102b5e:       5d                      pop    %ebp
c0102b5f:       c3                      ret

c0102b60 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0102b60:       55                      push   %ebp
c0102b61:       89 e5                   mov    %esp,%ebp
    page->ref = val;
c0102b63:       8b 45 08                mov    0x8(%ebp),%eax
c0102b66:       8b 55 0c                mov    0xc(%ebp),%edx
c0102b69:       89 10                   mov    %edx,(%eax)
}
c0102b6b:       5d                      pop    %ebp
c0102b6c:       c3                      ret

c0102b6d <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0102b6d:       55                      push   %ebp
c0102b6e:       89 e5                   mov    %esp,%ebp
    page->ref += 1;
c0102b70:       8b 45 08                mov    0x8(%ebp),%eax
c0102b73:       8b 00                   mov    (%eax),%eax
c0102b75:       8d 50 01                lea    0x1(%eax),%edx
c0102b78:       8b 45 08                mov    0x8(%ebp),%eax
c0102b7b:       89 10                   mov    %edx,(%eax)
    return page->ref;
c0102b7d:       8b 45 08                mov    0x8(%ebp),%eax
c0102b80:       8b 00                   mov    (%eax),%eax
}
c0102b82:       5d                      pop    %ebp
c0102b83:       c3                      ret

c0102b84 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0102b84:       55                      push   %ebp
c0102b85:       89 e5                   mov    %esp,%ebp
    page->ref -= 1;
c0102b87:       8b 45 08                mov    0x8(%ebp),%eax
c0102b8a:       8b 00                   mov    (%eax),%eax
c0102b8c:       8d 50 ff                lea    -0x1(%eax),%edx
c0102b8f:       8b 45 08                mov    0x8(%ebp),%eax
c0102b92:       89 10                   mov    %edx,(%eax)
    return page->ref;
c0102b94:       8b 45 08                mov    0x8(%ebp),%eax
c0102b97:       8b 00                   mov    (%eax),%eax
}
c0102b99:       5d                      pop    %ebp
c0102b9a:       c3                      ret

c0102b9b <__intr_save>:
#include <x86.h>
#include <intr.h>
#include <mmu.h>

static inline bool
__intr_save(void) {
c0102b9b:       55                      push   %ebp
c0102b9c:       89 e5                   mov    %esp,%ebp
c0102b9e:       83 ec 18                sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0102ba1:       9c                      pushf
c0102ba2:       58                      pop    %eax
c0102ba3:       89 45 f4                mov    %eax,-0xc(%ebp)
    return eflags;
c0102ba6:       8b 45 f4                mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0102ba9:       25 00 02 00 00          and    $0x200,%eax
c0102bae:       85 c0                   test   %eax,%eax
c0102bb0:       74 0c                   je     c0102bbe <__intr_save+0x23>
        intr_disable();
c0102bb2:       e8 18 ed ff ff          call   c01018cf <intr_disable>
        return 1;
c0102bb7:       b8 01 00 00 00          mov    $0x1,%eax
c0102bbc:       eb 05                   jmp    c0102bc3 <__intr_save+0x28>
    }
    return 0;
c0102bbe:       b8 00 00 00 00          mov    $0x0,%eax
}
c0102bc3:       c9                      leave
c0102bc4:       c3                      ret

c0102bc5 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0102bc5:       55                      push   %ebp
c0102bc6:       89 e5                   mov    %esp,%ebp
c0102bc8:       83 ec 08                sub    $0x8,%esp
    if (flag) {
c0102bcb:       83 7d 08 00             cmpl   $0x0,0x8(%ebp)
c0102bcf:       74 05                   je     c0102bd6 <__intr_restore+0x11>
        intr_enable();
c0102bd1:       e8 f3 ec ff ff          call   c01018c9 <intr_enable>
    }
}
c0102bd6:       c9                      leave
c0102bd7:       c3                      ret

c0102bd8 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0102bd8:       55                      push   %ebp
c0102bd9:       89 e5                   mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0102bdb:       8b 45 08                mov    0x8(%ebp),%eax
c0102bde:       0f 01 10                lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0102be1:       b8 23 00 00 00          mov    $0x23,%eax
c0102be6:       8e e8                   mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0102be8:       b8 23 00 00 00          mov    $0x23,%eax
c0102bed:       8e e0                   mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0102bef:       b8 10 00 00 00          mov    $0x10,%eax
c0102bf4:       8e c0                   mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0102bf6:       b8 10 00 00 00          mov    $0x10,%eax
c0102bfb:       8e d8                   mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0102bfd:       b8 10 00 00 00          mov    $0x10,%eax
c0102c02:       8e d0                   mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0102c04:       ea 0b 2c 10 c0 08 00    ljmp   $0x8,$0xc0102c0b
}
c0102c0b:       5d                      pop    %ebp
c0102c0c:       c3                      ret

c0102c0d <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0102c0d:       55                      push   %ebp
c0102c0e:       89 e5                   mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0102c10:       8b 45 08                mov    0x8(%ebp),%eax
c0102c13:       a3 e4 c8 10 c0          mov    %eax,0xc010c8e4
}
c0102c18:       5d                      pop    %ebp
c0102c19:       c3                      ret

c0102c1a <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0102c1a:       55                      push   %ebp
c0102c1b:       89 e5                   mov    %esp,%ebp
c0102c1d:       83 ec 14                sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0102c20:       b8 00 b0 10 c0          mov    $0xc010b000,%eax
c0102c25:       89 04 24                mov    %eax,(%esp)
c0102c28:       e8 e0 ff ff ff          call   c0102c0d <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0102c2d:       66 c7 05 e8 c8 10 c0    movw   $0x10,0xc010c8e8
c0102c34:       10 00

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0102c36:       66 c7 05 28 ba 10 c0    movw   $0x68,0xc010ba28
c0102c3d:       68 00
c0102c3f:       b8 e0 c8 10 c0          mov    $0xc010c8e0,%eax
c0102c44:       66 a3 2a ba 10 c0       mov    %ax,0xc010ba2a
c0102c4a:       b8 e0 c8 10 c0          mov    $0xc010c8e0,%eax
c0102c4f:       c1 e8 10                shr    $0x10,%eax
c0102c52:       a2 2c ba 10 c0          mov    %al,0xc010ba2c
c0102c57:       0f b6 05 2d ba 10 c0    movzbl 0xc010ba2d,%eax
c0102c5e:       83 e0 f0                and    $0xfffffff0,%eax
c0102c61:       83 c8 09                or     $0x9,%eax
c0102c64:       a2 2d ba 10 c0          mov    %al,0xc010ba2d
c0102c69:       0f b6 05 2d ba 10 c0    movzbl 0xc010ba2d,%eax
c0102c70:       83 e0 ef                and    $0xffffffef,%eax
c0102c73:       a2 2d ba 10 c0          mov    %al,0xc010ba2d
c0102c78:       0f b6 05 2d ba 10 c0    movzbl 0xc010ba2d,%eax
c0102c7f:       83 e0 9f                and    $0xffffff9f,%eax
c0102c82:       a2 2d ba 10 c0          mov    %al,0xc010ba2d
c0102c87:       0f b6 05 2d ba 10 c0    movzbl 0xc010ba2d,%eax
c0102c8e:       83 c8 80                or     $0xffffff80,%eax
c0102c91:       a2 2d ba 10 c0          mov    %al,0xc010ba2d
c0102c96:       0f b6 05 2e ba 10 c0    movzbl 0xc010ba2e,%eax
c0102c9d:       83 e0 f0                and    $0xfffffff0,%eax
c0102ca0:       a2 2e ba 10 c0          mov    %al,0xc010ba2e
c0102ca5:       0f b6 05 2e ba 10 c0    movzbl 0xc010ba2e,%eax
c0102cac:       83 e0 ef                and    $0xffffffef,%eax
c0102caf:       a2 2e ba 10 c0          mov    %al,0xc010ba2e
c0102cb4:       0f b6 05 2e ba 10 c0    movzbl 0xc010ba2e,%eax
c0102cbb:       83 e0 df                and    $0xffffffdf,%eax
c0102cbe:       a2 2e ba 10 c0          mov    %al,0xc010ba2e
c0102cc3:       0f b6 05 2e ba 10 c0    movzbl 0xc010ba2e,%eax
c0102cca:       83 c8 40                or     $0x40,%eax
c0102ccd:       a2 2e ba 10 c0          mov    %al,0xc010ba2e
c0102cd2:       0f b6 05 2e ba 10 c0    movzbl 0xc010ba2e,%eax
c0102cd9:       83 e0 7f                and    $0x7f,%eax
c0102cdc:       a2 2e ba 10 c0          mov    %al,0xc010ba2e
c0102ce1:       b8 e0 c8 10 c0          mov    $0xc010c8e0,%eax
c0102ce6:       c1 e8 18                shr    $0x18,%eax
c0102ce9:       a2 2f ba 10 c0          mov    %al,0xc010ba2f

    // reload all segment registers
    lgdt(&gdt_pd);
c0102cee:       c7 04 24 30 ba 10 c0    movl   $0xc010ba30,(%esp)
c0102cf5:       e8 de fe ff ff          call   c0102bd8 <lgdt>
c0102cfa:       66 c7 45 fe 28 00       movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0102d00:       0f b7 45 fe             movzwl -0x2(%ebp),%eax
c0102d04:       0f 00 d8                ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0102d07:       c9                      leave
c0102d08:       c3                      ret

c0102d09 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0102d09:       55                      push   %ebp
c0102d0a:       89 e5                   mov    %esp,%ebp
c0102d0c:       83 ec 18                sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c0102d0f:       c7 05 b0 c9 10 c0 08    movl   $0xc0107f08,0xc010c9b0
c0102d16:       7f 10 c0
    cprintf("memory management: %s\n", pmm_manager->name);
c0102d19:       a1 b0 c9 10 c0          mov    0xc010c9b0,%eax
c0102d1e:       8b 00                   mov    (%eax),%eax
c0102d20:       89 44 24 04             mov    %eax,0x4(%esp)
c0102d24:       c7 04 24 90 75 10 c0    movl   $0xc0107590,(%esp)
c0102d2b:       e8 b6 d5 ff ff          call   c01002e6 <cprintf>
    pmm_manager->init();
c0102d30:       a1 b0 c9 10 c0          mov    0xc010c9b0,%eax
c0102d35:       8b 40 04                mov    0x4(%eax),%eax
c0102d38:       ff d0                   call   *%eax
}
c0102d3a:       c9                      leave
c0102d3b:       c3                      ret

c0102d3c <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory
static void
init_memmap(struct Page *base, size_t n) {
c0102d3c:       55                      push   %ebp
c0102d3d:       89 e5                   mov    %esp,%ebp
c0102d3f:       83 ec 18                sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0102d42:       a1 b0 c9 10 c0          mov    0xc010c9b0,%eax
c0102d47:       8b 40 08                mov    0x8(%eax),%eax
c0102d4a:       8b 55 0c                mov    0xc(%ebp),%edx
c0102d4d:       89 54 24 04             mov    %edx,0x4(%esp)
c0102d51:       8b 55 08                mov    0x8(%ebp),%edx
c0102d54:       89 14 24                mov    %edx,(%esp)
c0102d57:       ff d0                   call   *%eax
}
c0102d59:       c9                      leave
c0102d5a:       c3                      ret

c0102d5b <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory
struct Page *
alloc_pages(size_t n) {
c0102d5b:       55                      push   %ebp
c0102d5c:       89 e5                   mov    %esp,%ebp
c0102d5e:       83 ec 28                sub    $0x28,%esp
    struct Page *page=NULL;
c0102d61:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0102d68:       e8 2e fe ff ff          call   c0102b9b <__intr_save>
c0102d6d:       89 45 f0                mov    %eax,-0x10(%ebp)
    {
        page = pmm_manager->alloc_pages(n);
c0102d70:       a1 b0 c9 10 c0          mov    0xc010c9b0,%eax
c0102d75:       8b 40 0c                mov    0xc(%eax),%eax
c0102d78:       8b 55 08                mov    0x8(%ebp),%edx
c0102d7b:       89 14 24                mov    %edx,(%esp)
c0102d7e:       ff d0                   call   *%eax
c0102d80:       89 45 f4                mov    %eax,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0102d83:       8b 45 f0                mov    -0x10(%ebp),%eax
c0102d86:       89 04 24                mov    %eax,(%esp)
c0102d89:       e8 37 fe ff ff          call   c0102bc5 <__intr_restore>
    return page;
c0102d8e:       8b 45 f4                mov    -0xc(%ebp),%eax
}
c0102d91:       c9                      leave
c0102d92:       c3                      ret

c0102d93 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory
void
free_pages(struct Page *base, size_t n) {
c0102d93:       55                      push   %ebp
c0102d94:       89 e5                   mov    %esp,%ebp
c0102d96:       83 ec 28                sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0102d99:       e8 fd fd ff ff          call   c0102b9b <__intr_save>
c0102d9e:       89 45 f4                mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0102da1:       a1 b0 c9 10 c0          mov    0xc010c9b0,%eax
c0102da6:       8b 40 10                mov    0x10(%eax),%eax
c0102da9:       8b 55 0c                mov    0xc(%ebp),%edx
c0102dac:       89 54 24 04             mov    %edx,0x4(%esp)
c0102db0:       8b 55 08                mov    0x8(%ebp),%edx
c0102db3:       89 14 24                mov    %edx,(%esp)
c0102db6:       ff d0                   call   *%eax
    }
    local_intr_restore(intr_flag);
c0102db8:       8b 45 f4                mov    -0xc(%ebp),%eax
c0102dbb:       89 04 24                mov    %eax,(%esp)
c0102dbe:       e8 02 fe ff ff          call   c0102bc5 <__intr_restore>
}
c0102dc3:       c9                      leave
c0102dc4:       c3                      ret

c0102dc5 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE)
//of current free memory
size_t
nr_free_pages(void) {
c0102dc5:       55                      push   %ebp
c0102dc6:       89 e5                   mov    %esp,%ebp
c0102dc8:       83 ec 28                sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0102dcb:       e8 cb fd ff ff          call   c0102b9b <__intr_save>
c0102dd0:       89 45 f4                mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0102dd3:       a1 b0 c9 10 c0          mov    0xc010c9b0,%eax
c0102dd8:       8b 40 14                mov    0x14(%eax),%eax
c0102ddb:       ff d0                   call   *%eax
c0102ddd:       89 45 f0                mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0102de0:       8b 45 f4                mov    -0xc(%ebp),%eax
c0102de3:       89 04 24                mov    %eax,(%esp)
c0102de6:       e8 da fd ff ff          call   c0102bc5 <__intr_restore>
    return ret;
c0102deb:       8b 45 f0                mov    -0x10(%ebp),%eax
}
c0102dee:       c9                      leave
c0102def:       c3                      ret

c0102df0 <page_init>:

// 初始化物理内存
/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0102df0:       55                      push   %ebp
c0102df1:       89 e5                   mov    %esp,%ebp
c0102df3:       57                      push   %edi
c0102df4:       56                      push   %esi
c0102df5:       53                      push   %ebx
c0102df6:       81 ec 9c 00 00 00       sub    $0x9c,%esp
    // KERNBASE = 0xC0000000
    // 在建立了临时的地址映射机制后，原0x8000相当于0x8000 + 0xC0000000
    // 所以要从0x8000 + 0xC0000000开始来找e820map的数据
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0102dfc:       c7 45 c4 00 80 00 c0    movl   $0xc0008000,-0x3c(%ebp)
    // 最大物理内存
    uint64_t maxpa = 0;
c0102e03:       c7 45 e0 00 00 00 00    movl   $0x0,-0x20(%ebp)
c0102e0a:       c7 45 e4 00 00 00 00    movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0102e11:       c7 04 24 a7 75 10 c0    movl   $0xc01075a7,(%esp)
c0102e18:       e8 c9 d4 ff ff          call   c01002e6 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0102e1d:       c7 45 dc 00 00 00 00    movl   $0x0,-0x24(%ebp)
c0102e24:       e9 15 01 00 00          jmp    c0102f3e <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0102e29:       8b 4d c4                mov    -0x3c(%ebp),%ecx
c0102e2c:       8b 55 dc                mov    -0x24(%ebp),%edx
c0102e2f:       89 d0                   mov    %edx,%eax
c0102e31:       c1 e0 02                shl    $0x2,%eax
c0102e34:       01 d0                   add    %edx,%eax
c0102e36:       c1 e0 02                shl    $0x2,%eax
c0102e39:       01 c8                   add    %ecx,%eax
c0102e3b:       8b 50 08                mov    0x8(%eax),%edx
c0102e3e:       8b 40 04                mov    0x4(%eax),%eax
c0102e41:       89 45 b8                mov    %eax,-0x48(%ebp)
c0102e44:       89 55 bc                mov    %edx,-0x44(%ebp)
c0102e47:       8b 4d c4                mov    -0x3c(%ebp),%ecx
c0102e4a:       8b 55 dc                mov    -0x24(%ebp),%edx
c0102e4d:       89 d0                   mov    %edx,%eax
c0102e4f:       c1 e0 02                shl    $0x2,%eax
c0102e52:       01 d0                   add    %edx,%eax
c0102e54:       c1 e0 02                shl    $0x2,%eax
c0102e57:       01 c8                   add    %ecx,%eax
c0102e59:       8b 48 0c                mov    0xc(%eax),%ecx
c0102e5c:       8b 58 10                mov    0x10(%eax),%ebx
c0102e5f:       8b 45 b8                mov    -0x48(%ebp),%eax
c0102e62:       8b 55 bc                mov    -0x44(%ebp),%edx
c0102e65:       01 c8                   add    %ecx,%eax
c0102e67:       11 da                   adc    %ebx,%edx
c0102e69:       89 45 b0                mov    %eax,-0x50(%ebp)
c0102e6c:       89 55 b4                mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0102e6f:       8b 4d c4                mov    -0x3c(%ebp),%ecx
c0102e72:       8b 55 dc                mov    -0x24(%ebp),%edx
c0102e75:       89 d0                   mov    %edx,%eax
c0102e77:       c1 e0 02                shl    $0x2,%eax
c0102e7a:       01 d0                   add    %edx,%eax
c0102e7c:       c1 e0 02                shl    $0x2,%eax
c0102e7f:       01 c8                   add    %ecx,%eax
c0102e81:       83 c0 14                add    $0x14,%eax
c0102e84:       8b 00                   mov    (%eax),%eax
c0102e86:       89 85 7c ff ff ff       mov    %eax,-0x84(%ebp)
c0102e8c:       8b 45 b0                mov    -0x50(%ebp),%eax
c0102e8f:       8b 55 b4                mov    -0x4c(%ebp),%edx
c0102e92:       83 c0 ff                add    $0xffffffff,%eax
c0102e95:       83 d2 ff                adc    $0xffffffff,%edx
c0102e98:       89 c6                   mov    %eax,%esi
c0102e9a:       89 d7                   mov    %edx,%edi
c0102e9c:       8b 4d c4                mov    -0x3c(%ebp),%ecx
c0102e9f:       8b 55 dc                mov    -0x24(%ebp),%edx
c0102ea2:       89 d0                   mov    %edx,%eax
c0102ea4:       c1 e0 02                shl    $0x2,%eax
c0102ea7:       01 d0                   add    %edx,%eax
c0102ea9:       c1 e0 02                shl    $0x2,%eax
c0102eac:       01 c8                   add    %ecx,%eax
c0102eae:       8b 48 0c                mov    0xc(%eax),%ecx
c0102eb1:       8b 58 10                mov    0x10(%eax),%ebx
c0102eb4:       8b 85 7c ff ff ff       mov    -0x84(%ebp),%eax
c0102eba:       89 44 24 1c             mov    %eax,0x1c(%esp)
c0102ebe:       89 74 24 14             mov    %esi,0x14(%esp)
c0102ec2:       89 7c 24 18             mov    %edi,0x18(%esp)
c0102ec6:       8b 45 b8                mov    -0x48(%ebp),%eax
c0102ec9:       8b 55 bc                mov    -0x44(%ebp),%edx
c0102ecc:       89 44 24 0c             mov    %eax,0xc(%esp)
c0102ed0:       89 54 24 10             mov    %edx,0x10(%esp)
c0102ed4:       89 4c 24 04             mov    %ecx,0x4(%esp)
c0102ed8:       89 5c 24 08             mov    %ebx,0x8(%esp)
c0102edc:       c7 04 24 b4 75 10 c0    movl   $0xc01075b4,(%esp)
c0102ee3:       e8 fe d3 ff ff          call   c01002e6 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0102ee8:       8b 4d c4                mov    -0x3c(%ebp),%ecx
c0102eeb:       8b 55 dc                mov    -0x24(%ebp),%edx
c0102eee:       89 d0                   mov    %edx,%eax
c0102ef0:       c1 e0 02                shl    $0x2,%eax
c0102ef3:       01 d0                   add    %edx,%eax
c0102ef5:       c1 e0 02                shl    $0x2,%eax
c0102ef8:       01 c8                   add    %ecx,%eax
c0102efa:       83 c0 14                add    $0x14,%eax
c0102efd:       8b 00                   mov    (%eax),%eax
c0102eff:       83 f8 01                cmp    $0x1,%eax
c0102f02:       75 36                   jne    c0102f3a <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c0102f04:       8b 45 e0                mov    -0x20(%ebp),%eax
c0102f07:       8b 55 e4                mov    -0x1c(%ebp),%edx
c0102f0a:       3b 55 b4                cmp    -0x4c(%ebp),%edx
c0102f0d:       77 2b                   ja     c0102f3a <page_init+0x14a>
c0102f0f:       3b 55 b4                cmp    -0x4c(%ebp),%edx
c0102f12:       72 05                   jb     c0102f19 <page_init+0x129>
c0102f14:       3b 45 b0                cmp    -0x50(%ebp),%eax
c0102f17:       73 21                   jae    c0102f3a <page_init+0x14a>
c0102f19:       83 7d bc 00             cmpl   $0x0,-0x44(%ebp)
c0102f1d:       77 1b                   ja     c0102f3a <page_init+0x14a>
c0102f1f:       83 7d bc 00             cmpl   $0x0,-0x44(%ebp)
c0102f23:       72 09                   jb     c0102f2e <page_init+0x13e>
c0102f25:       81 7d b8 ff ff ff 37    cmpl   $0x37ffffff,-0x48(%ebp)
c0102f2c:       77 0c                   ja     c0102f3a <page_init+0x14a>
                maxpa = end;
c0102f2e:       8b 45 b0                mov    -0x50(%ebp),%eax
c0102f31:       8b 55 b4                mov    -0x4c(%ebp),%edx
c0102f34:       89 45 e0                mov    %eax,-0x20(%ebp)
c0102f37:       89 55 e4                mov    %edx,-0x1c(%ebp)
    // 最大物理内存
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0102f3a:       83 45 dc 01             addl   $0x1,-0x24(%ebp)
c0102f3e:       8b 45 c4                mov    -0x3c(%ebp),%eax
c0102f41:       8b 00                   mov    (%eax),%eax
c0102f43:       3b 45 dc                cmp    -0x24(%ebp),%eax
c0102f46:       0f 8f dd fe ff ff       jg     c0102e29 <page_init+0x39>
                maxpa = end;
            }
        }
    }
    // 通过KMEMSIZE限制最大内存为896M
    if (maxpa > KMEMSIZE) {
c0102f4c:       83 7d e4 00             cmpl   $0x0,-0x1c(%ebp)
c0102f50:       72 1d                   jb     c0102f6f <page_init+0x17f>
c0102f52:       83 7d e4 00             cmpl   $0x0,-0x1c(%ebp)
c0102f56:       77 09                   ja     c0102f61 <page_init+0x171>
c0102f58:       81 7d e0 00 00 00 38    cmpl   $0x38000000,-0x20(%ebp)
c0102f5f:       76 0e                   jbe    c0102f6f <page_init+0x17f>
        maxpa = KMEMSIZE;
c0102f61:       c7 45 e0 00 00 00 38    movl   $0x38000000,-0x20(%ebp)
c0102f68:       c7 45 e4 00 00 00 00    movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0102f6f:       8b 45 e0                mov    -0x20(%ebp),%eax
c0102f72:       8b 55 e4                mov    -0x1c(%ebp),%edx
c0102f75:       0f ac d0 0c             shrd   $0xc,%edx,%eax
c0102f79:       c1 ea 0c                shr    $0xc,%edx
c0102f7c:       a3 c0 c8 10 c0          mov    %eax,0xc010c8c0
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0102f81:       c7 45 ac 00 10 00 00    movl   $0x1000,-0x54(%ebp)
c0102f88:       b8 e4 c9 10 c1          mov    $0xc110c9e4,%eax
c0102f8d:       8d 50 ff                lea    -0x1(%eax),%edx
c0102f90:       8b 45 ac                mov    -0x54(%ebp),%eax
c0102f93:       01 d0                   add    %edx,%eax
c0102f95:       89 45 a8                mov    %eax,-0x58(%ebp)
c0102f98:       8b 45 a8                mov    -0x58(%ebp),%eax
c0102f9b:       ba 00 00 00 00          mov    $0x0,%edx
c0102fa0:       f7 75 ac                divl   -0x54(%ebp)
c0102fa3:       89 d0                   mov    %edx,%eax
c0102fa5:       8b 55 a8                mov    -0x58(%ebp),%edx
c0102fa8:       29 c2                   sub    %eax,%edx
c0102faa:       89 d0                   mov    %edx,%eax
c0102fac:       a3 b8 c9 10 c0          mov    %eax,0xc010c9b8

    // 先把pages设置为reserved，后面再把type为E820_ARM（1）的设置为可用
    for (i = 0; i < npage; i ++) {
c0102fb1:       c7 45 dc 00 00 00 00    movl   $0x0,-0x24(%ebp)
c0102fb8:       eb 2f                   jmp    c0102fe9 <page_init+0x1f9>
        SetPageReserved(pages + i);
c0102fba:       8b 0d b8 c9 10 c0       mov    0xc010c9b8,%ecx
c0102fc0:       8b 55 dc                mov    -0x24(%ebp),%edx
c0102fc3:       89 d0                   mov    %edx,%eax
c0102fc5:       c1 e0 02                shl    $0x2,%eax
c0102fc8:       01 d0                   add    %edx,%eax
c0102fca:       c1 e0 02                shl    $0x2,%eax
c0102fcd:       01 c8                   add    %ecx,%eax
c0102fcf:       83 c0 04                add    $0x4,%eax
c0102fd2:       c7 45 90 00 00 00 00    movl   $0x0,-0x70(%ebp)
c0102fd9:       89 45 8c                mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0102fdc:       8b 45 8c                mov    -0x74(%ebp),%eax
c0102fdf:       8b 55 90                mov    -0x70(%ebp),%edx
c0102fe2:       0f ab 10                bts    %edx,(%eax)

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    // 先把pages设置为reserved，后面再把type为E820_ARM（1）的设置为可用
    for (i = 0; i < npage; i ++) {
c0102fe5:       83 45 dc 01             addl   $0x1,-0x24(%ebp)
c0102fe9:       8b 55 dc                mov    -0x24(%ebp),%edx
c0102fec:       a1 c0 c8 10 c0          mov    0xc010c8c0,%eax
c0102ff1:       39 c2                   cmp    %eax,%edx
c0102ff3:       72 c5                   jb     c0102fba <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    // 空闲地址的起始地址
    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0102ff5:       8b 15 c0 c8 10 c0       mov    0xc010c8c0,%edx
c0102ffb:       89 d0                   mov    %edx,%eax
c0102ffd:       c1 e0 02                shl    $0x2,%eax
c0103000:       01 d0                   add    %edx,%eax
c0103002:       c1 e0 02                shl    $0x2,%eax
c0103005:       89 c2                   mov    %eax,%edx
c0103007:       a1 b8 c9 10 c0          mov    0xc010c9b8,%eax
c010300c:       01 d0                   add    %edx,%eax
c010300e:       89 45 a4                mov    %eax,-0x5c(%ebp)
c0103011:       81 7d a4 ff ff ff bf    cmpl   $0xbfffffff,-0x5c(%ebp)
c0103018:       77 23                   ja     c010303d <page_init+0x24d>
c010301a:       8b 45 a4                mov    -0x5c(%ebp),%eax
c010301d:       89 44 24 0c             mov    %eax,0xc(%esp)
c0103021:       c7 44 24 08 e4 75 10    movl   $0xc01075e4,0x8(%esp)
c0103028:       c0
c0103029:       c7 44 24 04 f9 00 00    movl   $0xf9,0x4(%esp)
c0103030:       00
c0103031:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103038:       e8 00 d4 ff ff          call   c010043d <__panic>
c010303d:       8b 45 a4                mov    -0x5c(%ebp),%eax
c0103040:       05 00 00 00 40          add    $0x40000000,%eax
c0103045:       89 45 a0                mov    %eax,-0x60(%ebp)

    // 循环处理前面扫描出来的几块内容区域
    for (i = 0; i < memmap->nr_map; i ++) {
c0103048:       c7 45 dc 00 00 00 00    movl   $0x0,-0x24(%ebp)
c010304f:       e9 74 01 00 00          jmp    c01031c8 <page_init+0x3d8>
        // 内容区域的begin-->end
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0103054:       8b 4d c4                mov    -0x3c(%ebp),%ecx
c0103057:       8b 55 dc                mov    -0x24(%ebp),%edx
c010305a:       89 d0                   mov    %edx,%eax
c010305c:       c1 e0 02                shl    $0x2,%eax
c010305f:       01 d0                   add    %edx,%eax
c0103061:       c1 e0 02                shl    $0x2,%eax
c0103064:       01 c8                   add    %ecx,%eax
c0103066:       8b 50 08                mov    0x8(%eax),%edx
c0103069:       8b 40 04                mov    0x4(%eax),%eax
c010306c:       89 45 d0                mov    %eax,-0x30(%ebp)
c010306f:       89 55 d4                mov    %edx,-0x2c(%ebp)
c0103072:       8b 4d c4                mov    -0x3c(%ebp),%ecx
c0103075:       8b 55 dc                mov    -0x24(%ebp),%edx
c0103078:       89 d0                   mov    %edx,%eax
c010307a:       c1 e0 02                shl    $0x2,%eax
c010307d:       01 d0                   add    %edx,%eax
c010307f:       c1 e0 02                shl    $0x2,%eax
c0103082:       01 c8                   add    %ecx,%eax
c0103084:       8b 48 0c                mov    0xc(%eax),%ecx
c0103087:       8b 58 10                mov    0x10(%eax),%ebx
c010308a:       8b 45 d0                mov    -0x30(%ebp),%eax
c010308d:       8b 55 d4                mov    -0x2c(%ebp),%edx
c0103090:       01 c8                   add    %ecx,%eax
c0103092:       11 da                   adc    %ebx,%edx
c0103094:       89 45 c8                mov    %eax,-0x38(%ebp)
c0103097:       89 55 cc                mov    %edx,-0x34(%ebp)
        // 如果内存类型是E820_ARM（可用），比较
        if (memmap->map[i].type == E820_ARM) {
c010309a:       8b 4d c4                mov    -0x3c(%ebp),%ecx
c010309d:       8b 55 dc                mov    -0x24(%ebp),%edx
c01030a0:       89 d0                   mov    %edx,%eax
c01030a2:       c1 e0 02                shl    $0x2,%eax
c01030a5:       01 d0                   add    %edx,%eax
c01030a7:       c1 e0 02                shl    $0x2,%eax
c01030aa:       01 c8                   add    %ecx,%eax
c01030ac:       83 c0 14                add    $0x14,%eax
c01030af:       8b 00                   mov    (%eax),%eax
c01030b1:       83 f8 01                cmp    $0x1,%eax
c01030b4:       0f 85 0a 01 00 00       jne    c01031c4 <page_init+0x3d4>
            if (begin < freemem) {
c01030ba:       8b 45 a0                mov    -0x60(%ebp),%eax
c01030bd:       ba 00 00 00 00          mov    $0x0,%edx
c01030c2:       3b 55 d4                cmp    -0x2c(%ebp),%edx
c01030c5:       72 17                   jb     c01030de <page_init+0x2ee>
c01030c7:       3b 55 d4                cmp    -0x2c(%ebp),%edx
c01030ca:       77 05                   ja     c01030d1 <page_init+0x2e1>
c01030cc:       3b 45 d0                cmp    -0x30(%ebp),%eax
c01030cf:       76 0d                   jbe    c01030de <page_init+0x2ee>
                begin = freemem;
c01030d1:       8b 45 a0                mov    -0x60(%ebp),%eax
c01030d4:       89 45 d0                mov    %eax,-0x30(%ebp)
c01030d7:       c7 45 d4 00 00 00 00    movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01030de:       83 7d cc 00             cmpl   $0x0,-0x34(%ebp)
c01030e2:       72 1d                   jb     c0103101 <page_init+0x311>
c01030e4:       83 7d cc 00             cmpl   $0x0,-0x34(%ebp)
c01030e8:       77 09                   ja     c01030f3 <page_init+0x303>
c01030ea:       81 7d c8 00 00 00 38    cmpl   $0x38000000,-0x38(%ebp)
c01030f1:       76 0e                   jbe    c0103101 <page_init+0x311>
                end = KMEMSIZE;
c01030f3:       c7 45 c8 00 00 00 38    movl   $0x38000000,-0x38(%ebp)
c01030fa:       c7 45 cc 00 00 00 00    movl   $0x0,-0x34(%ebp)
            }

            // 对每一个扫出来的内存区域，通过 begin向上取整对齐，end向下取整对齐
            if (begin < end) {
c0103101:       8b 45 d0                mov    -0x30(%ebp),%eax
c0103104:       8b 55 d4                mov    -0x2c(%ebp),%edx
c0103107:       3b 55 cc                cmp    -0x34(%ebp),%edx
c010310a:       0f 87 b4 00 00 00       ja     c01031c4 <page_init+0x3d4>
c0103110:       3b 55 cc                cmp    -0x34(%ebp),%edx
c0103113:       72 09                   jb     c010311e <page_init+0x32e>
c0103115:       3b 45 c8                cmp    -0x38(%ebp),%eax
c0103118:       0f 83 a6 00 00 00       jae    c01031c4 <page_init+0x3d4>
                begin = ROUNDUP(begin, PGSIZE);
c010311e:       c7 45 9c 00 10 00 00    movl   $0x1000,-0x64(%ebp)
c0103125:       8b 55 d0                mov    -0x30(%ebp),%edx
c0103128:       8b 45 9c                mov    -0x64(%ebp),%eax
c010312b:       01 d0                   add    %edx,%eax
c010312d:       83 e8 01                sub    $0x1,%eax
c0103130:       89 45 98                mov    %eax,-0x68(%ebp)
c0103133:       8b 45 98                mov    -0x68(%ebp),%eax
c0103136:       ba 00 00 00 00          mov    $0x0,%edx
c010313b:       f7 75 9c                divl   -0x64(%ebp)
c010313e:       89 d0                   mov    %edx,%eax
c0103140:       8b 55 98                mov    -0x68(%ebp),%edx
c0103143:       29 c2                   sub    %eax,%edx
c0103145:       89 d0                   mov    %edx,%eax
c0103147:       ba 00 00 00 00          mov    $0x0,%edx
c010314c:       89 45 d0                mov    %eax,-0x30(%ebp)
c010314f:       89 55 d4                mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0103152:       8b 45 c8                mov    -0x38(%ebp),%eax
c0103155:       89 45 94                mov    %eax,-0x6c(%ebp)
c0103158:       8b 45 94                mov    -0x6c(%ebp),%eax
c010315b:       ba 00 00 00 00          mov    $0x0,%edx
c0103160:       89 c7                   mov    %eax,%edi
c0103162:       81 e7 00 f0 ff ff       and    $0xfffff000,%edi
c0103168:       89 7d 80                mov    %edi,-0x80(%ebp)
c010316b:       89 d0                   mov    %edx,%eax
c010316d:       83 e0 00                and    $0x0,%eax
c0103170:       89 45 84                mov    %eax,-0x7c(%ebp)
c0103173:       8b 45 80                mov    -0x80(%ebp),%eax
c0103176:       8b 55 84                mov    -0x7c(%ebp),%edx
c0103179:       89 45 c8                mov    %eax,-0x38(%ebp)
c010317c:       89 55 cc                mov    %edx,-0x34(%ebp)
                //     return &pages[PPN(pa)];
                // }
                // (begin >> 12)(根据起始地址得到的页数) 必需要小于 n ---->相当于是除以4K，因为2^12=4096=1page大小
                // &pages[PPN(pa)];  PPN(pa) 另一个角度来讲就是pages数组里的index
                // pa2page(begin) 通过这种方式，可以把一个physical address变成page
                if (begin < end) {
c010317f:       8b 45 d0                mov    -0x30(%ebp),%eax
c0103182:       8b 55 d4                mov    -0x2c(%ebp),%edx
c0103185:       3b 55 cc                cmp    -0x34(%ebp),%edx
c0103188:       77 3a                   ja     c01031c4 <page_init+0x3d4>
c010318a:       3b 55 cc                cmp    -0x34(%ebp),%edx
c010318d:       72 05                   jb     c0103194 <page_init+0x3a4>
c010318f:       3b 45 c8                cmp    -0x38(%ebp),%eax
c0103192:       73 30                   jae    c01031c4 <page_init+0x3d4>
                    // 接着开始初始化（memory map -> page）
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0103194:       8b 4d d0                mov    -0x30(%ebp),%ecx
c0103197:       8b 5d d4                mov    -0x2c(%ebp),%ebx
c010319a:       8b 45 c8                mov    -0x38(%ebp),%eax
c010319d:       8b 55 cc                mov    -0x34(%ebp),%edx
c01031a0:       29 c8                   sub    %ecx,%eax
c01031a2:       19 da                   sbb    %ebx,%edx
c01031a4:       0f ac d0 0c             shrd   $0xc,%edx,%eax
c01031a8:       c1 ea 0c                shr    $0xc,%edx
c01031ab:       89 c3                   mov    %eax,%ebx
c01031ad:       8b 45 d0                mov    -0x30(%ebp),%eax
c01031b0:       89 04 24                mov    %eax,(%esp)
c01031b3:       e8 a5 f8 ff ff          call   c0102a5d <pa2page>
c01031b8:       89 5c 24 04             mov    %ebx,0x4(%esp)
c01031bc:       89 04 24                mov    %eax,(%esp)
c01031bf:       e8 78 fb ff ff          call   c0102d3c <init_memmap>

    // 空闲地址的起始地址
    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    // 循环处理前面扫描出来的几块内容区域
    for (i = 0; i < memmap->nr_map; i ++) {
c01031c4:       83 45 dc 01             addl   $0x1,-0x24(%ebp)
c01031c8:       8b 45 c4                mov    -0x3c(%ebp),%eax
c01031cb:       8b 00                   mov    (%eax),%eax
c01031cd:       3b 45 dc                cmp    -0x24(%ebp),%eax
c01031d0:       0f 8f 7e fe ff ff       jg     c0103054 <page_init+0x264>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01031d6:       81 c4 9c 00 00 00       add    $0x9c,%esp
c01031dc:       5b                      pop    %ebx
c01031dd:       5e                      pop    %esi
c01031de:       5f                      pop    %edi
c01031df:       5d                      pop    %ebp
c01031e0:       c3                      ret

c01031e1 <enable_paging>:

static void
enable_paging(void) {
c01031e1:       55                      push   %ebp
c01031e2:       89 e5                   mov    %esp,%ebp
c01031e4:       83 ec 10                sub    $0x10,%esp
    lcr3(boot_cr3);
c01031e7:       a1 b4 c9 10 c0          mov    0xc010c9b4,%eax
c01031ec:       89 45 f8                mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01031ef:       8b 45 f8                mov    -0x8(%ebp),%eax
c01031f2:       0f 22 d8                mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c01031f5:       0f 20 c0                mov    %cr0,%eax
c01031f8:       89 45 f4                mov    %eax,-0xc(%ebp)
    return cr0;
c01031fb:       8b 45 f4                mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c01031fe:       89 45 fc                mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c0103201:       81 4d fc 2f 00 05 80    orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c0103208:       83 65 fc f3             andl   $0xfffffff3,-0x4(%ebp)
c010320c:       8b 45 fc                mov    -0x4(%ebp),%eax
c010320f:       89 45 f0                mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c0103212:       8b 45 f0                mov    -0x10(%ebp),%eax
c0103215:       0f 22 c0                mov    %eax,%cr0
    lcr0(cr0);
}
c0103218:       c9                      leave
c0103219:       c3                      ret

c010321a <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c010321a:       55                      push   %ebp
c010321b:       89 e5                   mov    %esp,%ebp
c010321d:       83 ec 38                sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0103220:       8b 45 14                mov    0x14(%ebp),%eax
c0103223:       8b 55 0c                mov    0xc(%ebp),%edx
c0103226:       31 d0                   xor    %edx,%eax
c0103228:       25 ff 0f 00 00          and    $0xfff,%eax
c010322d:       85 c0                   test   %eax,%eax
c010322f:       74 24                   je     c0103255 <boot_map_segment+0x3b>
c0103231:       c7 44 24 0c 16 76 10    movl   $0xc0107616,0xc(%esp)
c0103238:       c0
c0103239:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103240:       c0
c0103241:       c7 44 24 04 34 01 00    movl   $0x134,0x4(%esp)
c0103248:       00
c0103249:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103250:       e8 e8 d1 ff ff          call   c010043d <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0103255:       c7 45 f0 00 10 00 00    movl   $0x1000,-0x10(%ebp)
c010325c:       8b 45 0c                mov    0xc(%ebp),%eax
c010325f:       25 ff 0f 00 00          and    $0xfff,%eax
c0103264:       89 c2                   mov    %eax,%edx
c0103266:       8b 45 10                mov    0x10(%ebp),%eax
c0103269:       01 c2                   add    %eax,%edx
c010326b:       8b 45 f0                mov    -0x10(%ebp),%eax
c010326e:       01 d0                   add    %edx,%eax
c0103270:       83 e8 01                sub    $0x1,%eax
c0103273:       89 45 ec                mov    %eax,-0x14(%ebp)
c0103276:       8b 45 ec                mov    -0x14(%ebp),%eax
c0103279:       ba 00 00 00 00          mov    $0x0,%edx
c010327e:       f7 75 f0                divl   -0x10(%ebp)
c0103281:       89 d0                   mov    %edx,%eax
c0103283:       8b 55 ec                mov    -0x14(%ebp),%edx
c0103286:       29 c2                   sub    %eax,%edx
c0103288:       89 d0                   mov    %edx,%eax
c010328a:       c1 e8 0c                shr    $0xc,%eax
c010328d:       89 45 f4                mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0103290:       8b 45 0c                mov    0xc(%ebp),%eax
c0103293:       89 45 e8                mov    %eax,-0x18(%ebp)
c0103296:       8b 45 e8                mov    -0x18(%ebp),%eax
c0103299:       25 00 f0 ff ff          and    $0xfffff000,%eax
c010329e:       89 45 0c                mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c01032a1:       8b 45 14                mov    0x14(%ebp),%eax
c01032a4:       89 45 e4                mov    %eax,-0x1c(%ebp)
c01032a7:       8b 45 e4                mov    -0x1c(%ebp),%eax
c01032aa:       25 00 f0 ff ff          and    $0xfffff000,%eax
c01032af:       89 45 14                mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01032b2:       eb 6b                   jmp    c010331f <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c01032b4:       c7 44 24 08 01 00 00    movl   $0x1,0x8(%esp)
c01032bb:       00
c01032bc:       8b 45 0c                mov    0xc(%ebp),%eax
c01032bf:       89 44 24 04             mov    %eax,0x4(%esp)
c01032c3:       8b 45 08                mov    0x8(%ebp),%eax
c01032c6:       89 04 24                mov    %eax,(%esp)
c01032c9:       e8 cc 01 00 00          call   c010349a <get_pte>
c01032ce:       89 45 e0                mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01032d1:       83 7d e0 00             cmpl   $0x0,-0x20(%ebp)
c01032d5:       75 24                   jne    c01032fb <boot_map_segment+0xe1>
c01032d7:       c7 44 24 0c 42 76 10    movl   $0xc0107642,0xc(%esp)
c01032de:       c0
c01032df:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c01032e6:       c0
c01032e7:       c7 44 24 04 3a 01 00    movl   $0x13a,0x4(%esp)
c01032ee:       00
c01032ef:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c01032f6:       e8 42 d1 ff ff          call   c010043d <__panic>
        *ptep = pa | PTE_P | perm;
c01032fb:       8b 45 18                mov    0x18(%ebp),%eax
c01032fe:       8b 55 14                mov    0x14(%ebp),%edx
c0103301:       09 d0                   or     %edx,%eax
c0103303:       83 c8 01                or     $0x1,%eax
c0103306:       89 c2                   mov    %eax,%edx
c0103308:       8b 45 e0                mov    -0x20(%ebp),%eax
c010330b:       89 10                   mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c010330d:       83 6d f4 01             subl   $0x1,-0xc(%ebp)
c0103311:       81 45 0c 00 10 00 00    addl   $0x1000,0xc(%ebp)
c0103318:       81 45 14 00 10 00 00    addl   $0x1000,0x14(%ebp)
c010331f:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c0103323:       75 8f                   jne    c01032b4 <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0103325:       c9                      leave
c0103326:       c3                      ret

c0103327 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1)
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0103327:       55                      push   %ebp
c0103328:       89 e5                   mov    %esp,%ebp
c010332a:       83 ec 28                sub    $0x28,%esp
    struct Page *p = alloc_page();
c010332d:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c0103334:       e8 22 fa ff ff          call   c0102d5b <alloc_pages>
c0103339:       89 45 f4                mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c010333c:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c0103340:       75 1c                   jne    c010335e <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0103342:       c7 44 24 08 4f 76 10    movl   $0xc010764f,0x8(%esp)
c0103349:       c0
c010334a:       c7 44 24 04 46 01 00    movl   $0x146,0x4(%esp)
c0103351:       00
c0103352:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103359:       e8 df d0 ff ff          call   c010043d <__panic>
    }
    return page2kva(p);
c010335e:       8b 45 f4                mov    -0xc(%ebp),%eax
c0103361:       89 04 24                mov    %eax,(%esp)
c0103364:       e8 43 f7 ff ff          call   c0102aac <page2kva>
}
c0103369:       c9                      leave
c010336a:       c3                      ret

c010336b <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c010336b:       55                      push   %ebp
c010336c:       89 e5                   mov    %esp,%ebp
c010336e:       83 ec 38                sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size).
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory.
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0103371:       e8 93 f9 ff ff          call   c0102d09 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0103376:       e8 75 fa ff ff          call   c0102df0 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c010337b:       e8 88 04 00 00          call   c0103808 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0103380:       e8 a2 ff ff ff          call   c0103327 <boot_alloc_page>
c0103385:       a3 c4 c8 10 c0          mov    %eax,0xc010c8c4
    memset(boot_pgdir, 0, PGSIZE);
c010338a:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c010338f:       c7 44 24 08 00 10 00    movl   $0x1000,0x8(%esp)
c0103396:       00
c0103397:       c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)
c010339e:       00
c010339f:       89 04 24                mov    %eax,(%esp)
c01033a2:       e8 0a 32 00 00          call   c01065b1 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c01033a7:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c01033ac:       89 45 f4                mov    %eax,-0xc(%ebp)
c01033af:       81 7d f4 ff ff ff bf    cmpl   $0xbfffffff,-0xc(%ebp)
c01033b6:       77 23                   ja     c01033db <pmm_init+0x70>
c01033b8:       8b 45 f4                mov    -0xc(%ebp),%eax
c01033bb:       89 44 24 0c             mov    %eax,0xc(%esp)
c01033bf:       c7 44 24 08 e4 75 10    movl   $0xc01075e4,0x8(%esp)
c01033c6:       c0
c01033c7:       c7 44 24 04 60 01 00    movl   $0x160,0x4(%esp)
c01033ce:       00
c01033cf:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c01033d6:       e8 62 d0 ff ff          call   c010043d <__panic>
c01033db:       8b 45 f4                mov    -0xc(%ebp),%eax
c01033de:       05 00 00 00 40          add    $0x40000000,%eax
c01033e3:       a3 b4 c9 10 c0          mov    %eax,0xc010c9b4

    check_pgdir();
c01033e8:       e8 39 04 00 00          call   c0103826 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c01033ed:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c01033f2:       8d 90 ac 0f 00 00       lea    0xfac(%eax),%edx
c01033f8:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c01033fd:       89 45 f0                mov    %eax,-0x10(%ebp)
c0103400:       81 7d f0 ff ff ff bf    cmpl   $0xbfffffff,-0x10(%ebp)
c0103407:       77 23                   ja     c010342c <pmm_init+0xc1>
c0103409:       8b 45 f0                mov    -0x10(%ebp),%eax
c010340c:       89 44 24 0c             mov    %eax,0xc(%esp)
c0103410:       c7 44 24 08 e4 75 10    movl   $0xc01075e4,0x8(%esp)
c0103417:       c0
c0103418:       c7 44 24 04 68 01 00    movl   $0x168,0x4(%esp)
c010341f:       00
c0103420:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103427:       e8 11 d0 ff ff          call   c010043d <__panic>
c010342c:       8b 45 f0                mov    -0x10(%ebp),%eax
c010342f:       05 00 00 00 40          add    $0x40000000,%eax
c0103434:       83 c8 03                or     $0x3,%eax
c0103437:       89 02                   mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0103439:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c010343e:       c7 44 24 10 02 00 00    movl   $0x2,0x10(%esp)
c0103445:       00
c0103446:       c7 44 24 0c 00 00 00    movl   $0x0,0xc(%esp)
c010344d:       00
c010344e:       c7 44 24 08 00 00 00    movl   $0x38000000,0x8(%esp)
c0103455:       38
c0103456:       c7 44 24 04 00 00 00    movl   $0xc0000000,0x4(%esp)
c010345d:       c0
c010345e:       89 04 24                mov    %eax,(%esp)
c0103461:       e8 b4 fd ff ff          call   c010321a <boot_map_segment>

    //temporary map:
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c0103466:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c010346b:       8b 15 c4 c8 10 c0       mov    0xc010c8c4,%edx
c0103471:       8b 92 00 0c 00 00       mov    0xc00(%edx),%edx
c0103477:       89 10                   mov    %edx,(%eax)

    enable_paging();
c0103479:       e8 63 fd ff ff          call   c01031e1 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c010347e:       e8 97 f7 ff ff          call   c0102c1a <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c0103483:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103488:       c7 00 00 00 00 00       movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c010348e:       e8 2e 0a 00 00          call   c0103ec1 <check_boot_pgdir>

    print_pgdir();
c0103493:       e8 b6 0e 00 00          call   c010434e <print_pgdir>

}
c0103498:       c9                      leave
c0103499:       c3                      ret

c010349a <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c010349a:       55                      push   %ebp
c010349b:       89 e5                   mov    %esp,%ebp
c010349d:       83 ec 48                sub    $0x48,%esp
    // PTX 中间10位(PTE)
    // KADDR - takes a physical address and returns the corresponding kernel virtual address
    // #define PTE_ADDR(pte)   ((uintptr_t)(pte) & ~0xFFF) address in page table or page directory entry
    // #define PDE_ADDR(pde)   PTE_ADDR(pde) address in page table or page directory entry
    // pdep: page dirtory
    pde_t *pdep = NULL;
c01034a0:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
    uintptr_t pde = PDX(la);
c01034a7:       8b 45 0c                mov    0xc(%ebp),%eax
c01034aa:       c1 e8 16                shr    $0x16,%eax
c01034ad:       89 45 f0                mov    %eax,-0x10(%ebp)

    // pgdir:  the kernel virtual base address of PDT
    pdep = &pgdir[pde];
c01034b0:       8b 45 f0                mov    -0x10(%ebp),%eax
c01034b3:       8d 14 85 00 00 00 00    lea    0x0(,%eax,4),%edx
c01034ba:       8b 45 08                mov    0x8(%ebp),%eax
c01034bd:       01 d0                   add    %edx,%eax
c01034bf:       89 45 f4                mov    %eax,-0xc(%ebp)
    // 非present也就是不存在这样的page（缺页），需要分配页
    if (!(*pdep & PTE_P)) {
c01034c2:       8b 45 f4                mov    -0xc(%ebp),%eax
c01034c5:       8b 00                   mov    (%eax),%eax
c01034c7:       83 e0 01                and    $0x1,%eax
c01034ca:       85 c0                   test   %eax,%eax
c01034cc:       0f 85 af 00 00 00       jne    c0103581 <get_pte+0xe7>
        struct Page *p;
        // 如果不需要分配或者分配的页为NULL
        if (!create || (p = alloc_page()) == NULL) {
c01034d2:       83 7d 10 00             cmpl   $0x0,0x10(%ebp)
c01034d6:       74 15                   je     c01034ed <get_pte+0x53>
c01034d8:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c01034df:       e8 77 f8 ff ff          call   c0102d5b <alloc_pages>
c01034e4:       89 45 ec                mov    %eax,-0x14(%ebp)
c01034e7:       83 7d ec 00             cmpl   $0x0,-0x14(%ebp)
c01034eb:       75 0a                   jne    c01034f7 <get_pte+0x5d>
            return NULL;
c01034ed:       b8 00 00 00 00          mov    $0x0,%eax
c01034f2:       e9 fb 00 00 00          jmp    c01035f2 <get_pte+0x158>
        }
        set_page_ref(p, 1);
c01034f7:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c01034fe:       00
c01034ff:       8b 45 ec                mov    -0x14(%ebp),%eax
c0103502:       89 04 24                mov    %eax,(%esp)
c0103505:       e8 56 f6 ff ff          call   c0102b60 <set_page_ref>
        // page table的索引值（PTE)
        // pages: virtual address of physicall page array
        // page - pages相当于pages数组的索引值
        // 得到相对pages数组起始地址的偏移量，再左移12位，也就是变成page table的索引值
        uintptr_t pti = page2pa(p);
c010350a:       8b 45 ec                mov    -0x14(%ebp),%eax
c010350d:       89 04 24                mov    %eax,(%esp)
c0103510:       e8 32 f5 ff ff          call   c0102a47 <page2pa>
c0103515:       89 45 e8                mov    %eax,-0x18(%ebp)
        * address. It panics if you pass an invalid physical address.
        *
        * PPN(__m_pa) = __m_pa >> 12, 也就是在pages数组中的索引
        * pa >> 12 + 0xC0000000
        * */
        memset(KADDR(pti), 0, sizeof(struct Page));
c0103518:       8b 45 e8                mov    -0x18(%ebp),%eax
c010351b:       89 45 e4                mov    %eax,-0x1c(%ebp)
c010351e:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0103521:       c1 e8 0c                shr    $0xc,%eax
c0103524:       89 45 e0                mov    %eax,-0x20(%ebp)
c0103527:       a1 c0 c8 10 c0          mov    0xc010c8c0,%eax
c010352c:       39 45 e0                cmp    %eax,-0x20(%ebp)
c010352f:       72 23                   jb     c0103554 <get_pte+0xba>
c0103531:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0103534:       89 44 24 0c             mov    %eax,0xc(%esp)
c0103538:       c7 44 24 08 40 75 10    movl   $0xc0107540,0x8(%esp)
c010353f:       c0
c0103540:       c7 44 24 04 d1 01 00    movl   $0x1d1,0x4(%esp)
c0103547:       00
c0103548:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c010354f:       e8 e9 ce ff ff          call   c010043d <__panic>
c0103554:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0103557:       2d 00 00 00 40          sub    $0x40000000,%eax
c010355c:       c7 44 24 08 14 00 00    movl   $0x14,0x8(%esp)
c0103563:       00
c0103564:       c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)
c010356b:       00
c010356c:       89 04 24                mov    %eax,(%esp)
c010356f:       e8 3d 30 00 00          call   c01065b1 <memset>

        // 相当于把物理地址给了pdep
        // pdep: page directory entry point
        *pdep = pti | PTE_P | PTE_W | PTE_U;
c0103574:       8b 45 e8                mov    -0x18(%ebp),%eax
c0103577:       83 c8 07                or     $0x7,%eax
c010357a:       89 c2                   mov    %eax,%edx
c010357c:       8b 45 f4                mov    -0xc(%ebp),%eax
c010357f:       89 10                   mov    %edx,(%eax)
    // address in page table or page directory entry
    // 0xFFF = 111111111111
    // ~0xFFF = 1111111111 1111111111 000000000000
    // #define PTE_ADDR(pte)   ((uintptr_t)(pte) & ~0xFFF)
    // #define PDE_ADDR(pde)   PTE_ADDR(pde)
    uintptr_t pa = PDE_ADDR(*pdep);
c0103581:       8b 45 f4                mov    -0xc(%ebp),%eax
c0103584:       8b 00                   mov    (%eax),%eax
c0103586:       25 00 f0 ff ff          and    $0xfffff000,%eax
c010358b:       89 45 dc                mov    %eax,-0x24(%ebp)
    // 再转换为虚拟地址（线性地址）
    // KADDR = pa >> 12 + 0xC0000000
    // 0xC0000000 = 11000000 00000000 00000000 00000000
    pte_t *pde_kva = KADDR(pa);
c010358e:       8b 45 dc                mov    -0x24(%ebp),%eax
c0103591:       89 45 d8                mov    %eax,-0x28(%ebp)
c0103594:       8b 45 d8                mov    -0x28(%ebp),%eax
c0103597:       c1 e8 0c                shr    $0xc,%eax
c010359a:       89 45 d4                mov    %eax,-0x2c(%ebp)
c010359d:       a1 c0 c8 10 c0          mov    0xc010c8c0,%eax
c01035a2:       39 45 d4                cmp    %eax,-0x2c(%ebp)
c01035a5:       72 23                   jb     c01035ca <get_pte+0x130>
c01035a7:       8b 45 d8                mov    -0x28(%ebp),%eax
c01035aa:       89 44 24 0c             mov    %eax,0xc(%esp)
c01035ae:       c7 44 24 08 40 75 10    movl   $0xc0107540,0x8(%esp)
c01035b5:       c0
c01035b6:       c7 44 24 04 e2 01 00    movl   $0x1e2,0x4(%esp)
c01035bd:       00
c01035be:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c01035c5:       e8 73 ce ff ff          call   c010043d <__panic>
c01035ca:       8b 45 d8                mov    -0x28(%ebp),%eax
c01035cd:       2d 00 00 00 40          sub    $0x40000000,%eax
c01035d2:       89 45 d0                mov    %eax,-0x30(%ebp)

    // 需要映射的线性地址
    // 中间10位(PTE)
    uintptr_t need_to_map_ptx = PTX(la);
c01035d5:       8b 45 0c                mov    0xc(%ebp),%eax
c01035d8:       c1 e8 0c                shr    $0xc,%eax
c01035db:       25 ff 03 00 00          and    $0x3ff,%eax
c01035e0:       89 45 cc                mov    %eax,-0x34(%ebp)
    return &pde_kva[need_to_map_ptx];
c01035e3:       8b 45 cc                mov    -0x34(%ebp),%eax
c01035e6:       8d 14 85 00 00 00 00    lea    0x0(,%eax,4),%edx
c01035ed:       8b 45 d0                mov    -0x30(%ebp),%eax
c01035f0:       01 d0                   add    %edx,%eax
}
c01035f2:       c9                      leave
c01035f3:       c3                      ret

c01035f4 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c01035f4:       55                      push   %ebp
c01035f5:       89 e5                   mov    %esp,%ebp
c01035f7:       83 ec 28                sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01035fa:       c7 44 24 08 00 00 00    movl   $0x0,0x8(%esp)
c0103601:       00
c0103602:       8b 45 0c                mov    0xc(%ebp),%eax
c0103605:       89 44 24 04             mov    %eax,0x4(%esp)
c0103609:       8b 45 08                mov    0x8(%ebp),%eax
c010360c:       89 04 24                mov    %eax,(%esp)
c010360f:       e8 86 fe ff ff          call   c010349a <get_pte>
c0103614:       89 45 f4                mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0103617:       83 7d 10 00             cmpl   $0x0,0x10(%ebp)
c010361b:       74 08                   je     c0103625 <get_page+0x31>
        *ptep_store = ptep;
c010361d:       8b 45 10                mov    0x10(%ebp),%eax
c0103620:       8b 55 f4                mov    -0xc(%ebp),%edx
c0103623:       89 10                   mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0103625:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c0103629:       74 1b                   je     c0103646 <get_page+0x52>
c010362b:       8b 45 f4                mov    -0xc(%ebp),%eax
c010362e:       8b 00                   mov    (%eax),%eax
c0103630:       83 e0 01                and    $0x1,%eax
c0103633:       85 c0                   test   %eax,%eax
c0103635:       74 0f                   je     c0103646 <get_page+0x52>
        return pte2page(*ptep);
c0103637:       8b 45 f4                mov    -0xc(%ebp),%eax
c010363a:       8b 00                   mov    (%eax),%eax
c010363c:       89 04 24                mov    %eax,(%esp)
c010363f:       e8 bc f4 ff ff          call   c0102b00 <pte2page>
c0103644:       eb 05                   jmp    c010364b <get_page+0x57>
    }
    return NULL;
c0103646:       b8 00 00 00 00          mov    $0x0,%eax
}
c010364b:       c9                      leave
c010364c:       c3                      ret

c010364d <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c010364d:       55                      push   %ebp
c010364e:       89 e5                   mov    %esp,%ebp
c0103650:       83 ec 28                sub    $0x28,%esp
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif

    if ((*ptep & PTE_P)) {
c0103653:       8b 45 10                mov    0x10(%ebp),%eax
c0103656:       8b 00                   mov    (%eax),%eax
c0103658:       83 e0 01                and    $0x1,%eax
c010365b:       85 c0                   test   %eax,%eax
c010365d:       74 4d                   je     c01036ac <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c010365f:       8b 45 10                mov    0x10(%ebp),%eax
c0103662:       8b 00                   mov    (%eax),%eax
c0103664:       89 04 24                mov    %eax,(%esp)
c0103667:       e8 94 f4 ff ff          call   c0102b00 <pte2page>
c010366c:       89 45 f4                mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c010366f:       8b 45 f4                mov    -0xc(%ebp),%eax
c0103672:       89 04 24                mov    %eax,(%esp)
c0103675:       e8 0a f5 ff ff          call   c0102b84 <page_ref_dec>
c010367a:       85 c0                   test   %eax,%eax
c010367c:       75 13                   jne    c0103691 <page_remove_pte+0x44>
            free_page(page);
c010367e:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c0103685:       00
c0103686:       8b 45 f4                mov    -0xc(%ebp),%eax
c0103689:       89 04 24                mov    %eax,(%esp)
c010368c:       e8 02 f7 ff ff          call   c0102d93 <free_pages>
        }

        // clear second page table entry
        *ptep = 0;
c0103691:       8b 45 10                mov    0x10(%ebp),%eax
c0103694:       c7 00 00 00 00 00       movl   $0x0,(%eax)

        // flush tlb
        tlb_invalidate(pgdir, la);
c010369a:       8b 45 0c                mov    0xc(%ebp),%eax
c010369d:       89 44 24 04             mov    %eax,0x4(%esp)
c01036a1:       8b 45 08                mov    0x8(%ebp),%eax
c01036a4:       89 04 24                mov    %eax,(%esp)
c01036a7:       e8 ff 00 00 00          call   c01037ab <tlb_invalidate>
    }

}
c01036ac:       c9                      leave
c01036ad:       c3                      ret

c01036ae <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c01036ae:       55                      push   %ebp
c01036af:       89 e5                   mov    %esp,%ebp
c01036b1:       83 ec 28                sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01036b4:       c7 44 24 08 00 00 00    movl   $0x0,0x8(%esp)
c01036bb:       00
c01036bc:       8b 45 0c                mov    0xc(%ebp),%eax
c01036bf:       89 44 24 04             mov    %eax,0x4(%esp)
c01036c3:       8b 45 08                mov    0x8(%ebp),%eax
c01036c6:       89 04 24                mov    %eax,(%esp)
c01036c9:       e8 cc fd ff ff          call   c010349a <get_pte>
c01036ce:       89 45 f4                mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c01036d1:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c01036d5:       74 19                   je     c01036f0 <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c01036d7:       8b 45 f4                mov    -0xc(%ebp),%eax
c01036da:       89 44 24 08             mov    %eax,0x8(%esp)
c01036de:       8b 45 0c                mov    0xc(%ebp),%eax
c01036e1:       89 44 24 04             mov    %eax,0x4(%esp)
c01036e5:       8b 45 08                mov    0x8(%ebp),%eax
c01036e8:       89 04 24                mov    %eax,(%esp)
c01036eb:       e8 5d ff ff ff          call   c010364d <page_remove_pte>
    }
}
c01036f0:       c9                      leave
c01036f1:       c3                      ret

c01036f2 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c01036f2:       55                      push   %ebp
c01036f3:       89 e5                   mov    %esp,%ebp
c01036f5:       83 ec 28                sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c01036f8:       c7 44 24 08 01 00 00    movl   $0x1,0x8(%esp)
c01036ff:       00
c0103700:       8b 45 10                mov    0x10(%ebp),%eax
c0103703:       89 44 24 04             mov    %eax,0x4(%esp)
c0103707:       8b 45 08                mov    0x8(%ebp),%eax
c010370a:       89 04 24                mov    %eax,(%esp)
c010370d:       e8 88 fd ff ff          call   c010349a <get_pte>
c0103712:       89 45 f4                mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0103715:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c0103719:       75 0a                   jne    c0103725 <page_insert+0x33>
        return -E_NO_MEM;
c010371b:       b8 fc ff ff ff          mov    $0xfffffffc,%eax
c0103720:       e9 84 00 00 00          jmp    c01037a9 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0103725:       8b 45 0c                mov    0xc(%ebp),%eax
c0103728:       89 04 24                mov    %eax,(%esp)
c010372b:       e8 3d f4 ff ff          call   c0102b6d <page_ref_inc>
    if (*ptep & PTE_P) {
c0103730:       8b 45 f4                mov    -0xc(%ebp),%eax
c0103733:       8b 00                   mov    (%eax),%eax
c0103735:       83 e0 01                and    $0x1,%eax
c0103738:       85 c0                   test   %eax,%eax
c010373a:       74 3e                   je     c010377a <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c010373c:       8b 45 f4                mov    -0xc(%ebp),%eax
c010373f:       8b 00                   mov    (%eax),%eax
c0103741:       89 04 24                mov    %eax,(%esp)
c0103744:       e8 b7 f3 ff ff          call   c0102b00 <pte2page>
c0103749:       89 45 f0                mov    %eax,-0x10(%ebp)
        if (p == page) {
c010374c:       8b 45 f0                mov    -0x10(%ebp),%eax
c010374f:       3b 45 0c                cmp    0xc(%ebp),%eax
c0103752:       75 0d                   jne    c0103761 <page_insert+0x6f>
            page_ref_dec(page);
c0103754:       8b 45 0c                mov    0xc(%ebp),%eax
c0103757:       89 04 24                mov    %eax,(%esp)
c010375a:       e8 25 f4 ff ff          call   c0102b84 <page_ref_dec>
c010375f:       eb 19                   jmp    c010377a <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0103761:       8b 45 f4                mov    -0xc(%ebp),%eax
c0103764:       89 44 24 08             mov    %eax,0x8(%esp)
c0103768:       8b 45 10                mov    0x10(%ebp),%eax
c010376b:       89 44 24 04             mov    %eax,0x4(%esp)
c010376f:       8b 45 08                mov    0x8(%ebp),%eax
c0103772:       89 04 24                mov    %eax,(%esp)
c0103775:       e8 d3 fe ff ff          call   c010364d <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c010377a:       8b 45 0c                mov    0xc(%ebp),%eax
c010377d:       89 04 24                mov    %eax,(%esp)
c0103780:       e8 c2 f2 ff ff          call   c0102a47 <page2pa>
c0103785:       0b 45 14                or     0x14(%ebp),%eax
c0103788:       83 c8 01                or     $0x1,%eax
c010378b:       89 c2                   mov    %eax,%edx
c010378d:       8b 45 f4                mov    -0xc(%ebp),%eax
c0103790:       89 10                   mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0103792:       8b 45 10                mov    0x10(%ebp),%eax
c0103795:       89 44 24 04             mov    %eax,0x4(%esp)
c0103799:       8b 45 08                mov    0x8(%ebp),%eax
c010379c:       89 04 24                mov    %eax,(%esp)
c010379f:       e8 07 00 00 00          call   c01037ab <tlb_invalidate>
    return 0;
c01037a4:       b8 00 00 00 00          mov    $0x0,%eax
}
c01037a9:       c9                      leave
c01037aa:       c3                      ret

c01037ab <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c01037ab:       55                      push   %ebp
c01037ac:       89 e5                   mov    %esp,%ebp
c01037ae:       83 ec 28                sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c01037b1:       0f 20 d8                mov    %cr3,%eax
c01037b4:       89 45 f0                mov    %eax,-0x10(%ebp)
    return cr3;
c01037b7:       8b 45 f0                mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c01037ba:       89 c2                   mov    %eax,%edx
c01037bc:       8b 45 08                mov    0x8(%ebp),%eax
c01037bf:       89 45 f4                mov    %eax,-0xc(%ebp)
c01037c2:       81 7d f4 ff ff ff bf    cmpl   $0xbfffffff,-0xc(%ebp)
c01037c9:       77 23                   ja     c01037ee <tlb_invalidate+0x43>
c01037cb:       8b 45 f4                mov    -0xc(%ebp),%eax
c01037ce:       89 44 24 0c             mov    %eax,0xc(%esp)
c01037d2:       c7 44 24 08 e4 75 10    movl   $0xc01075e4,0x8(%esp)
c01037d9:       c0
c01037da:       c7 44 24 04 4f 02 00    movl   $0x24f,0x4(%esp)
c01037e1:       00
c01037e2:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c01037e9:       e8 4f cc ff ff          call   c010043d <__panic>
c01037ee:       8b 45 f4                mov    -0xc(%ebp),%eax
c01037f1:       05 00 00 00 40          add    $0x40000000,%eax
c01037f6:       39 c2                   cmp    %eax,%edx
c01037f8:       75 0c                   jne    c0103806 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c01037fa:       8b 45 0c                mov    0xc(%ebp),%eax
c01037fd:       89 45 ec                mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0103800:       8b 45 ec                mov    -0x14(%ebp),%eax
c0103803:       0f 01 38                invlpg (%eax)
    }
}
c0103806:       c9                      leave
c0103807:       c3                      ret

c0103808 <check_alloc_page>:

static void
check_alloc_page(void) {
c0103808:       55                      push   %ebp
c0103809:       89 e5                   mov    %esp,%ebp
c010380b:       83 ec 18                sub    $0x18,%esp
    pmm_manager->check();
c010380e:       a1 b0 c9 10 c0          mov    0xc010c9b0,%eax
c0103813:       8b 40 18                mov    0x18(%eax),%eax
c0103816:       ff d0                   call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0103818:       c7 04 24 68 76 10 c0    movl   $0xc0107668,(%esp)
c010381f:       e8 c2 ca ff ff          call   c01002e6 <cprintf>
}
c0103824:       c9                      leave
c0103825:       c3                      ret

c0103826 <check_pgdir>:

static void
check_pgdir(void) {
c0103826:       55                      push   %ebp
c0103827:       89 e5                   mov    %esp,%ebp
c0103829:       83 ec 38                sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010382c:       a1 c0 c8 10 c0          mov    0xc010c8c0,%eax
c0103831:       3d 00 80 03 00          cmp    $0x38000,%eax
c0103836:       76 24                   jbe    c010385c <check_pgdir+0x36>
c0103838:       c7 44 24 0c 87 76 10    movl   $0xc0107687,0xc(%esp)
c010383f:       c0
c0103840:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103847:       c0
c0103848:       c7 44 24 04 5c 02 00    movl   $0x25c,0x4(%esp)
c010384f:       00
c0103850:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103857:       e8 e1 cb ff ff          call   c010043d <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010385c:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103861:       85 c0                   test   %eax,%eax
c0103863:       74 0e                   je     c0103873 <check_pgdir+0x4d>
c0103865:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c010386a:       25 ff 0f 00 00          and    $0xfff,%eax
c010386f:       85 c0                   test   %eax,%eax
c0103871:       74 24                   je     c0103897 <check_pgdir+0x71>
c0103873:       c7 44 24 0c a4 76 10    movl   $0xc01076a4,0xc(%esp)
c010387a:       c0
c010387b:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103882:       c0
c0103883:       c7 44 24 04 5d 02 00    movl   $0x25d,0x4(%esp)
c010388a:       00
c010388b:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103892:       e8 a6 cb ff ff          call   c010043d <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0103897:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c010389c:       c7 44 24 08 00 00 00    movl   $0x0,0x8(%esp)
c01038a3:       00
c01038a4:       c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)
c01038ab:       00
c01038ac:       89 04 24                mov    %eax,(%esp)
c01038af:       e8 40 fd ff ff          call   c01035f4 <get_page>
c01038b4:       85 c0                   test   %eax,%eax
c01038b6:       74 24                   je     c01038dc <check_pgdir+0xb6>
c01038b8:       c7 44 24 0c dc 76 10    movl   $0xc01076dc,0xc(%esp)
c01038bf:       c0
c01038c0:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c01038c7:       c0
c01038c8:       c7 44 24 04 5e 02 00    movl   $0x25e,0x4(%esp)
c01038cf:       00
c01038d0:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c01038d7:       e8 61 cb ff ff          call   c010043d <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01038dc:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c01038e3:       e8 73 f4 ff ff          call   c0102d5b <alloc_pages>
c01038e8:       89 45 f4                mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01038eb:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c01038f0:       c7 44 24 0c 00 00 00    movl   $0x0,0xc(%esp)
c01038f7:       00
c01038f8:       c7 44 24 08 00 00 00    movl   $0x0,0x8(%esp)
c01038ff:       00
c0103900:       8b 55 f4                mov    -0xc(%ebp),%edx
c0103903:       89 54 24 04             mov    %edx,0x4(%esp)
c0103907:       89 04 24                mov    %eax,(%esp)
c010390a:       e8 e3 fd ff ff          call   c01036f2 <page_insert>
c010390f:       85 c0                   test   %eax,%eax
c0103911:       74 24                   je     c0103937 <check_pgdir+0x111>
c0103913:       c7 44 24 0c 04 77 10    movl   $0xc0107704,0xc(%esp)
c010391a:       c0
c010391b:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103922:       c0
c0103923:       c7 44 24 04 62 02 00    movl   $0x262,0x4(%esp)
c010392a:       00
c010392b:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103932:       e8 06 cb ff ff          call   c010043d <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0103937:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c010393c:       c7 44 24 08 00 00 00    movl   $0x0,0x8(%esp)
c0103943:       00
c0103944:       c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)
c010394b:       00
c010394c:       89 04 24                mov    %eax,(%esp)
c010394f:       e8 46 fb ff ff          call   c010349a <get_pte>
c0103954:       89 45 f0                mov    %eax,-0x10(%ebp)
c0103957:       83 7d f0 00             cmpl   $0x0,-0x10(%ebp)
c010395b:       75 24                   jne    c0103981 <check_pgdir+0x15b>
c010395d:       c7 44 24 0c 30 77 10    movl   $0xc0107730,0xc(%esp)
c0103964:       c0
c0103965:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c010396c:       c0
c010396d:       c7 44 24 04 65 02 00    movl   $0x265,0x4(%esp)
c0103974:       00
c0103975:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c010397c:       e8 bc ca ff ff          call   c010043d <__panic>
    assert(pte2page(*ptep) == p1);
c0103981:       8b 45 f0                mov    -0x10(%ebp),%eax
c0103984:       8b 00                   mov    (%eax),%eax
c0103986:       89 04 24                mov    %eax,(%esp)
c0103989:       e8 72 f1 ff ff          call   c0102b00 <pte2page>
c010398e:       3b 45 f4                cmp    -0xc(%ebp),%eax
c0103991:       74 24                   je     c01039b7 <check_pgdir+0x191>
c0103993:       c7 44 24 0c 5d 77 10    movl   $0xc010775d,0xc(%esp)
c010399a:       c0
c010399b:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c01039a2:       c0
c01039a3:       c7 44 24 04 66 02 00    movl   $0x266,0x4(%esp)
c01039aa:       00
c01039ab:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c01039b2:       e8 86 ca ff ff          call   c010043d <__panic>
    assert(page_ref(p1) == 1);
c01039b7:       8b 45 f4                mov    -0xc(%ebp),%eax
c01039ba:       89 04 24                mov    %eax,(%esp)
c01039bd:       e8 94 f1 ff ff          call   c0102b56 <page_ref>
c01039c2:       83 f8 01                cmp    $0x1,%eax
c01039c5:       74 24                   je     c01039eb <check_pgdir+0x1c5>
c01039c7:       c7 44 24 0c 73 77 10    movl   $0xc0107773,0xc(%esp)
c01039ce:       c0
c01039cf:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c01039d6:       c0
c01039d7:       c7 44 24 04 67 02 00    movl   $0x267,0x4(%esp)
c01039de:       00
c01039df:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c01039e6:       e8 52 ca ff ff          call   c010043d <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01039eb:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c01039f0:       8b 00                   mov    (%eax),%eax
c01039f2:       25 00 f0 ff ff          and    $0xfffff000,%eax
c01039f7:       89 45 ec                mov    %eax,-0x14(%ebp)
c01039fa:       8b 45 ec                mov    -0x14(%ebp),%eax
c01039fd:       c1 e8 0c                shr    $0xc,%eax
c0103a00:       89 45 e8                mov    %eax,-0x18(%ebp)
c0103a03:       a1 c0 c8 10 c0          mov    0xc010c8c0,%eax
c0103a08:       39 45 e8                cmp    %eax,-0x18(%ebp)
c0103a0b:       72 23                   jb     c0103a30 <check_pgdir+0x20a>
c0103a0d:       8b 45 ec                mov    -0x14(%ebp),%eax
c0103a10:       89 44 24 0c             mov    %eax,0xc(%esp)
c0103a14:       c7 44 24 08 40 75 10    movl   $0xc0107540,0x8(%esp)
c0103a1b:       c0
c0103a1c:       c7 44 24 04 69 02 00    movl   $0x269,0x4(%esp)
c0103a23:       00
c0103a24:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103a2b:       e8 0d ca ff ff          call   c010043d <__panic>
c0103a30:       8b 45 ec                mov    -0x14(%ebp),%eax
c0103a33:       2d 00 00 00 40          sub    $0x40000000,%eax
c0103a38:       83 c0 04                add    $0x4,%eax
c0103a3b:       89 45 f0                mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c0103a3e:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103a43:       c7 44 24 08 00 00 00    movl   $0x0,0x8(%esp)
c0103a4a:       00
c0103a4b:       c7 44 24 04 00 10 00    movl   $0x1000,0x4(%esp)
c0103a52:       00
c0103a53:       89 04 24                mov    %eax,(%esp)
c0103a56:       e8 3f fa ff ff          call   c010349a <get_pte>
c0103a5b:       3b 45 f0                cmp    -0x10(%ebp),%eax
c0103a5e:       74 24                   je     c0103a84 <check_pgdir+0x25e>
c0103a60:       c7 44 24 0c 88 77 10    movl   $0xc0107788,0xc(%esp)
c0103a67:       c0
c0103a68:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103a6f:       c0
c0103a70:       c7 44 24 04 6a 02 00    movl   $0x26a,0x4(%esp)
c0103a77:       00
c0103a78:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103a7f:       e8 b9 c9 ff ff          call   c010043d <__panic>

    p2 = alloc_page();
c0103a84:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c0103a8b:       e8 cb f2 ff ff          call   c0102d5b <alloc_pages>
c0103a90:       89 45 e4                mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0103a93:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103a98:       c7 44 24 0c 06 00 00    movl   $0x6,0xc(%esp)
c0103a9f:       00
c0103aa0:       c7 44 24 08 00 10 00    movl   $0x1000,0x8(%esp)
c0103aa7:       00
c0103aa8:       8b 55 e4                mov    -0x1c(%ebp),%edx
c0103aab:       89 54 24 04             mov    %edx,0x4(%esp)
c0103aaf:       89 04 24                mov    %eax,(%esp)
c0103ab2:       e8 3b fc ff ff          call   c01036f2 <page_insert>
c0103ab7:       85 c0                   test   %eax,%eax
c0103ab9:       74 24                   je     c0103adf <check_pgdir+0x2b9>
c0103abb:       c7 44 24 0c b0 77 10    movl   $0xc01077b0,0xc(%esp)
c0103ac2:       c0
c0103ac3:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103aca:       c0
c0103acb:       c7 44 24 04 6d 02 00    movl   $0x26d,0x4(%esp)
c0103ad2:       00
c0103ad3:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103ada:       e8 5e c9 ff ff          call   c010043d <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0103adf:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103ae4:       c7 44 24 08 00 00 00    movl   $0x0,0x8(%esp)
c0103aeb:       00
c0103aec:       c7 44 24 04 00 10 00    movl   $0x1000,0x4(%esp)
c0103af3:       00
c0103af4:       89 04 24                mov    %eax,(%esp)
c0103af7:       e8 9e f9 ff ff          call   c010349a <get_pte>
c0103afc:       89 45 f0                mov    %eax,-0x10(%ebp)
c0103aff:       83 7d f0 00             cmpl   $0x0,-0x10(%ebp)
c0103b03:       75 24                   jne    c0103b29 <check_pgdir+0x303>
c0103b05:       c7 44 24 0c e8 77 10    movl   $0xc01077e8,0xc(%esp)
c0103b0c:       c0
c0103b0d:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103b14:       c0
c0103b15:       c7 44 24 04 6e 02 00    movl   $0x26e,0x4(%esp)
c0103b1c:       00
c0103b1d:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103b24:       e8 14 c9 ff ff          call   c010043d <__panic>
    assert(*ptep & PTE_U);
c0103b29:       8b 45 f0                mov    -0x10(%ebp),%eax
c0103b2c:       8b 00                   mov    (%eax),%eax
c0103b2e:       83 e0 04                and    $0x4,%eax
c0103b31:       85 c0                   test   %eax,%eax
c0103b33:       75 24                   jne    c0103b59 <check_pgdir+0x333>
c0103b35:       c7 44 24 0c 18 78 10    movl   $0xc0107818,0xc(%esp)
c0103b3c:       c0
c0103b3d:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103b44:       c0
c0103b45:       c7 44 24 04 6f 02 00    movl   $0x26f,0x4(%esp)
c0103b4c:       00
c0103b4d:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103b54:       e8 e4 c8 ff ff          call   c010043d <__panic>
    assert(*ptep & PTE_W);
c0103b59:       8b 45 f0                mov    -0x10(%ebp),%eax
c0103b5c:       8b 00                   mov    (%eax),%eax
c0103b5e:       83 e0 02                and    $0x2,%eax
c0103b61:       85 c0                   test   %eax,%eax
c0103b63:       75 24                   jne    c0103b89 <check_pgdir+0x363>
c0103b65:       c7 44 24 0c 26 78 10    movl   $0xc0107826,0xc(%esp)
c0103b6c:       c0
c0103b6d:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103b74:       c0
c0103b75:       c7 44 24 04 70 02 00    movl   $0x270,0x4(%esp)
c0103b7c:       00
c0103b7d:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103b84:       e8 b4 c8 ff ff          call   c010043d <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0103b89:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103b8e:       8b 00                   mov    (%eax),%eax
c0103b90:       83 e0 04                and    $0x4,%eax
c0103b93:       85 c0                   test   %eax,%eax
c0103b95:       75 24                   jne    c0103bbb <check_pgdir+0x395>
c0103b97:       c7 44 24 0c 34 78 10    movl   $0xc0107834,0xc(%esp)
c0103b9e:       c0
c0103b9f:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103ba6:       c0
c0103ba7:       c7 44 24 04 71 02 00    movl   $0x271,0x4(%esp)
c0103bae:       00
c0103baf:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103bb6:       e8 82 c8 ff ff          call   c010043d <__panic>
    assert(page_ref(p2) == 1);
c0103bbb:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0103bbe:       89 04 24                mov    %eax,(%esp)
c0103bc1:       e8 90 ef ff ff          call   c0102b56 <page_ref>
c0103bc6:       83 f8 01                cmp    $0x1,%eax
c0103bc9:       74 24                   je     c0103bef <check_pgdir+0x3c9>
c0103bcb:       c7 44 24 0c 4a 78 10    movl   $0xc010784a,0xc(%esp)
c0103bd2:       c0
c0103bd3:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103bda:       c0
c0103bdb:       c7 44 24 04 72 02 00    movl   $0x272,0x4(%esp)
c0103be2:       00
c0103be3:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103bea:       e8 4e c8 ff ff          call   c010043d <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0103bef:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103bf4:       c7 44 24 0c 00 00 00    movl   $0x0,0xc(%esp)
c0103bfb:       00
c0103bfc:       c7 44 24 08 00 10 00    movl   $0x1000,0x8(%esp)
c0103c03:       00
c0103c04:       8b 55 f4                mov    -0xc(%ebp),%edx
c0103c07:       89 54 24 04             mov    %edx,0x4(%esp)
c0103c0b:       89 04 24                mov    %eax,(%esp)
c0103c0e:       e8 df fa ff ff          call   c01036f2 <page_insert>
c0103c13:       85 c0                   test   %eax,%eax
c0103c15:       74 24                   je     c0103c3b <check_pgdir+0x415>
c0103c17:       c7 44 24 0c 5c 78 10    movl   $0xc010785c,0xc(%esp)
c0103c1e:       c0
c0103c1f:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103c26:       c0
c0103c27:       c7 44 24 04 74 02 00    movl   $0x274,0x4(%esp)
c0103c2e:       00
c0103c2f:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103c36:       e8 02 c8 ff ff          call   c010043d <__panic>
    assert(page_ref(p1) == 2);
c0103c3b:       8b 45 f4                mov    -0xc(%ebp),%eax
c0103c3e:       89 04 24                mov    %eax,(%esp)
c0103c41:       e8 10 ef ff ff          call   c0102b56 <page_ref>
c0103c46:       83 f8 02                cmp    $0x2,%eax
c0103c49:       74 24                   je     c0103c6f <check_pgdir+0x449>
c0103c4b:       c7 44 24 0c 88 78 10    movl   $0xc0107888,0xc(%esp)
c0103c52:       c0
c0103c53:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103c5a:       c0
c0103c5b:       c7 44 24 04 75 02 00    movl   $0x275,0x4(%esp)
c0103c62:       00
c0103c63:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103c6a:       e8 ce c7 ff ff          call   c010043d <__panic>
    assert(page_ref(p2) == 0);
c0103c6f:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0103c72:       89 04 24                mov    %eax,(%esp)
c0103c75:       e8 dc ee ff ff          call   c0102b56 <page_ref>
c0103c7a:       85 c0                   test   %eax,%eax
c0103c7c:       74 24                   je     c0103ca2 <check_pgdir+0x47c>
c0103c7e:       c7 44 24 0c 9a 78 10    movl   $0xc010789a,0xc(%esp)
c0103c85:       c0
c0103c86:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103c8d:       c0
c0103c8e:       c7 44 24 04 76 02 00    movl   $0x276,0x4(%esp)
c0103c95:       00
c0103c96:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103c9d:       e8 9b c7 ff ff          call   c010043d <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0103ca2:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103ca7:       c7 44 24 08 00 00 00    movl   $0x0,0x8(%esp)
c0103cae:       00
c0103caf:       c7 44 24 04 00 10 00    movl   $0x1000,0x4(%esp)
c0103cb6:       00
c0103cb7:       89 04 24                mov    %eax,(%esp)
c0103cba:       e8 db f7 ff ff          call   c010349a <get_pte>
c0103cbf:       89 45 f0                mov    %eax,-0x10(%ebp)
c0103cc2:       83 7d f0 00             cmpl   $0x0,-0x10(%ebp)
c0103cc6:       75 24                   jne    c0103cec <check_pgdir+0x4c6>
c0103cc8:       c7 44 24 0c e8 77 10    movl   $0xc01077e8,0xc(%esp)
c0103ccf:       c0
c0103cd0:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103cd7:       c0
c0103cd8:       c7 44 24 04 77 02 00    movl   $0x277,0x4(%esp)
c0103cdf:       00
c0103ce0:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103ce7:       e8 51 c7 ff ff          call   c010043d <__panic>
    assert(pte2page(*ptep) == p1);
c0103cec:       8b 45 f0                mov    -0x10(%ebp),%eax
c0103cef:       8b 00                   mov    (%eax),%eax
c0103cf1:       89 04 24                mov    %eax,(%esp)
c0103cf4:       e8 07 ee ff ff          call   c0102b00 <pte2page>
c0103cf9:       3b 45 f4                cmp    -0xc(%ebp),%eax
c0103cfc:       74 24                   je     c0103d22 <check_pgdir+0x4fc>
c0103cfe:       c7 44 24 0c 5d 77 10    movl   $0xc010775d,0xc(%esp)
c0103d05:       c0
c0103d06:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103d0d:       c0
c0103d0e:       c7 44 24 04 78 02 00    movl   $0x278,0x4(%esp)
c0103d15:       00
c0103d16:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103d1d:       e8 1b c7 ff ff          call   c010043d <__panic>
    assert((*ptep & PTE_U) == 0);
c0103d22:       8b 45 f0                mov    -0x10(%ebp),%eax
c0103d25:       8b 00                   mov    (%eax),%eax
c0103d27:       83 e0 04                and    $0x4,%eax
c0103d2a:       85 c0                   test   %eax,%eax
c0103d2c:       74 24                   je     c0103d52 <check_pgdir+0x52c>
c0103d2e:       c7 44 24 0c ac 78 10    movl   $0xc01078ac,0xc(%esp)
c0103d35:       c0
c0103d36:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103d3d:       c0
c0103d3e:       c7 44 24 04 79 02 00    movl   $0x279,0x4(%esp)
c0103d45:       00
c0103d46:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103d4d:       e8 eb c6 ff ff          call   c010043d <__panic>

    page_remove(boot_pgdir, 0x0);
c0103d52:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103d57:       c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)
c0103d5e:       00
c0103d5f:       89 04 24                mov    %eax,(%esp)
c0103d62:       e8 47 f9 ff ff          call   c01036ae <page_remove>
    assert(page_ref(p1) == 1);
c0103d67:       8b 45 f4                mov    -0xc(%ebp),%eax
c0103d6a:       89 04 24                mov    %eax,(%esp)
c0103d6d:       e8 e4 ed ff ff          call   c0102b56 <page_ref>
c0103d72:       83 f8 01                cmp    $0x1,%eax
c0103d75:       74 24                   je     c0103d9b <check_pgdir+0x575>
c0103d77:       c7 44 24 0c 73 77 10    movl   $0xc0107773,0xc(%esp)
c0103d7e:       c0
c0103d7f:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103d86:       c0
c0103d87:       c7 44 24 04 7c 02 00    movl   $0x27c,0x4(%esp)
c0103d8e:       00
c0103d8f:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103d96:       e8 a2 c6 ff ff          call   c010043d <__panic>
    assert(page_ref(p2) == 0);
c0103d9b:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0103d9e:       89 04 24                mov    %eax,(%esp)
c0103da1:       e8 b0 ed ff ff          call   c0102b56 <page_ref>
c0103da6:       85 c0                   test   %eax,%eax
c0103da8:       74 24                   je     c0103dce <check_pgdir+0x5a8>
c0103daa:       c7 44 24 0c 9a 78 10    movl   $0xc010789a,0xc(%esp)
c0103db1:       c0
c0103db2:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103db9:       c0
c0103dba:       c7 44 24 04 7d 02 00    movl   $0x27d,0x4(%esp)
c0103dc1:       00
c0103dc2:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103dc9:       e8 6f c6 ff ff          call   c010043d <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0103dce:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103dd3:       c7 44 24 04 00 10 00    movl   $0x1000,0x4(%esp)
c0103dda:       00
c0103ddb:       89 04 24                mov    %eax,(%esp)
c0103dde:       e8 cb f8 ff ff          call   c01036ae <page_remove>
    assert(page_ref(p1) == 0);
c0103de3:       8b 45 f4                mov    -0xc(%ebp),%eax
c0103de6:       89 04 24                mov    %eax,(%esp)
c0103de9:       e8 68 ed ff ff          call   c0102b56 <page_ref>
c0103dee:       85 c0                   test   %eax,%eax
c0103df0:       74 24                   je     c0103e16 <check_pgdir+0x5f0>
c0103df2:       c7 44 24 0c c1 78 10    movl   $0xc01078c1,0xc(%esp)
c0103df9:       c0
c0103dfa:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103e01:       c0
c0103e02:       c7 44 24 04 80 02 00    movl   $0x280,0x4(%esp)
c0103e09:       00
c0103e0a:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103e11:       e8 27 c6 ff ff          call   c010043d <__panic>
    assert(page_ref(p2) == 0);
c0103e16:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0103e19:       89 04 24                mov    %eax,(%esp)
c0103e1c:       e8 35 ed ff ff          call   c0102b56 <page_ref>
c0103e21:       85 c0                   test   %eax,%eax
c0103e23:       74 24                   je     c0103e49 <check_pgdir+0x623>
c0103e25:       c7 44 24 0c 9a 78 10    movl   $0xc010789a,0xc(%esp)
c0103e2c:       c0
c0103e2d:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103e34:       c0
c0103e35:       c7 44 24 04 81 02 00    movl   $0x281,0x4(%esp)
c0103e3c:       00
c0103e3d:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103e44:       e8 f4 c5 ff ff          call   c010043d <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0103e49:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103e4e:       8b 00                   mov    (%eax),%eax
c0103e50:       89 04 24                mov    %eax,(%esp)
c0103e53:       e8 e6 ec ff ff          call   c0102b3e <pde2page>
c0103e58:       89 04 24                mov    %eax,(%esp)
c0103e5b:       e8 f6 ec ff ff          call   c0102b56 <page_ref>
c0103e60:       83 f8 01                cmp    $0x1,%eax
c0103e63:       74 24                   je     c0103e89 <check_pgdir+0x663>
c0103e65:       c7 44 24 0c d4 78 10    movl   $0xc01078d4,0xc(%esp)
c0103e6c:       c0
c0103e6d:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103e74:       c0
c0103e75:       c7 44 24 04 83 02 00    movl   $0x283,0x4(%esp)
c0103e7c:       00
c0103e7d:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103e84:       e8 b4 c5 ff ff          call   c010043d <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0103e89:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103e8e:       8b 00                   mov    (%eax),%eax
c0103e90:       89 04 24                mov    %eax,(%esp)
c0103e93:       e8 a6 ec ff ff          call   c0102b3e <pde2page>
c0103e98:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c0103e9f:       00
c0103ea0:       89 04 24                mov    %eax,(%esp)
c0103ea3:       e8 eb ee ff ff          call   c0102d93 <free_pages>
    boot_pgdir[0] = 0;
c0103ea8:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103ead:       c7 00 00 00 00 00       movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0103eb3:       c7 04 24 fb 78 10 c0    movl   $0xc01078fb,(%esp)
c0103eba:       e8 27 c4 ff ff          call   c01002e6 <cprintf>
}
c0103ebf:       c9                      leave
c0103ec0:       c3                      ret

c0103ec1 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0103ec1:       55                      push   %ebp
c0103ec2:       89 e5                   mov    %esp,%ebp
c0103ec4:       83 ec 38                sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0103ec7:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
c0103ece:       e9 ca 00 00 00          jmp    c0103f9d <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0103ed3:       8b 45 f4                mov    -0xc(%ebp),%eax
c0103ed6:       89 45 f0                mov    %eax,-0x10(%ebp)
c0103ed9:       8b 45 f0                mov    -0x10(%ebp),%eax
c0103edc:       c1 e8 0c                shr    $0xc,%eax
c0103edf:       89 45 ec                mov    %eax,-0x14(%ebp)
c0103ee2:       a1 c0 c8 10 c0          mov    0xc010c8c0,%eax
c0103ee7:       39 45 ec                cmp    %eax,-0x14(%ebp)
c0103eea:       72 23                   jb     c0103f0f <check_boot_pgdir+0x4e>
c0103eec:       8b 45 f0                mov    -0x10(%ebp),%eax
c0103eef:       89 44 24 0c             mov    %eax,0xc(%esp)
c0103ef3:       c7 44 24 08 40 75 10    movl   $0xc0107540,0x8(%esp)
c0103efa:       c0
c0103efb:       c7 44 24 04 8f 02 00    movl   $0x28f,0x4(%esp)
c0103f02:       00
c0103f03:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103f0a:       e8 2e c5 ff ff          call   c010043d <__panic>
c0103f0f:       8b 45 f0                mov    -0x10(%ebp),%eax
c0103f12:       2d 00 00 00 40          sub    $0x40000000,%eax
c0103f17:       89 c2                   mov    %eax,%edx
c0103f19:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103f1e:       c7 44 24 08 00 00 00    movl   $0x0,0x8(%esp)
c0103f25:       00
c0103f26:       89 54 24 04             mov    %edx,0x4(%esp)
c0103f2a:       89 04 24                mov    %eax,(%esp)
c0103f2d:       e8 68 f5 ff ff          call   c010349a <get_pte>
c0103f32:       89 45 e8                mov    %eax,-0x18(%ebp)
c0103f35:       83 7d e8 00             cmpl   $0x0,-0x18(%ebp)
c0103f39:       75 24                   jne    c0103f5f <check_boot_pgdir+0x9e>
c0103f3b:       c7 44 24 0c 18 79 10    movl   $0xc0107918,0xc(%esp)
c0103f42:       c0
c0103f43:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103f4a:       c0
c0103f4b:       c7 44 24 04 8f 02 00    movl   $0x28f,0x4(%esp)
c0103f52:       00
c0103f53:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103f5a:       e8 de c4 ff ff          call   c010043d <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0103f5f:       8b 45 e8                mov    -0x18(%ebp),%eax
c0103f62:       8b 00                   mov    (%eax),%eax
c0103f64:       25 00 f0 ff ff          and    $0xfffff000,%eax
c0103f69:       89 c2                   mov    %eax,%edx
c0103f6b:       8b 45 f4                mov    -0xc(%ebp),%eax
c0103f6e:       39 c2                   cmp    %eax,%edx
c0103f70:       74 24                   je     c0103f96 <check_boot_pgdir+0xd5>
c0103f72:       c7 44 24 0c 55 79 10    movl   $0xc0107955,0xc(%esp)
c0103f79:       c0
c0103f7a:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0103f81:       c0
c0103f82:       c7 44 24 04 90 02 00    movl   $0x290,0x4(%esp)
c0103f89:       00
c0103f8a:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103f91:       e8 a7 c4 ff ff          call   c010043d <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0103f96:       81 45 f4 00 10 00 00    addl   $0x1000,-0xc(%ebp)
c0103f9d:       8b 55 f4                mov    -0xc(%ebp),%edx
c0103fa0:       a1 c0 c8 10 c0          mov    0xc010c8c0,%eax
c0103fa5:       39 c2                   cmp    %eax,%edx
c0103fa7:       0f 82 26 ff ff ff       jb     c0103ed3 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0103fad:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103fb2:       05 ac 0f 00 00          add    $0xfac,%eax
c0103fb7:       8b 00                   mov    (%eax),%eax
c0103fb9:       25 00 f0 ff ff          and    $0xfffff000,%eax
c0103fbe:       89 c2                   mov    %eax,%edx
c0103fc0:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0103fc5:       89 45 e4                mov    %eax,-0x1c(%ebp)
c0103fc8:       81 7d e4 ff ff ff bf    cmpl   $0xbfffffff,-0x1c(%ebp)
c0103fcf:       77 23                   ja     c0103ff4 <check_boot_pgdir+0x133>
c0103fd1:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0103fd4:       89 44 24 0c             mov    %eax,0xc(%esp)
c0103fd8:       c7 44 24 08 e4 75 10    movl   $0xc01075e4,0x8(%esp)
c0103fdf:       c0
c0103fe0:       c7 44 24 04 93 02 00    movl   $0x293,0x4(%esp)
c0103fe7:       00
c0103fe8:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0103fef:       e8 49 c4 ff ff          call   c010043d <__panic>
c0103ff4:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0103ff7:       05 00 00 00 40          add    $0x40000000,%eax
c0103ffc:       39 c2                   cmp    %eax,%edx
c0103ffe:       74 24                   je     c0104024 <check_boot_pgdir+0x163>
c0104000:       c7 44 24 0c 6c 79 10    movl   $0xc010796c,0xc(%esp)
c0104007:       c0
c0104008:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c010400f:       c0
c0104010:       c7 44 24 04 93 02 00    movl   $0x293,0x4(%esp)
c0104017:       00
c0104018:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c010401f:       e8 19 c4 ff ff          call   c010043d <__panic>

    assert(boot_pgdir[0] == 0);
c0104024:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0104029:       8b 00                   mov    (%eax),%eax
c010402b:       85 c0                   test   %eax,%eax
c010402d:       74 24                   je     c0104053 <check_boot_pgdir+0x192>
c010402f:       c7 44 24 0c a0 79 10    movl   $0xc01079a0,0xc(%esp)
c0104036:       c0
c0104037:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c010403e:       c0
c010403f:       c7 44 24 04 95 02 00    movl   $0x295,0x4(%esp)
c0104046:       00
c0104047:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c010404e:       e8 ea c3 ff ff          call   c010043d <__panic>

    struct Page *p;
    p = alloc_page();
c0104053:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c010405a:       e8 fc ec ff ff          call   c0102d5b <alloc_pages>
c010405f:       89 45 e0                mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0104062:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0104067:       c7 44 24 0c 02 00 00    movl   $0x2,0xc(%esp)
c010406e:       00
c010406f:       c7 44 24 08 00 01 00    movl   $0x100,0x8(%esp)
c0104076:       00
c0104077:       8b 55 e0                mov    -0x20(%ebp),%edx
c010407a:       89 54 24 04             mov    %edx,0x4(%esp)
c010407e:       89 04 24                mov    %eax,(%esp)
c0104081:       e8 6c f6 ff ff          call   c01036f2 <page_insert>
c0104086:       85 c0                   test   %eax,%eax
c0104088:       74 24                   je     c01040ae <check_boot_pgdir+0x1ed>
c010408a:       c7 44 24 0c b4 79 10    movl   $0xc01079b4,0xc(%esp)
c0104091:       c0
c0104092:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0104099:       c0
c010409a:       c7 44 24 04 99 02 00    movl   $0x299,0x4(%esp)
c01040a1:       00
c01040a2:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c01040a9:       e8 8f c3 ff ff          call   c010043d <__panic>
    assert(page_ref(p) == 1);
c01040ae:       8b 45 e0                mov    -0x20(%ebp),%eax
c01040b1:       89 04 24                mov    %eax,(%esp)
c01040b4:       e8 9d ea ff ff          call   c0102b56 <page_ref>
c01040b9:       83 f8 01                cmp    $0x1,%eax
c01040bc:       74 24                   je     c01040e2 <check_boot_pgdir+0x221>
c01040be:       c7 44 24 0c e2 79 10    movl   $0xc01079e2,0xc(%esp)
c01040c5:       c0
c01040c6:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c01040cd:       c0
c01040ce:       c7 44 24 04 9a 02 00    movl   $0x29a,0x4(%esp)
c01040d5:       00
c01040d6:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c01040dd:       e8 5b c3 ff ff          call   c010043d <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01040e2:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c01040e7:       c7 44 24 0c 02 00 00    movl   $0x2,0xc(%esp)
c01040ee:       00
c01040ef:       c7 44 24 08 00 11 00    movl   $0x1100,0x8(%esp)
c01040f6:       00
c01040f7:       8b 55 e0                mov    -0x20(%ebp),%edx
c01040fa:       89 54 24 04             mov    %edx,0x4(%esp)
c01040fe:       89 04 24                mov    %eax,(%esp)
c0104101:       e8 ec f5 ff ff          call   c01036f2 <page_insert>
c0104106:       85 c0                   test   %eax,%eax
c0104108:       74 24                   je     c010412e <check_boot_pgdir+0x26d>
c010410a:       c7 44 24 0c f4 79 10    movl   $0xc01079f4,0xc(%esp)
c0104111:       c0
c0104112:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c0104119:       c0
c010411a:       c7 44 24 04 9b 02 00    movl   $0x29b,0x4(%esp)
c0104121:       00
c0104122:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c0104129:       e8 0f c3 ff ff          call   c010043d <__panic>
    assert(page_ref(p) == 2);
c010412e:       8b 45 e0                mov    -0x20(%ebp),%eax
c0104131:       89 04 24                mov    %eax,(%esp)
c0104134:       e8 1d ea ff ff          call   c0102b56 <page_ref>
c0104139:       83 f8 02                cmp    $0x2,%eax
c010413c:       74 24                   je     c0104162 <check_boot_pgdir+0x2a1>
c010413e:       c7 44 24 0c 2b 7a 10    movl   $0xc0107a2b,0xc(%esp)
c0104145:       c0
c0104146:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c010414d:       c0
c010414e:       c7 44 24 04 9c 02 00    movl   $0x29c,0x4(%esp)
c0104155:       00
c0104156:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c010415d:       e8 db c2 ff ff          call   c010043d <__panic>

    const char *str = "ucore: Hello world!!";
c0104162:       c7 45 dc 3c 7a 10 c0    movl   $0xc0107a3c,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0104169:       8b 45 dc                mov    -0x24(%ebp),%eax
c010416c:       89 44 24 04             mov    %eax,0x4(%esp)
c0104170:       c7 04 24 00 01 00 00    movl   $0x100,(%esp)
c0104177:       e8 5e 21 00 00          call   c01062da <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c010417c:       c7 44 24 04 00 11 00    movl   $0x1100,0x4(%esp)
c0104183:       00
c0104184:       c7 04 24 00 01 00 00    movl   $0x100,(%esp)
c010418b:       e8 c3 21 00 00          call   c0106353 <strcmp>
c0104190:       85 c0                   test   %eax,%eax
c0104192:       74 24                   je     c01041b8 <check_boot_pgdir+0x2f7>
c0104194:       c7 44 24 0c 54 7a 10    movl   $0xc0107a54,0xc(%esp)
c010419b:       c0
c010419c:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c01041a3:       c0
c01041a4:       c7 44 24 04 a0 02 00    movl   $0x2a0,0x4(%esp)
c01041ab:       00
c01041ac:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c01041b3:       e8 85 c2 ff ff          call   c010043d <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c01041b8:       8b 45 e0                mov    -0x20(%ebp),%eax
c01041bb:       89 04 24                mov    %eax,(%esp)
c01041be:       e8 e9 e8 ff ff          call   c0102aac <page2kva>
c01041c3:       05 00 01 00 00          add    $0x100,%eax
c01041c8:       c6 00 00                movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c01041cb:       c7 04 24 00 01 00 00    movl   $0x100,(%esp)
c01041d2:       e8 ab 20 00 00          call   c0106282 <strlen>
c01041d7:       85 c0                   test   %eax,%eax
c01041d9:       74 24                   je     c01041ff <check_boot_pgdir+0x33e>
c01041db:       c7 44 24 0c 8c 7a 10    movl   $0xc0107a8c,0xc(%esp)
c01041e2:       c0
c01041e3:       c7 44 24 08 2d 76 10    movl   $0xc010762d,0x8(%esp)
c01041ea:       c0
c01041eb:       c7 44 24 04 a3 02 00    movl   $0x2a3,0x4(%esp)
c01041f2:       00
c01041f3:       c7 04 24 08 76 10 c0    movl   $0xc0107608,(%esp)
c01041fa:       e8 3e c2 ff ff          call   c010043d <__panic>

    free_page(p);
c01041ff:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c0104206:       00
c0104207:       8b 45 e0                mov    -0x20(%ebp),%eax
c010420a:       89 04 24                mov    %eax,(%esp)
c010420d:       e8 81 eb ff ff          call   c0102d93 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0104212:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0104217:       8b 00                   mov    (%eax),%eax
c0104219:       89 04 24                mov    %eax,(%esp)
c010421c:       e8 1d e9 ff ff          call   c0102b3e <pde2page>
c0104221:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c0104228:       00
c0104229:       89 04 24                mov    %eax,(%esp)
c010422c:       e8 62 eb ff ff          call   c0102d93 <free_pages>
    boot_pgdir[0] = 0;
c0104231:       a1 c4 c8 10 c0          mov    0xc010c8c4,%eax
c0104236:       c7 00 00 00 00 00       movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c010423c:       c7 04 24 b0 7a 10 c0    movl   $0xc0107ab0,(%esp)
c0104243:       e8 9e c0 ff ff          call   c01002e6 <cprintf>
}
c0104248:       c9                      leave
c0104249:       c3                      ret

c010424a <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c010424a:       55                      push   %ebp
c010424b:       89 e5                   mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c010424d:       8b 45 08                mov    0x8(%ebp),%eax
c0104250:       83 e0 04                and    $0x4,%eax
c0104253:       85 c0                   test   %eax,%eax
c0104255:       74 07                   je     c010425e <perm2str+0x14>
c0104257:       b8 75 00 00 00          mov    $0x75,%eax
c010425c:       eb 05                   jmp    c0104263 <perm2str+0x19>
c010425e:       b8 2d 00 00 00          mov    $0x2d,%eax
c0104263:       a2 48 c9 10 c0          mov    %al,0xc010c948
    str[1] = 'r';
c0104268:       c6 05 49 c9 10 c0 72    movb   $0x72,0xc010c949
    str[2] = (perm & PTE_W) ? 'w' : '-';
c010426f:       8b 45 08                mov    0x8(%ebp),%eax
c0104272:       83 e0 02                and    $0x2,%eax
c0104275:       85 c0                   test   %eax,%eax
c0104277:       74 07                   je     c0104280 <perm2str+0x36>
c0104279:       b8 77 00 00 00          mov    $0x77,%eax
c010427e:       eb 05                   jmp    c0104285 <perm2str+0x3b>
c0104280:       b8 2d 00 00 00          mov    $0x2d,%eax
c0104285:       a2 4a c9 10 c0          mov    %al,0xc010c94a
    str[3] = '\0';
c010428a:       c6 05 4b c9 10 c0 00    movb   $0x0,0xc010c94b
    return str;
c0104291:       b8 48 c9 10 c0          mov    $0xc010c948,%eax
}
c0104296:       5d                      pop    %ebp
c0104297:       c3                      ret

c0104298 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0104298:       55                      push   %ebp
c0104299:       89 e5                   mov    %esp,%ebp
c010429b:       83 ec 10                sub    $0x10,%esp
    if (start >= right) {
c010429e:       8b 45 10                mov    0x10(%ebp),%eax
c01042a1:       3b 45 0c                cmp    0xc(%ebp),%eax
c01042a4:       72 0a                   jb     c01042b0 <get_pgtable_items+0x18>
        return 0;
c01042a6:       b8 00 00 00 00          mov    $0x0,%eax
c01042ab:       e9 9c 00 00 00          jmp    c010434c <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c01042b0:       eb 04                   jmp    c01042b6 <get_pgtable_items+0x1e>
        start ++;
c01042b2:       83 45 10 01             addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c01042b6:       8b 45 10                mov    0x10(%ebp),%eax
c01042b9:       3b 45 0c                cmp    0xc(%ebp),%eax
c01042bc:       73 18                   jae    c01042d6 <get_pgtable_items+0x3e>
c01042be:       8b 45 10                mov    0x10(%ebp),%eax
c01042c1:       8d 14 85 00 00 00 00    lea    0x0(,%eax,4),%edx
c01042c8:       8b 45 14                mov    0x14(%ebp),%eax
c01042cb:       01 d0                   add    %edx,%eax
c01042cd:       8b 00                   mov    (%eax),%eax
c01042cf:       83 e0 01                and    $0x1,%eax
c01042d2:       85 c0                   test   %eax,%eax
c01042d4:       74 dc                   je     c01042b2 <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c01042d6:       8b 45 10                mov    0x10(%ebp),%eax
c01042d9:       3b 45 0c                cmp    0xc(%ebp),%eax
c01042dc:       73 69                   jae    c0104347 <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c01042de:       83 7d 18 00             cmpl   $0x0,0x18(%ebp)
c01042e2:       74 08                   je     c01042ec <get_pgtable_items+0x54>
            *left_store = start;
c01042e4:       8b 45 18                mov    0x18(%ebp),%eax
c01042e7:       8b 55 10                mov    0x10(%ebp),%edx
c01042ea:       89 10                   mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c01042ec:       8b 45 10                mov    0x10(%ebp),%eax
c01042ef:       8d 50 01                lea    0x1(%eax),%edx
c01042f2:       89 55 10                mov    %edx,0x10(%ebp)
c01042f5:       8d 14 85 00 00 00 00    lea    0x0(,%eax,4),%edx
c01042fc:       8b 45 14                mov    0x14(%ebp),%eax
c01042ff:       01 d0                   add    %edx,%eax
c0104301:       8b 00                   mov    (%eax),%eax
c0104303:       83 e0 07                and    $0x7,%eax
c0104306:       89 45 fc                mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0104309:       eb 04                   jmp    c010430f <get_pgtable_items+0x77>
            start ++;
c010430b:       83 45 10 01             addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c010430f:       8b 45 10                mov    0x10(%ebp),%eax
c0104312:       3b 45 0c                cmp    0xc(%ebp),%eax
c0104315:       73 1d                   jae    c0104334 <get_pgtable_items+0x9c>
c0104317:       8b 45 10                mov    0x10(%ebp),%eax
c010431a:       8d 14 85 00 00 00 00    lea    0x0(,%eax,4),%edx
c0104321:       8b 45 14                mov    0x14(%ebp),%eax
c0104324:       01 d0                   add    %edx,%eax
c0104326:       8b 00                   mov    (%eax),%eax
c0104328:       83 e0 07                and    $0x7,%eax
c010432b:       89 c2                   mov    %eax,%edx
c010432d:       8b 45 fc                mov    -0x4(%ebp),%eax
c0104330:       39 c2                   cmp    %eax,%edx
c0104332:       74 d7                   je     c010430b <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0104334:       83 7d 1c 00             cmpl   $0x0,0x1c(%ebp)
c0104338:       74 08                   je     c0104342 <get_pgtable_items+0xaa>
            *right_store = start;
c010433a:       8b 45 1c                mov    0x1c(%ebp),%eax
c010433d:       8b 55 10                mov    0x10(%ebp),%edx
c0104340:       89 10                   mov    %edx,(%eax)
        }
        return perm;
c0104342:       8b 45 fc                mov    -0x4(%ebp),%eax
c0104345:       eb 05                   jmp    c010434c <get_pgtable_items+0xb4>
    }
    return 0;
c0104347:       b8 00 00 00 00          mov    $0x0,%eax
}
c010434c:       c9                      leave
c010434d:       c3                      ret

c010434e <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c010434e:       55                      push   %ebp
c010434f:       89 e5                   mov    %esp,%ebp
c0104351:       57                      push   %edi
c0104352:       56                      push   %esi
c0104353:       53                      push   %ebx
c0104354:       83 ec 4c                sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0104357:       c7 04 24 d0 7a 10 c0    movl   $0xc0107ad0,(%esp)
c010435e:       e8 83 bf ff ff          call   c01002e6 <cprintf>
    size_t left, right = 0, perm;
c0104363:       c7 45 dc 00 00 00 00    movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c010436a:       e9 fa 00 00 00          jmp    c0104469 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c010436f:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0104372:       89 04 24                mov    %eax,(%esp)
c0104375:       e8 d0 fe ff ff          call   c010424a <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c010437a:       8b 4d dc                mov    -0x24(%ebp),%ecx
c010437d:       8b 55 e0                mov    -0x20(%ebp),%edx
c0104380:       29 d1                   sub    %edx,%ecx
c0104382:       89 ca                   mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0104384:       89 d6                   mov    %edx,%esi
c0104386:       c1 e6 16                shl    $0x16,%esi
c0104389:       8b 55 dc                mov    -0x24(%ebp),%edx
c010438c:       89 d3                   mov    %edx,%ebx
c010438e:       c1 e3 16                shl    $0x16,%ebx
c0104391:       8b 55 e0                mov    -0x20(%ebp),%edx
c0104394:       89 d1                   mov    %edx,%ecx
c0104396:       c1 e1 16                shl    $0x16,%ecx
c0104399:       8b 7d dc                mov    -0x24(%ebp),%edi
c010439c:       8b 55 e0                mov    -0x20(%ebp),%edx
c010439f:       29 d7                   sub    %edx,%edi
c01043a1:       89 fa                   mov    %edi,%edx
c01043a3:       89 44 24 14             mov    %eax,0x14(%esp)
c01043a7:       89 74 24 10             mov    %esi,0x10(%esp)
c01043ab:       89 5c 24 0c             mov    %ebx,0xc(%esp)
c01043af:       89 4c 24 08             mov    %ecx,0x8(%esp)
c01043b3:       89 54 24 04             mov    %edx,0x4(%esp)
c01043b7:       c7 04 24 01 7b 10 c0    movl   $0xc0107b01,(%esp)
c01043be:       e8 23 bf ff ff          call   c01002e6 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c01043c3:       8b 45 e0                mov    -0x20(%ebp),%eax
c01043c6:       c1 e0 0a                shl    $0xa,%eax
c01043c9:       89 45 d4                mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c01043cc:       eb 54                   jmp    c0104422 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01043ce:       8b 45 e4                mov    -0x1c(%ebp),%eax
c01043d1:       89 04 24                mov    %eax,(%esp)
c01043d4:       e8 71 fe ff ff          call   c010424a <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c01043d9:       8b 4d d4                mov    -0x2c(%ebp),%ecx
c01043dc:       8b 55 d8                mov    -0x28(%ebp),%edx
c01043df:       29 d1                   sub    %edx,%ecx
c01043e1:       89 ca                   mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01043e3:       89 d6                   mov    %edx,%esi
c01043e5:       c1 e6 0c                shl    $0xc,%esi
c01043e8:       8b 55 d4                mov    -0x2c(%ebp),%edx
c01043eb:       89 d3                   mov    %edx,%ebx
c01043ed:       c1 e3 0c                shl    $0xc,%ebx
c01043f0:       8b 55 d8                mov    -0x28(%ebp),%edx
c01043f3:       c1 e2 0c                shl    $0xc,%edx
c01043f6:       89 d1                   mov    %edx,%ecx
c01043f8:       8b 7d d4                mov    -0x2c(%ebp),%edi
c01043fb:       8b 55 d8                mov    -0x28(%ebp),%edx
c01043fe:       29 d7                   sub    %edx,%edi
c0104400:       89 fa                   mov    %edi,%edx
c0104402:       89 44 24 14             mov    %eax,0x14(%esp)
c0104406:       89 74 24 10             mov    %esi,0x10(%esp)
c010440a:       89 5c 24 0c             mov    %ebx,0xc(%esp)
c010440e:       89 4c 24 08             mov    %ecx,0x8(%esp)
c0104412:       89 54 24 04             mov    %edx,0x4(%esp)
c0104416:       c7 04 24 20 7b 10 c0    movl   $0xc0107b20,(%esp)
c010441d:       e8 c4 be ff ff          call   c01002e6 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0104422:       ba 00 00 c0 fa          mov    $0xfac00000,%edx
c0104427:       8b 45 d4                mov    -0x2c(%ebp),%eax
c010442a:       8b 4d dc                mov    -0x24(%ebp),%ecx
c010442d:       89 ce                   mov    %ecx,%esi
c010442f:       c1 e6 0a                shl    $0xa,%esi
c0104432:       8b 4d e0                mov    -0x20(%ebp),%ecx
c0104435:       89 cb                   mov    %ecx,%ebx
c0104437:       c1 e3 0a                shl    $0xa,%ebx
c010443a:       8d 4d d4                lea    -0x2c(%ebp),%ecx
c010443d:       89 4c 24 14             mov    %ecx,0x14(%esp)
c0104441:       8d 4d d8                lea    -0x28(%ebp),%ecx
c0104444:       89 4c 24 10             mov    %ecx,0x10(%esp)
c0104448:       89 54 24 0c             mov    %edx,0xc(%esp)
c010444c:       89 44 24 08             mov    %eax,0x8(%esp)
c0104450:       89 74 24 04             mov    %esi,0x4(%esp)
c0104454:       89 1c 24                mov    %ebx,(%esp)
c0104457:       e8 3c fe ff ff          call   c0104298 <get_pgtable_items>
c010445c:       89 45 e4                mov    %eax,-0x1c(%ebp)
c010445f:       83 7d e4 00             cmpl   $0x0,-0x1c(%ebp)
c0104463:       0f 85 65 ff ff ff       jne    c01043ce <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0104469:       ba 00 b0 fe fa          mov    $0xfafeb000,%edx
c010446e:       8b 45 dc                mov    -0x24(%ebp),%eax
c0104471:       8d 4d dc                lea    -0x24(%ebp),%ecx
c0104474:       89 4c 24 14             mov    %ecx,0x14(%esp)
c0104478:       8d 4d e0                lea    -0x20(%ebp),%ecx
c010447b:       89 4c 24 10             mov    %ecx,0x10(%esp)
c010447f:       89 54 24 0c             mov    %edx,0xc(%esp)
c0104483:       89 44 24 08             mov    %eax,0x8(%esp)
c0104487:       c7 44 24 04 00 04 00    movl   $0x400,0x4(%esp)
c010448e:       00
c010448f:       c7 04 24 00 00 00 00    movl   $0x0,(%esp)
c0104496:       e8 fd fd ff ff          call   c0104298 <get_pgtable_items>
c010449b:       89 45 e4                mov    %eax,-0x1c(%ebp)
c010449e:       83 7d e4 00             cmpl   $0x0,-0x1c(%ebp)
c01044a2:       0f 85 c7 fe ff ff       jne    c010436f <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c01044a8:       c7 04 24 44 7b 10 c0    movl   $0xc0107b44,(%esp)
c01044af:       e8 32 be ff ff          call   c01002e6 <cprintf>
}
c01044b4:       83 c4 4c                add    $0x4c,%esp
c01044b7:       5b                      pop    %ebx
c01044b8:       5e                      pop    %esi
c01044b9:       5f                      pop    %edi
c01044ba:       5d                      pop    %ebp
c01044bb:       c3                      ret

c01044bc <page2ppn>:
extern size_t npage;

// pages: virtual address of physicall page array
// page - pages相当于pages数组的索引值
static inline ppn_t
page2ppn(struct Page *page) {
c01044bc:       55                      push   %ebp
c01044bd:       89 e5                   mov    %esp,%ebp
    return page - pages;
c01044bf:       8b 55 08                mov    0x8(%ebp),%edx
c01044c2:       a1 b8 c9 10 c0          mov    0xc010c9b8,%eax
c01044c7:       29 c2                   sub    %eax,%edx
c01044c9:       89 d0                   mov    %edx,%eax
c01044cb:       c1 f8 02                sar    $0x2,%eax
c01044ce:       69 c0 cd cc cc cc       imul   $0xcccccccd,%eax,%eax
}
c01044d4:       5d                      pop    %ebp
c01044d5:       c3                      ret

c01044d6 <page2pa>:

// pages: virtual address of physicall page array
// page - pages相当于pages数组的索引值
// 得到相对pages数组起始地址的偏移量，再左移12位，也就是变成page table的索引值
static inline uintptr_t
page2pa(struct Page *page) {
c01044d6:       55                      push   %ebp
c01044d7:       89 e5                   mov    %esp,%ebp
c01044d9:       83 ec 04                sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01044dc:       8b 45 08                mov    0x8(%ebp),%eax
c01044df:       89 04 24                mov    %eax,(%esp)
c01044e2:       e8 d5 ff ff ff          call   c01044bc <page2ppn>
c01044e7:       c1 e0 0c                shl    $0xc,%eax
}
c01044ea:       c9                      leave
c01044eb:       c3                      ret

c01044ec <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01044ec:       55                      push   %ebp
c01044ed:       89 e5                   mov    %esp,%ebp
    return page->ref;
c01044ef:       8b 45 08                mov    0x8(%ebp),%eax
c01044f2:       8b 00                   mov    (%eax),%eax
}
c01044f4:       5d                      pop    %ebp
c01044f5:       c3                      ret

c01044f6 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01044f6:       55                      push   %ebp
c01044f7:       89 e5                   mov    %esp,%ebp
    page->ref = val;
c01044f9:       8b 45 08                mov    0x8(%ebp),%eax
c01044fc:       8b 55 0c                mov    0xc(%ebp),%edx
c01044ff:       89 10                   mov    %edx,(%eax)
}
c0104501:       5d                      pop    %ebp
c0104502:       c3                      ret

c0104503 <default_init>:
/**
 * @brief 默认的初始化free_list
 *
 */
static void
default_init(void) {
c0104503:       55                      push   %ebp
c0104504:       89 e5                   mov    %esp,%ebp
c0104506:       83 ec 10                sub    $0x10,%esp
c0104509:       c7 45 fc bc c9 10 c0    movl   $0xc010c9bc,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104510:       8b 45 fc                mov    -0x4(%ebp),%eax
c0104513:       8b 55 fc                mov    -0x4(%ebp),%edx
c0104516:       89 50 04                mov    %edx,0x4(%eax)
c0104519:       8b 45 fc                mov    -0x4(%ebp),%eax
c010451c:       8b 50 04                mov    0x4(%eax),%edx
c010451f:       8b 45 fc                mov    -0x4(%ebp),%eax
c0104522:       89 10                   mov    %edx,(%eax)
    // node<->node
    list_init(&free_list);
    nr_free = 0;
c0104524:       c7 05 c4 c9 10 c0 00    movl   $0x0,0xc010c9c4
c010452b:       00 00 00
}
c010452e:       c9                      leave
c010452f:       c3                      ret

c0104530 <default_init_memmap>:
 *
 * @param base
 * @param n
 */
static void
default_init_memmap(struct Page *base, size_t n) {
c0104530:       55                      push   %ebp
c0104531:       89 e5                   mov    %esp,%ebp
c0104533:       83 ec 58                sub    $0x58,%esp
    // 需要循环设置每一页的flags, property, ref, 且要在链表中连接起来(1->2->3)
    // 然后把这一段内存区域加入到free_list中，设置nr_free

    assert(n > 0);
c0104536:       83 7d 0c 00             cmpl   $0x0,0xc(%ebp)
c010453a:       75 24                   jne    c0104560 <default_init_memmap+0x30>
c010453c:       c7 44 24 0c 78 7b 10    movl   $0xc0107b78,0xc(%esp)
c0104543:       c0
c0104544:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c010454b:       c0
c010454c:       c7 44 24 04 55 00 00    movl   $0x55,0x4(%esp)
c0104553:       00
c0104554:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c010455b:       e8 dd be ff ff          call   c010043d <__panic>
    struct Page *p = base;
c0104560:       8b 45 08                mov    0x8(%ebp),%eax
c0104563:       89 45 f4                mov    %eax,-0xc(%ebp)
    for (; p != base + n; p++) {
c0104566:       eb 7d                   jmp    c01045e5 <default_init_memmap+0xb5>
        assert(PageReserved(p));
c0104568:       8b 45 f4                mov    -0xc(%ebp),%eax
c010456b:       83 c0 04                add    $0x4,%eax
c010456e:       c7 45 f0 00 00 00 00    movl   $0x0,-0x10(%ebp)
c0104575:       89 45 ec                mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104578:       8b 45 ec                mov    -0x14(%ebp),%eax
c010457b:       8b 55 f0                mov    -0x10(%ebp),%edx
c010457e:       0f a3 10                bt     %edx,(%eax)
c0104581:       19 c0                   sbb    %eax,%eax
c0104583:       89 45 e8                mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0104586:       83 7d e8 00             cmpl   $0x0,-0x18(%ebp)
c010458a:       0f 95 c0                setne  %al
c010458d:       0f b6 c0                movzbl %al,%eax
c0104590:       85 c0                   test   %eax,%eax
c0104592:       75 24                   jne    c01045b8 <default_init_memmap+0x88>
c0104594:       c7 44 24 0c a9 7b 10    movl   $0xc0107ba9,0xc(%esp)
c010459b:       c0
c010459c:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01045a3:       c0
c01045a4:       c7 44 24 04 58 00 00    movl   $0x58,0x4(%esp)
c01045ab:       00
c01045ac:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c01045b3:       e8 85 be ff ff          call   c010043d <__panic>
        p->flags = p->property = 0;
c01045b8:       8b 45 f4                mov    -0xc(%ebp),%eax
c01045bb:       c7 40 08 00 00 00 00    movl   $0x0,0x8(%eax)
c01045c2:       8b 45 f4                mov    -0xc(%ebp),%eax
c01045c5:       8b 50 08                mov    0x8(%eax),%edx
c01045c8:       8b 45 f4                mov    -0xc(%ebp),%eax
c01045cb:       89 50 04                mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c01045ce:       c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)
c01045d5:       00
c01045d6:       8b 45 f4                mov    -0xc(%ebp),%eax
c01045d9:       89 04 24                mov    %eax,(%esp)
c01045dc:       e8 15 ff ff ff          call   c01044f6 <set_page_ref>
    // 需要循环设置每一页的flags, property, ref, 且要在链表中连接起来(1->2->3)
    // 然后把这一段内存区域加入到free_list中，设置nr_free

    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p++) {
c01045e1:       83 45 f4 14             addl   $0x14,-0xc(%ebp)
c01045e5:       8b 55 0c                mov    0xc(%ebp),%edx
c01045e8:       89 d0                   mov    %edx,%eax
c01045ea:       c1 e0 02                shl    $0x2,%eax
c01045ed:       01 d0                   add    %edx,%eax
c01045ef:       c1 e0 02                shl    $0x2,%eax
c01045f2:       89 c2                   mov    %eax,%edx
c01045f4:       8b 45 08                mov    0x8(%ebp),%eax
c01045f7:       01 d0                   add    %edx,%eax
c01045f9:       3b 45 f4                cmp    -0xc(%ebp),%eax
c01045fc:       0f 85 66 ff ff ff       jne    c0104568 <default_init_memmap+0x38>
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }

    // 设置这段内存区域第一页的属性
    SetPageProperty(base);
c0104602:       8b 45 08                mov    0x8(%ebp),%eax
c0104605:       83 c0 04                add    $0x4,%eax
c0104608:       c7 45 e4 01 00 00 00    movl   $0x1,-0x1c(%ebp)
c010460f:       89 45 e0                mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104612:       8b 45 e0                mov    -0x20(%ebp),%eax
c0104615:       8b 55 e4                mov    -0x1c(%ebp),%edx
c0104618:       0f ab 10                bts    %edx,(%eax)
    base->property = n;
c010461b:       8b 45 08                mov    0x8(%ebp),%eax
c010461e:       8b 55 0c                mov    0xc(%ebp),%edx
c0104621:       89 50 08                mov    %edx,0x8(%eax)
    nr_free += n;
c0104624:       8b 15 c4 c9 10 c0       mov    0xc010c9c4,%edx
c010462a:       8b 45 0c                mov    0xc(%ebp),%eax
c010462d:       01 d0                   add    %edx,%eax
c010462f:       a3 c4 c9 10 c0          mov    %eax,0xc010c9c4
    // 加入到free_list中
    // 双向循环链表
    // free_list<->add1_pages<->add2_pages<->add3_pages<->free_list
    list_add(&free_list, &base->page_link);
c0104634:       8b 45 08                mov    0x8(%ebp),%eax
c0104637:       83 c0 0c                add    $0xc,%eax
c010463a:       c7 45 dc bc c9 10 c0    movl   $0xc010c9bc,-0x24(%ebp)
c0104641:       89 45 d8                mov    %eax,-0x28(%ebp)
c0104644:       8b 45 dc                mov    -0x24(%ebp),%eax
c0104647:       89 45 d4                mov    %eax,-0x2c(%ebp)
c010464a:       8b 45 d8                mov    -0x28(%ebp),%eax
c010464d:       89 45 d0                mov    %eax,-0x30(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0104650:       8b 45 d4                mov    -0x2c(%ebp),%eax
c0104653:       8b 40 04                mov    0x4(%eax),%eax
c0104656:       8b 55 d0                mov    -0x30(%ebp),%edx
c0104659:       89 55 cc                mov    %edx,-0x34(%ebp)
c010465c:       8b 55 d4                mov    -0x2c(%ebp),%edx
c010465f:       89 55 c8                mov    %edx,-0x38(%ebp)
c0104662:       89 45 c4                mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0104665:       8b 45 c4                mov    -0x3c(%ebp),%eax
c0104668:       8b 55 cc                mov    -0x34(%ebp),%edx
c010466b:       89 10                   mov    %edx,(%eax)
c010466d:       8b 45 c4                mov    -0x3c(%ebp),%eax
c0104670:       8b 10                   mov    (%eax),%edx
c0104672:       8b 45 c8                mov    -0x38(%ebp),%eax
c0104675:       89 50 04                mov    %edx,0x4(%eax)
    elm->next = next;
c0104678:       8b 45 cc                mov    -0x34(%ebp),%eax
c010467b:       8b 55 c4                mov    -0x3c(%ebp),%edx
c010467e:       89 50 04                mov    %edx,0x4(%eax)
    elm->prev = prev;
c0104681:       8b 45 cc                mov    -0x34(%ebp),%eax
c0104684:       8b 55 c8                mov    -0x38(%ebp),%edx
c0104687:       89 10                   mov    %edx,(%eax)
}
c0104689:       c9                      leave
c010468a:       c3                      ret

c010468b <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c010468b:       55                      push   %ebp
c010468c:       89 e5                   mov    %esp,%ebp
c010468e:       83 ec 68                sub    $0x68,%esp

    assert(n > 0);
c0104691:       83 7d 08 00             cmpl   $0x0,0x8(%ebp)
c0104695:       75 24                   jne    c01046bb <default_alloc_pages+0x30>
c0104697:       c7 44 24 0c 78 7b 10    movl   $0xc0107b78,0xc(%esp)
c010469e:       c0
c010469f:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01046a6:       c0
c01046a7:       c7 44 24 04 6a 00 00    movl   $0x6a,0x4(%esp)
c01046ae:       00
c01046af:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c01046b6:       e8 82 bd ff ff          call   c010043d <__panic>
    if (n > nr_free) {
c01046bb:       a1 c4 c9 10 c0          mov    0xc010c9c4,%eax
c01046c0:       3b 45 08                cmp    0x8(%ebp),%eax
c01046c3:       73 0a                   jae    c01046cf <default_alloc_pages+0x44>
        return NULL;
c01046c5:       b8 00 00 00 00          mov    $0x0,%eax
c01046ca:       e9 3d 01 00 00          jmp    c010480c <default_alloc_pages+0x181>
    }

    struct Page *page = NULL;
c01046cf:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c01046d6:       c7 45 f0 bc c9 10 c0    movl   $0xc010c9bc,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01046dd:       eb 1c                   jmp    c01046fb <default_alloc_pages+0x70>
        struct Page *p = le2page(le, page_link);
c01046df:       8b 45 f0                mov    -0x10(%ebp),%eax
c01046e2:       83 e8 0c                sub    $0xc,%eax
c01046e5:       89 45 ec                mov    %eax,-0x14(%ebp)
        // 找到符合条件的
        if (p->property >= n) {
c01046e8:       8b 45 ec                mov    -0x14(%ebp),%eax
c01046eb:       8b 40 08                mov    0x8(%eax),%eax
c01046ee:       3b 45 08                cmp    0x8(%ebp),%eax
c01046f1:       72 08                   jb     c01046fb <default_alloc_pages+0x70>
            page = p;
c01046f3:       8b 45 ec                mov    -0x14(%ebp),%eax
c01046f6:       89 45 f4                mov    %eax,-0xc(%ebp)
            break;
c01046f9:       eb 18                   jmp    c0104713 <default_alloc_pages+0x88>
c01046fb:       8b 45 f0                mov    -0x10(%ebp),%eax
c01046fe:       89 45 e4                mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104701:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0104704:       8b 40 04                mov    0x4(%eax),%eax
        return NULL;
    }

    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104707:       89 45 f0                mov    %eax,-0x10(%ebp)
c010470a:       81 7d f0 bc c9 10 c0    cmpl   $0xc010c9bc,-0x10(%ebp)
c0104711:       75 cc                   jne    c01046df <default_alloc_pages+0x54>
            page = p;
            break;
        }
    }

    if (page != NULL) {
c0104713:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c0104717:       0f 84 ec 00 00 00       je     c0104809 <default_alloc_pages+0x17e>
        // 如果分配n个后还有page页，则后面的补上
        if (page->property > n) {
c010471d:       8b 45 f4                mov    -0xc(%ebp),%eax
c0104720:       8b 40 08                mov    0x8(%eax),%eax
c0104723:       3b 45 08                cmp    0x8(%ebp),%eax
c0104726:       0f 86 8c 00 00 00       jbe    c01047b8 <default_alloc_pages+0x12d>
            struct Page *pn = page + n;
c010472c:       8b 55 08                mov    0x8(%ebp),%edx
c010472f:       89 d0                   mov    %edx,%eax
c0104731:       c1 e0 02                shl    $0x2,%eax
c0104734:       01 d0                   add    %edx,%eax
c0104736:       c1 e0 02                shl    $0x2,%eax
c0104739:       89 c2                   mov    %eax,%edx
c010473b:       8b 45 f4                mov    -0xc(%ebp),%eax
c010473e:       01 d0                   add    %edx,%eax
c0104740:       89 45 e8                mov    %eax,-0x18(%ebp)
            pn->property = page->property - n;
c0104743:       8b 45 f4                mov    -0xc(%ebp),%eax
c0104746:       8b 40 08                mov    0x8(%eax),%eax
c0104749:       2b 45 08                sub    0x8(%ebp),%eax
c010474c:       89 c2                   mov    %eax,%edx
c010474e:       8b 45 e8                mov    -0x18(%ebp),%eax
c0104751:       89 50 08                mov    %edx,0x8(%eax)
            SetPageProperty(pn);
c0104754:       8b 45 e8                mov    -0x18(%ebp),%eax
c0104757:       83 c0 04                add    $0x4,%eax
c010475a:       c7 45 e0 01 00 00 00    movl   $0x1,-0x20(%ebp)
c0104761:       89 45 dc                mov    %eax,-0x24(%ebp)
c0104764:       8b 45 dc                mov    -0x24(%ebp),%eax
c0104767:       8b 55 e0                mov    -0x20(%ebp),%edx
c010476a:       0f ab 10                bts    %edx,(%eax)
            list_add_after(&page->page_link, &pn->page_link);
c010476d:       8b 45 e8                mov    -0x18(%ebp),%eax
c0104770:       83 c0 0c                add    $0xc,%eax
c0104773:       8b 55 f4                mov    -0xc(%ebp),%edx
c0104776:       83 c2 0c                add    $0xc,%edx
c0104779:       89 55 d8                mov    %edx,-0x28(%ebp)
c010477c:       89 45 d4                mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010477f:       8b 45 d8                mov    -0x28(%ebp),%eax
c0104782:       8b 40 04                mov    0x4(%eax),%eax
c0104785:       8b 55 d4                mov    -0x2c(%ebp),%edx
c0104788:       89 55 d0                mov    %edx,-0x30(%ebp)
c010478b:       8b 55 d8                mov    -0x28(%ebp),%edx
c010478e:       89 55 cc                mov    %edx,-0x34(%ebp)
c0104791:       89 45 c8                mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0104794:       8b 45 c8                mov    -0x38(%ebp),%eax
c0104797:       8b 55 d0                mov    -0x30(%ebp),%edx
c010479a:       89 10                   mov    %edx,(%eax)
c010479c:       8b 45 c8                mov    -0x38(%ebp),%eax
c010479f:       8b 10                   mov    (%eax),%edx
c01047a1:       8b 45 cc                mov    -0x34(%ebp),%eax
c01047a4:       89 50 04                mov    %edx,0x4(%eax)
    elm->next = next;
c01047a7:       8b 45 d0                mov    -0x30(%ebp),%eax
c01047aa:       8b 55 c8                mov    -0x38(%ebp),%edx
c01047ad:       89 50 04                mov    %edx,0x4(%eax)
    elm->prev = prev;
c01047b0:       8b 45 d0                mov    -0x30(%ebp),%eax
c01047b3:       8b 55 cc                mov    -0x34(%ebp),%edx
c01047b6:       89 10                   mov    %edx,(%eax)
        }

        ClearPageProperty(page);
c01047b8:       8b 45 f4                mov    -0xc(%ebp),%eax
c01047bb:       83 c0 04                add    $0x4,%eax
c01047be:       c7 45 c4 01 00 00 00    movl   $0x1,-0x3c(%ebp)
c01047c5:       89 45 c0                mov    %eax,-0x40(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01047c8:       8b 45 c0                mov    -0x40(%ebp),%eax
c01047cb:       8b 55 c4                mov    -0x3c(%ebp),%edx
c01047ce:       0f b3 10                btr    %edx,(%eax)
        nr_free -= n;
c01047d1:       a1 c4 c9 10 c0          mov    0xc010c9c4,%eax
c01047d6:       2b 45 08                sub    0x8(%ebp),%eax
c01047d9:       a3 c4 c9 10 c0          mov    %eax,0xc010c9c4
        list_del(&page->page_link);
c01047de:       8b 45 f4                mov    -0xc(%ebp),%eax
c01047e1:       83 c0 0c                add    $0xc,%eax
c01047e4:       89 45 bc                mov    %eax,-0x44(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01047e7:       8b 45 bc                mov    -0x44(%ebp),%eax
c01047ea:       8b 40 04                mov    0x4(%eax),%eax
c01047ed:       8b 55 bc                mov    -0x44(%ebp),%edx
c01047f0:       8b 12                   mov    (%edx),%edx
c01047f2:       89 55 b8                mov    %edx,-0x48(%ebp)
c01047f5:       89 45 b4                mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01047f8:       8b 45 b8                mov    -0x48(%ebp),%eax
c01047fb:       8b 55 b4                mov    -0x4c(%ebp),%edx
c01047fe:       89 50 04                mov    %edx,0x4(%eax)
    next->prev = prev;
c0104801:       8b 45 b4                mov    -0x4c(%ebp),%eax
c0104804:       8b 55 b8                mov    -0x48(%ebp),%edx
c0104807:       89 10                   mov    %edx,(%eax)
    }

    return page;
c0104809:       8b 45 f4                mov    -0xc(%ebp),%eax
}
c010480c:       c9                      leave
c010480d:       c3                      ret

c010480e <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c010480e:       55                      push   %ebp
c010480f:       89 e5                   mov    %esp,%ebp
c0104811:       81 ec 98 00 00 00       sub    $0x98,%esp
    // 2.3 可能在尾部或者某两个之间
    // 2.4 对应的物理页地址没有问题的情况下插入到空闲链表中
    // 3、可能刚好应该插入的头的情况

    // 先做一些处理（设置flags, ref, 页链表头的property等）
    assert(n > 0);
c0104817:       83 7d 0c 00             cmpl   $0x0,0xc(%ebp)
c010481b:       75 24                   jne    c0104841 <default_free_pages+0x33>
c010481d:       c7 44 24 0c 78 7b 10    movl   $0xc0107b78,0xc(%esp)
c0104824:       c0
c0104825:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c010482c:       c0
c010482d:       c7 44 24 04 97 00 00    movl   $0x97,0x4(%esp)
c0104834:       00
c0104835:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c010483c:       e8 fc bb ff ff          call   c010043d <__panic>
    struct Page *p = base;
c0104841:       8b 45 08                mov    0x8(%ebp),%eax
c0104844:       89 45 f4                mov    %eax,-0xc(%ebp)
    for (; p != base + n; p++) {
c0104847:       e9 9d 00 00 00          jmp    c01048e9 <default_free_pages+0xdb>
        assert(!PageReserved(p) && !PageProperty(p));
c010484c:       8b 45 f4                mov    -0xc(%ebp),%eax
c010484f:       83 c0 04                add    $0x4,%eax
c0104852:       c7 45 e4 00 00 00 00    movl   $0x0,-0x1c(%ebp)
c0104859:       89 45 e0                mov    %eax,-0x20(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010485c:       8b 45 e0                mov    -0x20(%ebp),%eax
c010485f:       8b 55 e4                mov    -0x1c(%ebp),%edx
c0104862:       0f a3 10                bt     %edx,(%eax)
c0104865:       19 c0                   sbb    %eax,%eax
c0104867:       89 45 dc                mov    %eax,-0x24(%ebp)
    return oldbit != 0;
c010486a:       83 7d dc 00             cmpl   $0x0,-0x24(%ebp)
c010486e:       0f 95 c0                setne  %al
c0104871:       0f b6 c0                movzbl %al,%eax
c0104874:       85 c0                   test   %eax,%eax
c0104876:       75 2c                   jne    c01048a4 <default_free_pages+0x96>
c0104878:       8b 45 f4                mov    -0xc(%ebp),%eax
c010487b:       83 c0 04                add    $0x4,%eax
c010487e:       c7 45 d8 01 00 00 00    movl   $0x1,-0x28(%ebp)
c0104885:       89 45 d4                mov    %eax,-0x2c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104888:       8b 45 d4                mov    -0x2c(%ebp),%eax
c010488b:       8b 55 d8                mov    -0x28(%ebp),%edx
c010488e:       0f a3 10                bt     %edx,(%eax)
c0104891:       19 c0                   sbb    %eax,%eax
c0104893:       89 45 d0                mov    %eax,-0x30(%ebp)
    return oldbit != 0;
c0104896:       83 7d d0 00             cmpl   $0x0,-0x30(%ebp)
c010489a:       0f 95 c0                setne  %al
c010489d:       0f b6 c0                movzbl %al,%eax
c01048a0:       85 c0                   test   %eax,%eax
c01048a2:       74 24                   je     c01048c8 <default_free_pages+0xba>
c01048a4:       c7 44 24 0c bc 7b 10    movl   $0xc0107bbc,0xc(%esp)
c01048ab:       c0
c01048ac:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01048b3:       c0
c01048b4:       c7 44 24 04 9a 00 00    movl   $0x9a,0x4(%esp)
c01048bb:       00
c01048bc:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c01048c3:       e8 75 bb ff ff          call   c010043d <__panic>
        p->flags = 0;
c01048c8:       8b 45 f4                mov    -0xc(%ebp),%eax
c01048cb:       c7 40 04 00 00 00 00    movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c01048d2:       c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)
c01048d9:       00
c01048da:       8b 45 f4                mov    -0xc(%ebp),%eax
c01048dd:       89 04 24                mov    %eax,(%esp)
c01048e0:       e8 11 fc ff ff          call   c01044f6 <set_page_ref>
    // 3、可能刚好应该插入的头的情况

    // 先做一些处理（设置flags, ref, 页链表头的property等）
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p++) {
c01048e5:       83 45 f4 14             addl   $0x14,-0xc(%ebp)
c01048e9:       8b 55 0c                mov    0xc(%ebp),%edx
c01048ec:       89 d0                   mov    %edx,%eax
c01048ee:       c1 e0 02                shl    $0x2,%eax
c01048f1:       01 d0                   add    %edx,%eax
c01048f3:       c1 e0 02                shl    $0x2,%eax
c01048f6:       89 c2                   mov    %eax,%edx
c01048f8:       8b 45 08                mov    0x8(%ebp),%eax
c01048fb:       01 d0                   add    %edx,%eax
c01048fd:       3b 45 f4                cmp    -0xc(%ebp),%eax
c0104900:       0f 85 46 ff ff ff       jne    c010484c <default_free_pages+0x3e>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0104906:       8b 45 08                mov    0x8(%ebp),%eax
c0104909:       8b 55 0c                mov    0xc(%ebp),%edx
c010490c:       89 50 08                mov    %edx,0x8(%eax)
    SetPageProperty(base);
c010490f:       8b 45 08                mov    0x8(%ebp),%eax
c0104912:       83 c0 04                add    $0x4,%eax
c0104915:       c7 45 cc 01 00 00 00    movl   $0x1,-0x34(%ebp)
c010491c:       89 45 c8                mov    %eax,-0x38(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010491f:       8b 45 c8                mov    -0x38(%ebp),%eax
c0104922:       8b 55 cc                mov    -0x34(%ebp),%edx
c0104925:       0f ab 10                bts    %edx,(%eax)

    struct Page *t = base + base->property;
c0104928:       8b 45 08                mov    0x8(%ebp),%eax
c010492b:       8b 50 08                mov    0x8(%eax),%edx
c010492e:       89 d0                   mov    %edx,%eax
c0104930:       c1 e0 02                shl    $0x2,%eax
c0104933:       01 d0                   add    %edx,%eax
c0104935:       c1 e0 02                shl    $0x2,%eax
c0104938:       89 c2                   mov    %eax,%edx
c010493a:       8b 45 08                mov    0x8(%ebp),%eax
c010493d:       01 d0                   add    %edx,%eax
c010493f:       89 45 e8                mov    %eax,-0x18(%ebp)
    // 再往合适的位置（free_list）插
    int i = 0;
c0104942:       c7 45 f0 00 00 00 00    movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0104949:       c7 45 ec bc c9 10 c0    movl   $0xc010c9bc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104950:       e9 fb 00 00 00          jmp    c0104a50 <default_free_pages+0x242>
        p = le2page(le, page_link);
c0104955:       8b 45 ec                mov    -0x14(%ebp),%eax
c0104958:       83 e8 0c                sub    $0xc,%eax
c010495b:       89 45 f4                mov    %eax,-0xc(%ebp)
        i++;
c010495e:       83 45 f0 01             addl   $0x1,-0x10(%ebp)
        // 刚好在前面
        // 两个if不能直接break，因为可能存在
        // p + p->property = base， 下一个链表
        // base + base->property = p(next le)
        if (base + base->property == p) {
c0104962:       8b 45 08                mov    0x8(%ebp),%eax
c0104965:       8b 50 08                mov    0x8(%eax),%edx
c0104968:       89 d0                   mov    %edx,%eax
c010496a:       c1 e0 02                shl    $0x2,%eax
c010496d:       01 d0                   add    %edx,%eax
c010496f:       c1 e0 02                shl    $0x2,%eax
c0104972:       89 c2                   mov    %eax,%edx
c0104974:       8b 45 08                mov    0x8(%ebp),%eax
c0104977:       01 d0                   add    %edx,%eax
c0104979:       3b 45 f4                cmp    -0xc(%ebp),%eax
c010497c:       75 58                   jne    c01049d6 <default_free_pages+0x1c8>
            base->property += p->property;
c010497e:       8b 45 08                mov    0x8(%ebp),%eax
c0104981:       8b 50 08                mov    0x8(%eax),%edx
c0104984:       8b 45 f4                mov    -0xc(%ebp),%eax
c0104987:       8b 40 08                mov    0x8(%eax),%eax
c010498a:       01 c2                   add    %eax,%edx
c010498c:       8b 45 08                mov    0x8(%ebp),%eax
c010498f:       89 50 08                mov    %edx,0x8(%eax)
            // tempP不是头
            ClearPageProperty(p);
c0104992:       8b 45 f4                mov    -0xc(%ebp),%eax
c0104995:       83 c0 04                add    $0x4,%eax
c0104998:       c7 45 c4 01 00 00 00    movl   $0x1,-0x3c(%ebp)
c010499f:       89 45 c0                mov    %eax,-0x40(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01049a2:       8b 45 c0                mov    -0x40(%ebp),%eax
c01049a5:       8b 55 c4                mov    -0x3c(%ebp),%edx
c01049a8:       0f b3 10                btr    %edx,(%eax)
            list_del(&(p->page_link));
c01049ab:       8b 45 f4                mov    -0xc(%ebp),%eax
c01049ae:       83 c0 0c                add    $0xc,%eax
c01049b1:       89 45 bc                mov    %eax,-0x44(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01049b4:       8b 45 bc                mov    -0x44(%ebp),%eax
c01049b7:       8b 40 04                mov    0x4(%eax),%eax
c01049ba:       8b 55 bc                mov    -0x44(%ebp),%edx
c01049bd:       8b 12                   mov    (%edx),%edx
c01049bf:       89 55 b8                mov    %edx,-0x48(%ebp)
c01049c2:       89 45 b4                mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01049c5:       8b 45 b8                mov    -0x48(%ebp),%eax
c01049c8:       8b 55 b4                mov    -0x4c(%ebp),%edx
c01049cb:       89 50 04                mov    %edx,0x4(%eax)
    next->prev = prev;
c01049ce:       8b 45 b4                mov    -0x4c(%ebp),%eax
c01049d1:       8b 55 b8                mov    -0x48(%ebp),%edx
c01049d4:       89 10                   mov    %edx,(%eax)
        }
        // 刚好在后面
        if (p + p->property == base) {
c01049d6:       8b 45 f4                mov    -0xc(%ebp),%eax
c01049d9:       8b 50 08                mov    0x8(%eax),%edx
c01049dc:       89 d0                   mov    %edx,%eax
c01049de:       c1 e0 02                shl    $0x2,%eax
c01049e1:       01 d0                   add    %edx,%eax
c01049e3:       c1 e0 02                shl    $0x2,%eax
c01049e6:       89 c2                   mov    %eax,%edx
c01049e8:       8b 45 f4                mov    -0xc(%ebp),%eax
c01049eb:       01 d0                   add    %edx,%eax
c01049ed:       3b 45 08                cmp    0x8(%ebp),%eax
c01049f0:       75 5e                   jne    c0104a50 <default_free_pages+0x242>
            p->property += base->property;
c01049f2:       8b 45 f4                mov    -0xc(%ebp),%eax
c01049f5:       8b 50 08                mov    0x8(%eax),%edx
c01049f8:       8b 45 08                mov    0x8(%ebp),%eax
c01049fb:       8b 40 08                mov    0x8(%eax),%eax
c01049fe:       01 c2                   add    %eax,%edx
c0104a00:       8b 45 f4                mov    -0xc(%ebp),%eax
c0104a03:       89 50 08                mov    %edx,0x8(%eax)
            ClearPageProperty(base);
c0104a06:       8b 45 08                mov    0x8(%ebp),%eax
c0104a09:       83 c0 04                add    $0x4,%eax
c0104a0c:       c7 45 b0 01 00 00 00    movl   $0x1,-0x50(%ebp)
c0104a13:       89 45 ac                mov    %eax,-0x54(%ebp)
c0104a16:       8b 45 ac                mov    -0x54(%ebp),%eax
c0104a19:       8b 55 b0                mov    -0x50(%ebp),%edx
c0104a1c:       0f b3 10                btr    %edx,(%eax)
            base = p;
c0104a1f:       8b 45 f4                mov    -0xc(%ebp),%eax
c0104a22:       89 45 08                mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c0104a25:       8b 45 f4                mov    -0xc(%ebp),%eax
c0104a28:       83 c0 0c                add    $0xc,%eax
c0104a2b:       89 45 a8                mov    %eax,-0x58(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104a2e:       8b 45 a8                mov    -0x58(%ebp),%eax
c0104a31:       8b 40 04                mov    0x4(%eax),%eax
c0104a34:       8b 55 a8                mov    -0x58(%ebp),%edx
c0104a37:       8b 12                   mov    (%edx),%edx
c0104a39:       89 55 a4                mov    %edx,-0x5c(%ebp)
c0104a3c:       89 45 a0                mov    %eax,-0x60(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104a3f:       8b 45 a4                mov    -0x5c(%ebp),%eax
c0104a42:       8b 55 a0                mov    -0x60(%ebp),%edx
c0104a45:       89 50 04                mov    %edx,0x4(%eax)
    next->prev = prev;
c0104a48:       8b 45 a0                mov    -0x60(%ebp),%eax
c0104a4b:       8b 55 a4                mov    -0x5c(%ebp),%edx
c0104a4e:       89 10                   mov    %edx,(%eax)
c0104a50:       8b 45 ec                mov    -0x14(%ebp),%eax
c0104a53:       89 45 9c                mov    %eax,-0x64(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104a56:       8b 45 9c                mov    -0x64(%ebp),%eax
c0104a59:       8b 40 04                mov    0x4(%eax),%eax

    struct Page *t = base + base->property;
    // 再往合适的位置（free_list）插
    int i = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104a5c:       89 45 ec                mov    %eax,-0x14(%ebp)
c0104a5f:       81 7d ec bc c9 10 c0    cmpl   $0xc010c9bc,-0x14(%ebp)
c0104a66:       0f 85 e9 fe ff ff       jne    c0104955 <default_free_pages+0x147>
            base = p;
            list_del(&(p->page_link));
        }

    }
    le = &free_list;
c0104a6c:       c7 45 ec bc c9 10 c0    movl   $0xc010c9bc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104a73:       eb 67                   jmp    c0104adc <default_free_pages+0x2ce>
        // 在中间(前插，即找到比base地址大的，插入前面)
        p = le2page(le, page_link);
c0104a75:       8b 45 ec                mov    -0x14(%ebp),%eax
c0104a78:       83 e8 0c                sub    $0xc,%eax
c0104a7b:       89 45 f4                mov    %eax,-0xc(%ebp)
        if (base + base->property <= p) {
c0104a7e:       8b 45 08                mov    0x8(%ebp),%eax
c0104a81:       8b 50 08                mov    0x8(%eax),%edx
c0104a84:       89 d0                   mov    %edx,%eax
c0104a86:       c1 e0 02                shl    $0x2,%eax
c0104a89:       01 d0                   add    %edx,%eax
c0104a8b:       c1 e0 02                shl    $0x2,%eax
c0104a8e:       89 c2                   mov    %eax,%edx
c0104a90:       8b 45 08                mov    0x8(%ebp),%eax
c0104a93:       01 d0                   add    %edx,%eax
c0104a95:       3b 45 f4                cmp    -0xc(%ebp),%eax
c0104a98:       77 42                   ja     c0104adc <default_free_pages+0x2ce>
            assert(base + base->property != p);
c0104a9a:       8b 45 08                mov    0x8(%ebp),%eax
c0104a9d:       8b 50 08                mov    0x8(%eax),%edx
c0104aa0:       89 d0                   mov    %edx,%eax
c0104aa2:       c1 e0 02                shl    $0x2,%eax
c0104aa5:       01 d0                   add    %edx,%eax
c0104aa7:       c1 e0 02                shl    $0x2,%eax
c0104aaa:       89 c2                   mov    %eax,%edx
c0104aac:       8b 45 08                mov    0x8(%ebp),%eax
c0104aaf:       01 d0                   add    %edx,%eax
c0104ab1:       3b 45 f4                cmp    -0xc(%ebp),%eax
c0104ab4:       75 24                   jne    c0104ada <default_free_pages+0x2cc>
c0104ab6:       c7 44 24 0c e1 7b 10    movl   $0xc0107be1,0xc(%esp)
c0104abd:       c0
c0104abe:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104ac5:       c0
c0104ac6:       c7 44 24 04 c0 00 00    movl   $0xc0,0x4(%esp)
c0104acd:       00
c0104ace:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104ad5:       e8 63 b9 ff ff          call   c010043d <__panic>
            break;
c0104ada:       eb 18                   jmp    c0104af4 <default_free_pages+0x2e6>
c0104adc:       8b 45 ec                mov    -0x14(%ebp),%eax
c0104adf:       89 45 98                mov    %eax,-0x68(%ebp)
c0104ae2:       8b 45 98                mov    -0x68(%ebp),%eax
c0104ae5:       8b 40 04                mov    0x4(%eax),%eax
            list_del(&(p->page_link));
        }

    }
    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104ae8:       89 45 ec                mov    %eax,-0x14(%ebp)
c0104aeb:       81 7d ec bc c9 10 c0    cmpl   $0xc010c9bc,-0x14(%ebp)
c0104af2:       75 81                   jne    c0104a75 <default_free_pages+0x267>
            assert(base + base->property != p);
            break;
        }
    }

    list_add_before(le, &(base->page_link));
c0104af4:       8b 45 08                mov    0x8(%ebp),%eax
c0104af7:       8d 50 0c                lea    0xc(%eax),%edx
c0104afa:       8b 45 ec                mov    -0x14(%ebp),%eax
c0104afd:       89 45 94                mov    %eax,-0x6c(%ebp)
c0104b00:       89 55 90                mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0104b03:       8b 45 94                mov    -0x6c(%ebp),%eax
c0104b06:       8b 00                   mov    (%eax),%eax
c0104b08:       8b 55 90                mov    -0x70(%ebp),%edx
c0104b0b:       89 55 8c                mov    %edx,-0x74(%ebp)
c0104b0e:       89 45 88                mov    %eax,-0x78(%ebp)
c0104b11:       8b 45 94                mov    -0x6c(%ebp),%eax
c0104b14:       89 45 84                mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0104b17:       8b 45 84                mov    -0x7c(%ebp),%eax
c0104b1a:       8b 55 8c                mov    -0x74(%ebp),%edx
c0104b1d:       89 10                   mov    %edx,(%eax)
c0104b1f:       8b 45 84                mov    -0x7c(%ebp),%eax
c0104b22:       8b 10                   mov    (%eax),%edx
c0104b24:       8b 45 88                mov    -0x78(%ebp),%eax
c0104b27:       89 50 04                mov    %edx,0x4(%eax)
    elm->next = next;
c0104b2a:       8b 45 8c                mov    -0x74(%ebp),%eax
c0104b2d:       8b 55 84                mov    -0x7c(%ebp),%edx
c0104b30:       89 50 04                mov    %edx,0x4(%eax)
    elm->prev = prev;
c0104b33:       8b 45 8c                mov    -0x74(%ebp),%eax
c0104b36:       8b 55 88                mov    -0x78(%ebp),%edx
c0104b39:       89 10                   mov    %edx,(%eax)

    nr_free += n;
c0104b3b:       8b 15 c4 c9 10 c0       mov    0xc010c9c4,%edx
c0104b41:       8b 45 0c                mov    0xc(%ebp),%eax
c0104b44:       01 d0                   add    %edx,%eax
c0104b46:       a3 c4 c9 10 c0          mov    %eax,0xc010c9c4
}
c0104b4b:       c9                      leave
c0104b4c:       c3                      ret

c0104b4d <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0104b4d:       55                      push   %ebp
c0104b4e:       89 e5                   mov    %esp,%ebp
    return nr_free;
c0104b50:       a1 c4 c9 10 c0          mov    0xc010c9c4,%eax
}
c0104b55:       5d                      pop    %ebp
c0104b56:       c3                      ret

c0104b57 <basic_check>:

static void
basic_check(void) {
c0104b57:       55                      push   %ebp
c0104b58:       89 e5                   mov    %esp,%ebp
c0104b5a:       83 ec 48                sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0104b5d:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
c0104b64:       8b 45 f4                mov    -0xc(%ebp),%eax
c0104b67:       89 45 f0                mov    %eax,-0x10(%ebp)
c0104b6a:       8b 45 f0                mov    -0x10(%ebp),%eax
c0104b6d:       89 45 ec                mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0104b70:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c0104b77:       e8 df e1 ff ff          call   c0102d5b <alloc_pages>
c0104b7c:       89 45 ec                mov    %eax,-0x14(%ebp)
c0104b7f:       83 7d ec 00             cmpl   $0x0,-0x14(%ebp)
c0104b83:       75 24                   jne    c0104ba9 <basic_check+0x52>
c0104b85:       c7 44 24 0c fc 7b 10    movl   $0xc0107bfc,0xc(%esp)
c0104b8c:       c0
c0104b8d:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104b94:       c0
c0104b95:       c7 44 24 04 d3 00 00    movl   $0xd3,0x4(%esp)
c0104b9c:       00
c0104b9d:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104ba4:       e8 94 b8 ff ff          call   c010043d <__panic>
    assert((p1 = alloc_page()) != NULL);
c0104ba9:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c0104bb0:       e8 a6 e1 ff ff          call   c0102d5b <alloc_pages>
c0104bb5:       89 45 f0                mov    %eax,-0x10(%ebp)
c0104bb8:       83 7d f0 00             cmpl   $0x0,-0x10(%ebp)
c0104bbc:       75 24                   jne    c0104be2 <basic_check+0x8b>
c0104bbe:       c7 44 24 0c 18 7c 10    movl   $0xc0107c18,0xc(%esp)
c0104bc5:       c0
c0104bc6:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104bcd:       c0
c0104bce:       c7 44 24 04 d4 00 00    movl   $0xd4,0x4(%esp)
c0104bd5:       00
c0104bd6:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104bdd:       e8 5b b8 ff ff          call   c010043d <__panic>
    assert((p2 = alloc_page()) != NULL);
c0104be2:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c0104be9:       e8 6d e1 ff ff          call   c0102d5b <alloc_pages>
c0104bee:       89 45 f4                mov    %eax,-0xc(%ebp)
c0104bf1:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c0104bf5:       75 24                   jne    c0104c1b <basic_check+0xc4>
c0104bf7:       c7 44 24 0c 34 7c 10    movl   $0xc0107c34,0xc(%esp)
c0104bfe:       c0
c0104bff:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104c06:       c0
c0104c07:       c7 44 24 04 d5 00 00    movl   $0xd5,0x4(%esp)
c0104c0e:       00
c0104c0f:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104c16:       e8 22 b8 ff ff          call   c010043d <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0104c1b:       8b 45 ec                mov    -0x14(%ebp),%eax
c0104c1e:       3b 45 f0                cmp    -0x10(%ebp),%eax
c0104c21:       74 10                   je     c0104c33 <basic_check+0xdc>
c0104c23:       8b 45 ec                mov    -0x14(%ebp),%eax
c0104c26:       3b 45 f4                cmp    -0xc(%ebp),%eax
c0104c29:       74 08                   je     c0104c33 <basic_check+0xdc>
c0104c2b:       8b 45 f0                mov    -0x10(%ebp),%eax
c0104c2e:       3b 45 f4                cmp    -0xc(%ebp),%eax
c0104c31:       75 24                   jne    c0104c57 <basic_check+0x100>
c0104c33:       c7 44 24 0c 50 7c 10    movl   $0xc0107c50,0xc(%esp)
c0104c3a:       c0
c0104c3b:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104c42:       c0
c0104c43:       c7 44 24 04 d7 00 00    movl   $0xd7,0x4(%esp)
c0104c4a:       00
c0104c4b:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104c52:       e8 e6 b7 ff ff          call   c010043d <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0104c57:       8b 45 ec                mov    -0x14(%ebp),%eax
c0104c5a:       89 04 24                mov    %eax,(%esp)
c0104c5d:       e8 8a f8 ff ff          call   c01044ec <page_ref>
c0104c62:       85 c0                   test   %eax,%eax
c0104c64:       75 1e                   jne    c0104c84 <basic_check+0x12d>
c0104c66:       8b 45 f0                mov    -0x10(%ebp),%eax
c0104c69:       89 04 24                mov    %eax,(%esp)
c0104c6c:       e8 7b f8 ff ff          call   c01044ec <page_ref>
c0104c71:       85 c0                   test   %eax,%eax
c0104c73:       75 0f                   jne    c0104c84 <basic_check+0x12d>
c0104c75:       8b 45 f4                mov    -0xc(%ebp),%eax
c0104c78:       89 04 24                mov    %eax,(%esp)
c0104c7b:       e8 6c f8 ff ff          call   c01044ec <page_ref>
c0104c80:       85 c0                   test   %eax,%eax
c0104c82:       74 24                   je     c0104ca8 <basic_check+0x151>
c0104c84:       c7 44 24 0c 74 7c 10    movl   $0xc0107c74,0xc(%esp)
c0104c8b:       c0
c0104c8c:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104c93:       c0
c0104c94:       c7 44 24 04 d8 00 00    movl   $0xd8,0x4(%esp)
c0104c9b:       00
c0104c9c:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104ca3:       e8 95 b7 ff ff          call   c010043d <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0104ca8:       8b 45 ec                mov    -0x14(%ebp),%eax
c0104cab:       89 04 24                mov    %eax,(%esp)
c0104cae:       e8 23 f8 ff ff          call   c01044d6 <page2pa>
c0104cb3:       8b 15 c0 c8 10 c0       mov    0xc010c8c0,%edx
c0104cb9:       c1 e2 0c                shl    $0xc,%edx
c0104cbc:       39 d0                   cmp    %edx,%eax
c0104cbe:       72 24                   jb     c0104ce4 <basic_check+0x18d>
c0104cc0:       c7 44 24 0c b0 7c 10    movl   $0xc0107cb0,0xc(%esp)
c0104cc7:       c0
c0104cc8:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104ccf:       c0
c0104cd0:       c7 44 24 04 da 00 00    movl   $0xda,0x4(%esp)
c0104cd7:       00
c0104cd8:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104cdf:       e8 59 b7 ff ff          call   c010043d <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0104ce4:       8b 45 f0                mov    -0x10(%ebp),%eax
c0104ce7:       89 04 24                mov    %eax,(%esp)
c0104cea:       e8 e7 f7 ff ff          call   c01044d6 <page2pa>
c0104cef:       8b 15 c0 c8 10 c0       mov    0xc010c8c0,%edx
c0104cf5:       c1 e2 0c                shl    $0xc,%edx
c0104cf8:       39 d0                   cmp    %edx,%eax
c0104cfa:       72 24                   jb     c0104d20 <basic_check+0x1c9>
c0104cfc:       c7 44 24 0c cd 7c 10    movl   $0xc0107ccd,0xc(%esp)
c0104d03:       c0
c0104d04:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104d0b:       c0
c0104d0c:       c7 44 24 04 db 00 00    movl   $0xdb,0x4(%esp)
c0104d13:       00
c0104d14:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104d1b:       e8 1d b7 ff ff          call   c010043d <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0104d20:       8b 45 f4                mov    -0xc(%ebp),%eax
c0104d23:       89 04 24                mov    %eax,(%esp)
c0104d26:       e8 ab f7 ff ff          call   c01044d6 <page2pa>
c0104d2b:       8b 15 c0 c8 10 c0       mov    0xc010c8c0,%edx
c0104d31:       c1 e2 0c                shl    $0xc,%edx
c0104d34:       39 d0                   cmp    %edx,%eax
c0104d36:       72 24                   jb     c0104d5c <basic_check+0x205>
c0104d38:       c7 44 24 0c ea 7c 10    movl   $0xc0107cea,0xc(%esp)
c0104d3f:       c0
c0104d40:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104d47:       c0
c0104d48:       c7 44 24 04 dc 00 00    movl   $0xdc,0x4(%esp)
c0104d4f:       00
c0104d50:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104d57:       e8 e1 b6 ff ff          call   c010043d <__panic>

    list_entry_t free_list_store = free_list;
c0104d5c:       a1 bc c9 10 c0          mov    0xc010c9bc,%eax
c0104d61:       8b 15 c0 c9 10 c0       mov    0xc010c9c0,%edx
c0104d67:       89 45 d0                mov    %eax,-0x30(%ebp)
c0104d6a:       89 55 d4                mov    %edx,-0x2c(%ebp)
c0104d6d:       c7 45 e0 bc c9 10 c0    movl   $0xc010c9bc,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104d74:       8b 45 e0                mov    -0x20(%ebp),%eax
c0104d77:       8b 55 e0                mov    -0x20(%ebp),%edx
c0104d7a:       89 50 04                mov    %edx,0x4(%eax)
c0104d7d:       8b 45 e0                mov    -0x20(%ebp),%eax
c0104d80:       8b 50 04                mov    0x4(%eax),%edx
c0104d83:       8b 45 e0                mov    -0x20(%ebp),%eax
c0104d86:       89 10                   mov    %edx,(%eax)
c0104d88:       c7 45 dc bc c9 10 c0    movl   $0xc010c9bc,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0104d8f:       8b 45 dc                mov    -0x24(%ebp),%eax
c0104d92:       8b 40 04                mov    0x4(%eax),%eax
c0104d95:       39 45 dc                cmp    %eax,-0x24(%ebp)
c0104d98:       0f 94 c0                sete   %al
c0104d9b:       0f b6 c0                movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0104d9e:       85 c0                   test   %eax,%eax
c0104da0:       75 24                   jne    c0104dc6 <basic_check+0x26f>
c0104da2:       c7 44 24 0c 07 7d 10    movl   $0xc0107d07,0xc(%esp)
c0104da9:       c0
c0104daa:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104db1:       c0
c0104db2:       c7 44 24 04 e0 00 00    movl   $0xe0,0x4(%esp)
c0104db9:       00
c0104dba:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104dc1:       e8 77 b6 ff ff          call   c010043d <__panic>

    unsigned int nr_free_store = nr_free;
c0104dc6:       a1 c4 c9 10 c0          mov    0xc010c9c4,%eax
c0104dcb:       89 45 e8                mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0104dce:       c7 05 c4 c9 10 c0 00    movl   $0x0,0xc010c9c4
c0104dd5:       00 00 00

    assert(alloc_page() == NULL);
c0104dd8:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c0104ddf:       e8 77 df ff ff          call   c0102d5b <alloc_pages>
c0104de4:       85 c0                   test   %eax,%eax
c0104de6:       74 24                   je     c0104e0c <basic_check+0x2b5>
c0104de8:       c7 44 24 0c 1e 7d 10    movl   $0xc0107d1e,0xc(%esp)
c0104def:       c0
c0104df0:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104df7:       c0
c0104df8:       c7 44 24 04 e5 00 00    movl   $0xe5,0x4(%esp)
c0104dff:       00
c0104e00:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104e07:       e8 31 b6 ff ff          call   c010043d <__panic>

    free_page(p0);
c0104e0c:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c0104e13:       00
c0104e14:       8b 45 ec                mov    -0x14(%ebp),%eax
c0104e17:       89 04 24                mov    %eax,(%esp)
c0104e1a:       e8 74 df ff ff          call   c0102d93 <free_pages>
    free_page(p1);
c0104e1f:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c0104e26:       00
c0104e27:       8b 45 f0                mov    -0x10(%ebp),%eax
c0104e2a:       89 04 24                mov    %eax,(%esp)
c0104e2d:       e8 61 df ff ff          call   c0102d93 <free_pages>
    free_page(p2);
c0104e32:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c0104e39:       00
c0104e3a:       8b 45 f4                mov    -0xc(%ebp),%eax
c0104e3d:       89 04 24                mov    %eax,(%esp)
c0104e40:       e8 4e df ff ff          call   c0102d93 <free_pages>
    assert(nr_free == 3);
c0104e45:       a1 c4 c9 10 c0          mov    0xc010c9c4,%eax
c0104e4a:       83 f8 03                cmp    $0x3,%eax
c0104e4d:       74 24                   je     c0104e73 <basic_check+0x31c>
c0104e4f:       c7 44 24 0c 33 7d 10    movl   $0xc0107d33,0xc(%esp)
c0104e56:       c0
c0104e57:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104e5e:       c0
c0104e5f:       c7 44 24 04 ea 00 00    movl   $0xea,0x4(%esp)
c0104e66:       00
c0104e67:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104e6e:       e8 ca b5 ff ff          call   c010043d <__panic>

    assert((p0 = alloc_page()) != NULL);
c0104e73:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c0104e7a:       e8 dc de ff ff          call   c0102d5b <alloc_pages>
c0104e7f:       89 45 ec                mov    %eax,-0x14(%ebp)
c0104e82:       83 7d ec 00             cmpl   $0x0,-0x14(%ebp)
c0104e86:       75 24                   jne    c0104eac <basic_check+0x355>
c0104e88:       c7 44 24 0c fc 7b 10    movl   $0xc0107bfc,0xc(%esp)
c0104e8f:       c0
c0104e90:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104e97:       c0
c0104e98:       c7 44 24 04 ec 00 00    movl   $0xec,0x4(%esp)
c0104e9f:       00
c0104ea0:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104ea7:       e8 91 b5 ff ff          call   c010043d <__panic>
    assert((p1 = alloc_page()) != NULL);
c0104eac:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c0104eb3:       e8 a3 de ff ff          call   c0102d5b <alloc_pages>
c0104eb8:       89 45 f0                mov    %eax,-0x10(%ebp)
c0104ebb:       83 7d f0 00             cmpl   $0x0,-0x10(%ebp)
c0104ebf:       75 24                   jne    c0104ee5 <basic_check+0x38e>
c0104ec1:       c7 44 24 0c 18 7c 10    movl   $0xc0107c18,0xc(%esp)
c0104ec8:       c0
c0104ec9:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104ed0:       c0
c0104ed1:       c7 44 24 04 ed 00 00    movl   $0xed,0x4(%esp)
c0104ed8:       00
c0104ed9:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104ee0:       e8 58 b5 ff ff          call   c010043d <__panic>
    assert((p2 = alloc_page()) != NULL);
c0104ee5:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c0104eec:       e8 6a de ff ff          call   c0102d5b <alloc_pages>
c0104ef1:       89 45 f4                mov    %eax,-0xc(%ebp)
c0104ef4:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c0104ef8:       75 24                   jne    c0104f1e <basic_check+0x3c7>
c0104efa:       c7 44 24 0c 34 7c 10    movl   $0xc0107c34,0xc(%esp)
c0104f01:       c0
c0104f02:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104f09:       c0
c0104f0a:       c7 44 24 04 ee 00 00    movl   $0xee,0x4(%esp)
c0104f11:       00
c0104f12:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104f19:       e8 1f b5 ff ff          call   c010043d <__panic>

    assert(alloc_page() == NULL);
c0104f1e:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c0104f25:       e8 31 de ff ff          call   c0102d5b <alloc_pages>
c0104f2a:       85 c0                   test   %eax,%eax
c0104f2c:       74 24                   je     c0104f52 <basic_check+0x3fb>
c0104f2e:       c7 44 24 0c 1e 7d 10    movl   $0xc0107d1e,0xc(%esp)
c0104f35:       c0
c0104f36:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104f3d:       c0
c0104f3e:       c7 44 24 04 f0 00 00    movl   $0xf0,0x4(%esp)
c0104f45:       00
c0104f46:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104f4d:       e8 eb b4 ff ff          call   c010043d <__panic>

    free_page(p0);
c0104f52:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c0104f59:       00
c0104f5a:       8b 45 ec                mov    -0x14(%ebp),%eax
c0104f5d:       89 04 24                mov    %eax,(%esp)
c0104f60:       e8 2e de ff ff          call   c0102d93 <free_pages>
c0104f65:       c7 45 d8 bc c9 10 c0    movl   $0xc010c9bc,-0x28(%ebp)
c0104f6c:       8b 45 d8                mov    -0x28(%ebp),%eax
c0104f6f:       8b 40 04                mov    0x4(%eax),%eax
c0104f72:       39 45 d8                cmp    %eax,-0x28(%ebp)
c0104f75:       0f 94 c0                sete   %al
c0104f78:       0f b6 c0                movzbl %al,%eax
    assert(!list_empty(&free_list));
c0104f7b:       85 c0                   test   %eax,%eax
c0104f7d:       74 24                   je     c0104fa3 <basic_check+0x44c>
c0104f7f:       c7 44 24 0c 40 7d 10    movl   $0xc0107d40,0xc(%esp)
c0104f86:       c0
c0104f87:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104f8e:       c0
c0104f8f:       c7 44 24 04 f3 00 00    movl   $0xf3,0x4(%esp)
c0104f96:       00
c0104f97:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104f9e:       e8 9a b4 ff ff          call   c010043d <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0104fa3:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c0104faa:       e8 ac dd ff ff          call   c0102d5b <alloc_pages>
c0104faf:       89 45 e4                mov    %eax,-0x1c(%ebp)
c0104fb2:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0104fb5:       3b 45 ec                cmp    -0x14(%ebp),%eax
c0104fb8:       74 24                   je     c0104fde <basic_check+0x487>
c0104fba:       c7 44 24 0c 58 7d 10    movl   $0xc0107d58,0xc(%esp)
c0104fc1:       c0
c0104fc2:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104fc9:       c0
c0104fca:       c7 44 24 04 f6 00 00    movl   $0xf6,0x4(%esp)
c0104fd1:       00
c0104fd2:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0104fd9:       e8 5f b4 ff ff          call   c010043d <__panic>
    assert(alloc_page() == NULL);
c0104fde:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c0104fe5:       e8 71 dd ff ff          call   c0102d5b <alloc_pages>
c0104fea:       85 c0                   test   %eax,%eax
c0104fec:       74 24                   je     c0105012 <basic_check+0x4bb>
c0104fee:       c7 44 24 0c 1e 7d 10    movl   $0xc0107d1e,0xc(%esp)
c0104ff5:       c0
c0104ff6:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0104ffd:       c0
c0104ffe:       c7 44 24 04 f7 00 00    movl   $0xf7,0x4(%esp)
c0105005:       00
c0105006:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c010500d:       e8 2b b4 ff ff          call   c010043d <__panic>

    assert(nr_free == 0);
c0105012:       a1 c4 c9 10 c0          mov    0xc010c9c4,%eax
c0105017:       85 c0                   test   %eax,%eax
c0105019:       74 24                   je     c010503f <basic_check+0x4e8>
c010501b:       c7 44 24 0c 71 7d 10    movl   $0xc0107d71,0xc(%esp)
c0105022:       c0
c0105023:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c010502a:       c0
c010502b:       c7 44 24 04 f9 00 00    movl   $0xf9,0x4(%esp)
c0105032:       00
c0105033:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c010503a:       e8 fe b3 ff ff          call   c010043d <__panic>
    free_list = free_list_store;
c010503f:       8b 45 d0                mov    -0x30(%ebp),%eax
c0105042:       8b 55 d4                mov    -0x2c(%ebp),%edx
c0105045:       a3 bc c9 10 c0          mov    %eax,0xc010c9bc
c010504a:       89 15 c0 c9 10 c0       mov    %edx,0xc010c9c0
    nr_free = nr_free_store;
c0105050:       8b 45 e8                mov    -0x18(%ebp),%eax
c0105053:       a3 c4 c9 10 c0          mov    %eax,0xc010c9c4

    free_page(p);
c0105058:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c010505f:       00
c0105060:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0105063:       89 04 24                mov    %eax,(%esp)
c0105066:       e8 28 dd ff ff          call   c0102d93 <free_pages>
    free_page(p1);
c010506b:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c0105072:       00
c0105073:       8b 45 f0                mov    -0x10(%ebp),%eax
c0105076:       89 04 24                mov    %eax,(%esp)
c0105079:       e8 15 dd ff ff          call   c0102d93 <free_pages>
    free_page(p2);
c010507e:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c0105085:       00
c0105086:       8b 45 f4                mov    -0xc(%ebp),%eax
c0105089:       89 04 24                mov    %eax,(%esp)
c010508c:       e8 02 dd ff ff          call   c0102d93 <free_pages>
}
c0105091:       c9                      leave
c0105092:       c3                      ret

c0105093 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1)
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0105093:       55                      push   %ebp
c0105094:       89 e5                   mov    %esp,%ebp
c0105096:       53                      push   %ebx
c0105097:       81 ec 94 00 00 00       sub    $0x94,%esp
    int count = 0, total = 0;
c010509d:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
c01050a4:       c7 45 f0 00 00 00 00    movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c01050ab:       c7 45 ec bc c9 10 c0    movl   $0xc010c9bc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01050b2:       eb 6b                   jmp    c010511f <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c01050b4:       8b 45 ec                mov    -0x14(%ebp),%eax
c01050b7:       83 e8 0c                sub    $0xc,%eax
c01050ba:       89 45 e8                mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c01050bd:       8b 45 e8                mov    -0x18(%ebp),%eax
c01050c0:       83 c0 04                add    $0x4,%eax
c01050c3:       c7 45 d0 01 00 00 00    movl   $0x1,-0x30(%ebp)
c01050ca:       89 45 cc                mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01050cd:       8b 45 cc                mov    -0x34(%ebp),%eax
c01050d0:       8b 55 d0                mov    -0x30(%ebp),%edx
c01050d3:       0f a3 10                bt     %edx,(%eax)
c01050d6:       19 c0                   sbb    %eax,%eax
c01050d8:       89 45 c8                mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c01050db:       83 7d c8 00             cmpl   $0x0,-0x38(%ebp)
c01050df:       0f 95 c0                setne  %al
c01050e2:       0f b6 c0                movzbl %al,%eax
c01050e5:       85 c0                   test   %eax,%eax
c01050e7:       75 24                   jne    c010510d <default_check+0x7a>
c01050e9:       c7 44 24 0c 7e 7d 10    movl   $0xc0107d7e,0xc(%esp)
c01050f0:       c0
c01050f1:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01050f8:       c0
c01050f9:       c7 44 24 04 0a 01 00    movl   $0x10a,0x4(%esp)
c0105100:       00
c0105101:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0105108:       e8 30 b3 ff ff          call   c010043d <__panic>
        count ++, total += p->property;
c010510d:       83 45 f4 01             addl   $0x1,-0xc(%ebp)
c0105111:       8b 45 e8                mov    -0x18(%ebp),%eax
c0105114:       8b 50 08                mov    0x8(%eax),%edx
c0105117:       8b 45 f0                mov    -0x10(%ebp),%eax
c010511a:       01 d0                   add    %edx,%eax
c010511c:       89 45 f0                mov    %eax,-0x10(%ebp)
c010511f:       8b 45 ec                mov    -0x14(%ebp),%eax
c0105122:       89 45 c4                mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105125:       8b 45 c4                mov    -0x3c(%ebp),%eax
c0105128:       8b 40 04                mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010512b:       89 45 ec                mov    %eax,-0x14(%ebp)
c010512e:       81 7d ec bc c9 10 c0    cmpl   $0xc010c9bc,-0x14(%ebp)
c0105135:       0f 85 79 ff ff ff       jne    c01050b4 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c010513b:       8b 5d f0                mov    -0x10(%ebp),%ebx
c010513e:       e8 82 dc ff ff          call   c0102dc5 <nr_free_pages>
c0105143:       39 c3                   cmp    %eax,%ebx
c0105145:       74 24                   je     c010516b <default_check+0xd8>
c0105147:       c7 44 24 0c 8e 7d 10    movl   $0xc0107d8e,0xc(%esp)
c010514e:       c0
c010514f:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0105156:       c0
c0105157:       c7 44 24 04 0d 01 00    movl   $0x10d,0x4(%esp)
c010515e:       00
c010515f:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0105166:       e8 d2 b2 ff ff          call   c010043d <__panic>

    basic_check();
c010516b:       e8 e7 f9 ff ff          call   c0104b57 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0105170:       c7 04 24 05 00 00 00    movl   $0x5,(%esp)
c0105177:       e8 df db ff ff          call   c0102d5b <alloc_pages>
c010517c:       89 45 e4                mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c010517f:       83 7d e4 00             cmpl   $0x0,-0x1c(%ebp)
c0105183:       75 24                   jne    c01051a9 <default_check+0x116>
c0105185:       c7 44 24 0c a7 7d 10    movl   $0xc0107da7,0xc(%esp)
c010518c:       c0
c010518d:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0105194:       c0
c0105195:       c7 44 24 04 12 01 00    movl   $0x112,0x4(%esp)
c010519c:       00
c010519d:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c01051a4:       e8 94 b2 ff ff          call   c010043d <__panic>
    assert(!PageProperty(p0));
c01051a9:       8b 45 e4                mov    -0x1c(%ebp),%eax
c01051ac:       83 c0 04                add    $0x4,%eax
c01051af:       c7 45 c0 01 00 00 00    movl   $0x1,-0x40(%ebp)
c01051b6:       89 45 bc                mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01051b9:       8b 45 bc                mov    -0x44(%ebp),%eax
c01051bc:       8b 55 c0                mov    -0x40(%ebp),%edx
c01051bf:       0f a3 10                bt     %edx,(%eax)
c01051c2:       19 c0                   sbb    %eax,%eax
c01051c4:       89 45 b8                mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c01051c7:       83 7d b8 00             cmpl   $0x0,-0x48(%ebp)
c01051cb:       0f 95 c0                setne  %al
c01051ce:       0f b6 c0                movzbl %al,%eax
c01051d1:       85 c0                   test   %eax,%eax
c01051d3:       74 24                   je     c01051f9 <default_check+0x166>
c01051d5:       c7 44 24 0c b2 7d 10    movl   $0xc0107db2,0xc(%esp)
c01051dc:       c0
c01051dd:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01051e4:       c0
c01051e5:       c7 44 24 04 13 01 00    movl   $0x113,0x4(%esp)
c01051ec:       00
c01051ed:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c01051f4:       e8 44 b2 ff ff          call   c010043d <__panic>

    list_entry_t free_list_store = free_list;
c01051f9:       a1 bc c9 10 c0          mov    0xc010c9bc,%eax
c01051fe:       8b 15 c0 c9 10 c0       mov    0xc010c9c0,%edx
c0105204:       89 45 80                mov    %eax,-0x80(%ebp)
c0105207:       89 55 84                mov    %edx,-0x7c(%ebp)
c010520a:       c7 45 b4 bc c9 10 c0    movl   $0xc010c9bc,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105211:       8b 45 b4                mov    -0x4c(%ebp),%eax
c0105214:       8b 55 b4                mov    -0x4c(%ebp),%edx
c0105217:       89 50 04                mov    %edx,0x4(%eax)
c010521a:       8b 45 b4                mov    -0x4c(%ebp),%eax
c010521d:       8b 50 04                mov    0x4(%eax),%edx
c0105220:       8b 45 b4                mov    -0x4c(%ebp),%eax
c0105223:       89 10                   mov    %edx,(%eax)
c0105225:       c7 45 b0 bc c9 10 c0    movl   $0xc010c9bc,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010522c:       8b 45 b0                mov    -0x50(%ebp),%eax
c010522f:       8b 40 04                mov    0x4(%eax),%eax
c0105232:       39 45 b0                cmp    %eax,-0x50(%ebp)
c0105235:       0f 94 c0                sete   %al
c0105238:       0f b6 c0                movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c010523b:       85 c0                   test   %eax,%eax
c010523d:       75 24                   jne    c0105263 <default_check+0x1d0>
c010523f:       c7 44 24 0c 07 7d 10    movl   $0xc0107d07,0xc(%esp)
c0105246:       c0
c0105247:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c010524e:       c0
c010524f:       c7 44 24 04 17 01 00    movl   $0x117,0x4(%esp)
c0105256:       00
c0105257:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c010525e:       e8 da b1 ff ff          call   c010043d <__panic>
    assert(alloc_page() == NULL);
c0105263:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c010526a:       e8 ec da ff ff          call   c0102d5b <alloc_pages>
c010526f:       85 c0                   test   %eax,%eax
c0105271:       74 24                   je     c0105297 <default_check+0x204>
c0105273:       c7 44 24 0c 1e 7d 10    movl   $0xc0107d1e,0xc(%esp)
c010527a:       c0
c010527b:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0105282:       c0
c0105283:       c7 44 24 04 18 01 00    movl   $0x118,0x4(%esp)
c010528a:       00
c010528b:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0105292:       e8 a6 b1 ff ff          call   c010043d <__panic>

    unsigned int nr_free_store = nr_free;
c0105297:       a1 c4 c9 10 c0          mov    0xc010c9c4,%eax
c010529c:       89 45 e0                mov    %eax,-0x20(%ebp)
    nr_free = 0;
c010529f:       c7 05 c4 c9 10 c0 00    movl   $0x0,0xc010c9c4
c01052a6:       00 00 00

    free_pages(p0 + 2, 3);
c01052a9:       8b 45 e4                mov    -0x1c(%ebp),%eax
c01052ac:       83 c0 28                add    $0x28,%eax
c01052af:       c7 44 24 04 03 00 00    movl   $0x3,0x4(%esp)
c01052b6:       00
c01052b7:       89 04 24                mov    %eax,(%esp)
c01052ba:       e8 d4 da ff ff          call   c0102d93 <free_pages>
    assert(alloc_pages(4) == NULL);
c01052bf:       c7 04 24 04 00 00 00    movl   $0x4,(%esp)
c01052c6:       e8 90 da ff ff          call   c0102d5b <alloc_pages>
c01052cb:       85 c0                   test   %eax,%eax
c01052cd:       74 24                   je     c01052f3 <default_check+0x260>
c01052cf:       c7 44 24 0c c4 7d 10    movl   $0xc0107dc4,0xc(%esp)
c01052d6:       c0
c01052d7:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01052de:       c0
c01052df:       c7 44 24 04 1e 01 00    movl   $0x11e,0x4(%esp)
c01052e6:       00
c01052e7:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c01052ee:       e8 4a b1 ff ff          call   c010043d <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01052f3:       8b 45 e4                mov    -0x1c(%ebp),%eax
c01052f6:       83 c0 28                add    $0x28,%eax
c01052f9:       83 c0 04                add    $0x4,%eax
c01052fc:       c7 45 ac 01 00 00 00    movl   $0x1,-0x54(%ebp)
c0105303:       89 45 a8                mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105306:       8b 45 a8                mov    -0x58(%ebp),%eax
c0105309:       8b 55 ac                mov    -0x54(%ebp),%edx
c010530c:       0f a3 10                bt     %edx,(%eax)
c010530f:       19 c0                   sbb    %eax,%eax
c0105311:       89 45 a4                mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c0105314:       83 7d a4 00             cmpl   $0x0,-0x5c(%ebp)
c0105318:       0f 95 c0                setne  %al
c010531b:       0f b6 c0                movzbl %al,%eax
c010531e:       85 c0                   test   %eax,%eax
c0105320:       74 0e                   je     c0105330 <default_check+0x29d>
c0105322:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0105325:       83 c0 28                add    $0x28,%eax
c0105328:       8b 40 08                mov    0x8(%eax),%eax
c010532b:       83 f8 03                cmp    $0x3,%eax
c010532e:       74 24                   je     c0105354 <default_check+0x2c1>
c0105330:       c7 44 24 0c dc 7d 10    movl   $0xc0107ddc,0xc(%esp)
c0105337:       c0
c0105338:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c010533f:       c0
c0105340:       c7 44 24 04 1f 01 00    movl   $0x11f,0x4(%esp)
c0105347:       00
c0105348:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c010534f:       e8 e9 b0 ff ff          call   c010043d <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0105354:       c7 04 24 03 00 00 00    movl   $0x3,(%esp)
c010535b:       e8 fb d9 ff ff          call   c0102d5b <alloc_pages>
c0105360:       89 45 dc                mov    %eax,-0x24(%ebp)
c0105363:       83 7d dc 00             cmpl   $0x0,-0x24(%ebp)
c0105367:       75 24                   jne    c010538d <default_check+0x2fa>
c0105369:       c7 44 24 0c 08 7e 10    movl   $0xc0107e08,0xc(%esp)
c0105370:       c0
c0105371:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0105378:       c0
c0105379:       c7 44 24 04 20 01 00    movl   $0x120,0x4(%esp)
c0105380:       00
c0105381:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0105388:       e8 b0 b0 ff ff          call   c010043d <__panic>
    assert(alloc_page() == NULL);
c010538d:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c0105394:       e8 c2 d9 ff ff          call   c0102d5b <alloc_pages>
c0105399:       85 c0                   test   %eax,%eax
c010539b:       74 24                   je     c01053c1 <default_check+0x32e>
c010539d:       c7 44 24 0c 1e 7d 10    movl   $0xc0107d1e,0xc(%esp)
c01053a4:       c0
c01053a5:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01053ac:       c0
c01053ad:       c7 44 24 04 21 01 00    movl   $0x121,0x4(%esp)
c01053b4:       00
c01053b5:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c01053bc:       e8 7c b0 ff ff          call   c010043d <__panic>
    assert(p0 + 2 == p1);
c01053c1:       8b 45 e4                mov    -0x1c(%ebp),%eax
c01053c4:       83 c0 28                add    $0x28,%eax
c01053c7:       3b 45 dc                cmp    -0x24(%ebp),%eax
c01053ca:       74 24                   je     c01053f0 <default_check+0x35d>
c01053cc:       c7 44 24 0c 26 7e 10    movl   $0xc0107e26,0xc(%esp)
c01053d3:       c0
c01053d4:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01053db:       c0
c01053dc:       c7 44 24 04 22 01 00    movl   $0x122,0x4(%esp)
c01053e3:       00
c01053e4:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c01053eb:       e8 4d b0 ff ff          call   c010043d <__panic>

    p2 = p0 + 1;
c01053f0:       8b 45 e4                mov    -0x1c(%ebp),%eax
c01053f3:       83 c0 14                add    $0x14,%eax
c01053f6:       89 45 d8                mov    %eax,-0x28(%ebp)
    free_page(p0);
c01053f9:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c0105400:       00
c0105401:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0105404:       89 04 24                mov    %eax,(%esp)
c0105407:       e8 87 d9 ff ff          call   c0102d93 <free_pages>
    free_pages(p1, 3);
c010540c:       c7 44 24 04 03 00 00    movl   $0x3,0x4(%esp)
c0105413:       00
c0105414:       8b 45 dc                mov    -0x24(%ebp),%eax
c0105417:       89 04 24                mov    %eax,(%esp)
c010541a:       e8 74 d9 ff ff          call   c0102d93 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c010541f:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0105422:       83 c0 04                add    $0x4,%eax
c0105425:       c7 45 a0 01 00 00 00    movl   $0x1,-0x60(%ebp)
c010542c:       89 45 9c                mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010542f:       8b 45 9c                mov    -0x64(%ebp),%eax
c0105432:       8b 55 a0                mov    -0x60(%ebp),%edx
c0105435:       0f a3 10                bt     %edx,(%eax)
c0105438:       19 c0                   sbb    %eax,%eax
c010543a:       89 45 98                mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c010543d:       83 7d 98 00             cmpl   $0x0,-0x68(%ebp)
c0105441:       0f 95 c0                setne  %al
c0105444:       0f b6 c0                movzbl %al,%eax
c0105447:       85 c0                   test   %eax,%eax
c0105449:       74 0b                   je     c0105456 <default_check+0x3c3>
c010544b:       8b 45 e4                mov    -0x1c(%ebp),%eax
c010544e:       8b 40 08                mov    0x8(%eax),%eax
c0105451:       83 f8 01                cmp    $0x1,%eax
c0105454:       74 24                   je     c010547a <default_check+0x3e7>
c0105456:       c7 44 24 0c 34 7e 10    movl   $0xc0107e34,0xc(%esp)
c010545d:       c0
c010545e:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c0105465:       c0
c0105466:       c7 44 24 04 27 01 00    movl   $0x127,0x4(%esp)
c010546d:       00
c010546e:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c0105475:       e8 c3 af ff ff          call   c010043d <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010547a:       8b 45 dc                mov    -0x24(%ebp),%eax
c010547d:       83 c0 04                add    $0x4,%eax
c0105480:       c7 45 94 01 00 00 00    movl   $0x1,-0x6c(%ebp)
c0105487:       89 45 90                mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010548a:       8b 45 90                mov    -0x70(%ebp),%eax
c010548d:       8b 55 94                mov    -0x6c(%ebp),%edx
c0105490:       0f a3 10                bt     %edx,(%eax)
c0105493:       19 c0                   sbb    %eax,%eax
c0105495:       89 45 8c                mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c0105498:       83 7d 8c 00             cmpl   $0x0,-0x74(%ebp)
c010549c:       0f 95 c0                setne  %al
c010549f:       0f b6 c0                movzbl %al,%eax
c01054a2:       85 c0                   test   %eax,%eax
c01054a4:       74 0b                   je     c01054b1 <default_check+0x41e>
c01054a6:       8b 45 dc                mov    -0x24(%ebp),%eax
c01054a9:       8b 40 08                mov    0x8(%eax),%eax
c01054ac:       83 f8 03                cmp    $0x3,%eax
c01054af:       74 24                   je     c01054d5 <default_check+0x442>
c01054b1:       c7 44 24 0c 5c 7e 10    movl   $0xc0107e5c,0xc(%esp)
c01054b8:       c0
c01054b9:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01054c0:       c0
c01054c1:       c7 44 24 04 28 01 00    movl   $0x128,0x4(%esp)
c01054c8:       00
c01054c9:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c01054d0:       e8 68 af ff ff          call   c010043d <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c01054d5:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c01054dc:       e8 7a d8 ff ff          call   c0102d5b <alloc_pages>
c01054e1:       89 45 e4                mov    %eax,-0x1c(%ebp)
c01054e4:       8b 45 d8                mov    -0x28(%ebp),%eax
c01054e7:       83 e8 14                sub    $0x14,%eax
c01054ea:       39 45 e4                cmp    %eax,-0x1c(%ebp)
c01054ed:       74 24                   je     c0105513 <default_check+0x480>
c01054ef:       c7 44 24 0c 82 7e 10    movl   $0xc0107e82,0xc(%esp)
c01054f6:       c0
c01054f7:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01054fe:       c0
c01054ff:       c7 44 24 04 2a 01 00    movl   $0x12a,0x4(%esp)
c0105506:       00
c0105507:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c010550e:       e8 2a af ff ff          call   c010043d <__panic>
    free_page(p0);
c0105513:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c010551a:       00
c010551b:       8b 45 e4                mov    -0x1c(%ebp),%eax
c010551e:       89 04 24                mov    %eax,(%esp)
c0105521:       e8 6d d8 ff ff          call   c0102d93 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0105526:       c7 04 24 02 00 00 00    movl   $0x2,(%esp)
c010552d:       e8 29 d8 ff ff          call   c0102d5b <alloc_pages>
c0105532:       89 45 e4                mov    %eax,-0x1c(%ebp)
c0105535:       8b 45 d8                mov    -0x28(%ebp),%eax
c0105538:       83 c0 14                add    $0x14,%eax
c010553b:       39 45 e4                cmp    %eax,-0x1c(%ebp)
c010553e:       74 24                   je     c0105564 <default_check+0x4d1>
c0105540:       c7 44 24 0c a0 7e 10    movl   $0xc0107ea0,0xc(%esp)
c0105547:       c0
c0105548:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c010554f:       c0
c0105550:       c7 44 24 04 2c 01 00    movl   $0x12c,0x4(%esp)
c0105557:       00
c0105558:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c010555f:       e8 d9 ae ff ff          call   c010043d <__panic>

    free_pages(p0, 2);
c0105564:       c7 44 24 04 02 00 00    movl   $0x2,0x4(%esp)
c010556b:       00
c010556c:       8b 45 e4                mov    -0x1c(%ebp),%eax
c010556f:       89 04 24                mov    %eax,(%esp)
c0105572:       e8 1c d8 ff ff          call   c0102d93 <free_pages>
    free_page(p2);
c0105577:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c010557e:       00
c010557f:       8b 45 d8                mov    -0x28(%ebp),%eax
c0105582:       89 04 24                mov    %eax,(%esp)
c0105585:       e8 09 d8 ff ff          call   c0102d93 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c010558a:       c7 04 24 05 00 00 00    movl   $0x5,(%esp)
c0105591:       e8 c5 d7 ff ff          call   c0102d5b <alloc_pages>
c0105596:       89 45 e4                mov    %eax,-0x1c(%ebp)
c0105599:       83 7d e4 00             cmpl   $0x0,-0x1c(%ebp)
c010559d:       75 24                   jne    c01055c3 <default_check+0x530>
c010559f:       c7 44 24 0c c0 7e 10    movl   $0xc0107ec0,0xc(%esp)
c01055a6:       c0
c01055a7:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01055ae:       c0
c01055af:       c7 44 24 04 31 01 00    movl   $0x131,0x4(%esp)
c01055b6:       00
c01055b7:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c01055be:       e8 7a ae ff ff          call   c010043d <__panic>
    assert(alloc_page() == NULL);
c01055c3:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c01055ca:       e8 8c d7 ff ff          call   c0102d5b <alloc_pages>
c01055cf:       85 c0                   test   %eax,%eax
c01055d1:       74 24                   je     c01055f7 <default_check+0x564>
c01055d3:       c7 44 24 0c 1e 7d 10    movl   $0xc0107d1e,0xc(%esp)
c01055da:       c0
c01055db:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01055e2:       c0
c01055e3:       c7 44 24 04 32 01 00    movl   $0x132,0x4(%esp)
c01055ea:       00
c01055eb:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c01055f2:       e8 46 ae ff ff          call   c010043d <__panic>

    assert(nr_free == 0);
c01055f7:       a1 c4 c9 10 c0          mov    0xc010c9c4,%eax
c01055fc:       85 c0                   test   %eax,%eax
c01055fe:       74 24                   je     c0105624 <default_check+0x591>
c0105600:       c7 44 24 0c 71 7d 10    movl   $0xc0107d71,0xc(%esp)
c0105607:       c0
c0105608:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c010560f:       c0
c0105610:       c7 44 24 04 34 01 00    movl   $0x134,0x4(%esp)
c0105617:       00
c0105618:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c010561f:       e8 19 ae ff ff          call   c010043d <__panic>
    nr_free = nr_free_store;
c0105624:       8b 45 e0                mov    -0x20(%ebp),%eax
c0105627:       a3 c4 c9 10 c0          mov    %eax,0xc010c9c4

    free_list = free_list_store;
c010562c:       8b 45 80                mov    -0x80(%ebp),%eax
c010562f:       8b 55 84                mov    -0x7c(%ebp),%edx
c0105632:       a3 bc c9 10 c0          mov    %eax,0xc010c9bc
c0105637:       89 15 c0 c9 10 c0       mov    %edx,0xc010c9c0
    free_pages(p0, 5);
c010563d:       c7 44 24 04 05 00 00    movl   $0x5,0x4(%esp)
c0105644:       00
c0105645:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0105648:       89 04 24                mov    %eax,(%esp)
c010564b:       e8 43 d7 ff ff          call   c0102d93 <free_pages>

    le = &free_list;
c0105650:       c7 45 ec bc c9 10 c0    movl   $0xc010c9bc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0105657:       eb 1d                   jmp    c0105676 <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c0105659:       8b 45 ec                mov    -0x14(%ebp),%eax
c010565c:       83 e8 0c                sub    $0xc,%eax
c010565f:       89 45 d4                mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0105662:       83 6d f4 01             subl   $0x1,-0xc(%ebp)
c0105666:       8b 55 f0                mov    -0x10(%ebp),%edx
c0105669:       8b 45 d4                mov    -0x2c(%ebp),%eax
c010566c:       8b 40 08                mov    0x8(%eax),%eax
c010566f:       29 c2                   sub    %eax,%edx
c0105671:       89 d0                   mov    %edx,%eax
c0105673:       89 45 f0                mov    %eax,-0x10(%ebp)
c0105676:       8b 45 ec                mov    -0x14(%ebp),%eax
c0105679:       89 45 88                mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010567c:       8b 45 88                mov    -0x78(%ebp),%eax
c010567f:       8b 40 04                mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0105682:       89 45 ec                mov    %eax,-0x14(%ebp)
c0105685:       81 7d ec bc c9 10 c0    cmpl   $0xc010c9bc,-0x14(%ebp)
c010568c:       75 cb                   jne    c0105659 <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c010568e:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c0105692:       74 24                   je     c01056b8 <default_check+0x625>
c0105694:       c7 44 24 0c de 7e 10    movl   $0xc0107ede,0xc(%esp)
c010569b:       c0
c010569c:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01056a3:       c0
c01056a4:       c7 44 24 04 3f 01 00    movl   $0x13f,0x4(%esp)
c01056ab:       00
c01056ac:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c01056b3:       e8 85 ad ff ff          call   c010043d <__panic>
    assert(total == 0);
c01056b8:       83 7d f0 00             cmpl   $0x0,-0x10(%ebp)
c01056bc:       74 24                   je     c01056e2 <default_check+0x64f>
c01056be:       c7 44 24 0c e9 7e 10    movl   $0xc0107ee9,0xc(%esp)
c01056c5:       c0
c01056c6:       c7 44 24 08 7e 7b 10    movl   $0xc0107b7e,0x8(%esp)
c01056cd:       c0
c01056ce:       c7 44 24 04 40 01 00    movl   $0x140,0x4(%esp)
c01056d5:       00
c01056d6:       c7 04 24 93 7b 10 c0    movl   $0xc0107b93,(%esp)
c01056dd:       e8 5b ad ff ff          call   c010043d <__panic>
}
c01056e2:       81 c4 94 00 00 00       add    $0x94,%esp
c01056e8:       5b                      pop    %ebx
c01056e9:       5d                      pop    %ebp
c01056ea:       c3                      ret

c01056eb <set_page_ref>:
page_ref(struct Page *page) {
    return page->ref;
}

static inline void
set_page_ref(struct Page *page, int val) {
c01056eb:       55                      push   %ebp
c01056ec:       89 e5                   mov    %esp,%ebp
    page->ref = val;
c01056ee:       8b 45 08                mov    0x8(%ebp),%eax
c01056f1:       8b 55 0c                mov    0xc(%ebp),%edx
c01056f4:       89 10                   mov    %edx,(%eax)
}
c01056f6:       5d                      pop    %ebp
c01056f7:       c3                      ret

c01056f8 <uint32_round_up>:

// 已分配的块数，从0开始
uint32_t nr_block = 0;

//找到大于等于所需内存的2的倍数
static uint32_t uint32_round_up(uint32_t size) {
c01056f8:       55                      push   %ebp
c01056f9:       89 e5                   mov    %esp,%ebp
  size -= 1;
c01056fb:       83 6d 08 01             subl   $0x1,0x8(%ebp)
  size |= size >> 1;
c01056ff:       8b 45 08                mov    0x8(%ebp),%eax
c0105702:       d1 e8                   shr    %eax
c0105704:       09 45 08                or     %eax,0x8(%ebp)
  size |= size >> 2;
c0105707:       8b 45 08                mov    0x8(%ebp),%eax
c010570a:       c1 e8 02                shr    $0x2,%eax
c010570d:       09 45 08                or     %eax,0x8(%ebp)
  size |= size >> 4;
c0105710:       8b 45 08                mov    0x8(%ebp),%eax
c0105713:       c1 e8 04                shr    $0x4,%eax
c0105716:       09 45 08                or     %eax,0x8(%ebp)
  size |= size >> 8;
c0105719:       8b 45 08                mov    0x8(%ebp),%eax
c010571c:       c1 e8 08                shr    $0x8,%eax
c010571f:       09 45 08                or     %eax,0x8(%ebp)
  size |= size >> 16;
c0105722:       8b 45 08                mov    0x8(%ebp),%eax
c0105725:       c1 e8 10                shr    $0x10,%eax
c0105728:       09 45 08                or     %eax,0x8(%ebp)
  return size+1;
c010572b:       8b 45 08                mov    0x8(%ebp),%eax
c010572e:       83 c0 01                add    $0x1,%eax
}
c0105731:       5d                      pop    %ebp
c0105732:       c3                      ret

c0105733 <uint32_round_down>:

static uint32_t uint32_round_down(uint32_t size) {
c0105733:       55                      push   %ebp
c0105734:       89 e5                   mov    %esp,%ebp
c0105736:       83 ec 04                sub    $0x4,%esp
  return size & (uint32_round_up(size) >> 1);
c0105739:       8b 45 08                mov    0x8(%ebp),%eax
c010573c:       89 04 24                mov    %eax,(%esp)
c010573f:       e8 b4 ff ff ff          call   c01056f8 <uint32_round_up>
c0105744:       d1 e8                   shr    %eax
c0105746:       23 45 08                and    0x8(%ebp),%eax
}
c0105749:       c9                      leave
c010574a:       c3                      ret

c010574b <buddy_new>:

void buddy_new(uint32_t size) {
c010574b:       55                      push   %ebp
c010574c:       89 e5                   mov    %esp,%ebp
c010574e:       83 ec 28                sub    $0x28,%esp
    uint32_t node_size;
    uint32_t i;
    nr_block = 0;
c0105751:       c7 05 4c c9 10 c0 00    movl   $0x0,0xc010c94c
c0105758:       00 00 00

    // check
    cprintf("buddy_new, size = [%d], IS_POWER_OF_2(size) = [%d]\n", size, IS_POWER_OF_2(size));
c010575b:       8b 45 08                mov    0x8(%ebp),%eax
c010575e:       83 e8 01                sub    $0x1,%eax
c0105761:       23 45 08                and    0x8(%ebp),%eax
c0105764:       85 c0                   test   %eax,%eax
c0105766:       0f 94 c0                sete   %al
c0105769:       0f b6 c0                movzbl %al,%eax
c010576c:       89 44 24 08             mov    %eax,0x8(%esp)
c0105770:       8b 45 08                mov    0x8(%ebp),%eax
c0105773:       89 44 24 04             mov    %eax,0x4(%esp)
c0105777:       c7 04 24 24 7f 10 c0    movl   $0xc0107f24,(%esp)
c010577e:       e8 63 ab ff ff          call   c01002e6 <cprintf>
    if (size < 1 || !IS_POWER_OF_2(size)) {
c0105783:       83 7d 08 00             cmpl   $0x0,0x8(%ebp)
c0105787:       74 0d                   je     c0105796 <buddy_new+0x4b>
c0105789:       8b 45 08                mov    0x8(%ebp),%eax
c010578c:       83 e8 01                sub    $0x1,%eax
c010578f:       23 45 08                and    0x8(%ebp),%eax
c0105792:       85 c0                   test   %eax,%eax
c0105794:       74 05                   je     c010579b <buddy_new+0x50>
        return;
c0105796:       e9 a6 00 00 00          jmp    c0105841 <buddy_new+0xf6>
    }

    node_size = 2 * size;
c010579b:       8b 45 08                mov    0x8(%ebp),%eax
c010579e:       01 c0                   add    %eax,%eax
c01057a0:       89 45 f4                mov    %eax,-0xc(%ebp)
    root->size = size;
c01057a3:       a1 38 ba 10 c0          mov    0xc010ba38,%eax
c01057a8:       8b 55 08                mov    0x8(%ebp),%edx
c01057ab:       89 10                   mov    %edx,(%eax)

    for (i = 0; i < 2 * size - 1; i++) {
c01057ad:       c7 45 f0 00 00 00 00    movl   $0x0,-0x10(%ebp)
c01057b4:       eb 42                   jmp    c01057f8 <buddy_new+0xad>
        if (IS_POWER_OF_2(i + 1)) {
c01057b6:       8b 45 f0                mov    -0x10(%ebp),%eax
c01057b9:       83 c0 01                add    $0x1,%eax
c01057bc:       23 45 f0                and    -0x10(%ebp),%eax
c01057bf:       85 c0                   test   %eax,%eax
c01057c1:       75 22                   jne    c01057e5 <buddy_new+0x9a>
            node_size /= 2;
c01057c3:       8b 45 f4                mov    -0xc(%ebp),%eax
c01057c6:       d1 e8                   shr    %eax
c01057c8:       89 45 f4                mov    %eax,-0xc(%ebp)
            cprintf("root->longest[%d] = [%d]\n", i, node_size);
c01057cb:       8b 45 f4                mov    -0xc(%ebp),%eax
c01057ce:       89 44 24 08             mov    %eax,0x8(%esp)
c01057d2:       8b 45 f0                mov    -0x10(%ebp),%eax
c01057d5:       89 44 24 04             mov    %eax,0x4(%esp)
c01057d9:       c7 04 24 58 7f 10 c0    movl   $0xc0107f58,(%esp)
c01057e0:       e8 01 ab ff ff          call   c01002e6 <cprintf>
        }

        root->longest[i] = node_size;
c01057e5:       a1 38 ba 10 c0          mov    0xc010ba38,%eax
c01057ea:       8b 55 f0                mov    -0x10(%ebp),%edx
c01057ed:       8b 4d f4                mov    -0xc(%ebp),%ecx
c01057f0:       89 4c 90 04             mov    %ecx,0x4(%eax,%edx,4)
    }

    node_size = 2 * size;
    root->size = size;

    for (i = 0; i < 2 * size - 1; i++) {
c01057f4:       83 45 f0 01             addl   $0x1,-0x10(%ebp)
c01057f8:       8b 45 08                mov    0x8(%ebp),%eax
c01057fb:       01 c0                   add    %eax,%eax
c01057fd:       83 e8 01                sub    $0x1,%eax
c0105800:       3b 45 f0                cmp    -0x10(%ebp),%eax
c0105803:       77 b1                   ja     c01057b6 <buddy_new+0x6b>
            cprintf("root->longest[%d] = [%d]\n", i, node_size);
        }

        root->longest[i] = node_size;
    }
    cprintf("\n");
c0105805:       c7 04 24 72 7f 10 c0    movl   $0xc0107f72,(%esp)
c010580c:       e8 d5 aa ff ff          call   c01002e6 <cprintf>
    cprintf("buddy_new, root = [%d], root->longest= [%d], longest size = [%d]\n", size, IS_POWER_OF_2(size),
c0105811:       8b 45 08                mov    0x8(%ebp),%eax
c0105814:       83 e8 01                sub    $0x1,%eax
c0105817:       23 45 08                and    0x8(%ebp),%eax
c010581a:       85 c0                   test   %eax,%eax
c010581c:       0f 94 c0                sete   %al
c010581f:       0f b6 c0                movzbl %al,%eax
c0105822:       c7 44 24 0c 00 00 40    movl   $0x400000,0xc(%esp)
c0105829:       00
c010582a:       89 44 24 08             mov    %eax,0x8(%esp)
c010582e:       8b 45 08                mov    0x8(%ebp),%eax
c0105831:       89 44 24 04             mov    %eax,0x4(%esp)
c0105835:       c7 04 24 74 7f 10 c0    movl   $0xc0107f74,(%esp)
c010583c:       e8 a5 aa ff ff          call   c01002e6 <cprintf>
            sizeof(root->longest));

}
c0105841:       c9                      leave
c0105842:       c3                      ret

c0105843 <buddy_alloc>:

static uint32_t
buddy_alloc(struct buddy *self, uint32_t size) {
c0105843:       55                      push   %ebp
c0105844:       89 e5                   mov    %esp,%ebp
c0105846:       83 ec 38                sub    $0x38,%esp
    uint32_t index = 0;
c0105849:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
    uint32_t node_size;
    uint32_t offset;
    uint32_t left;
    uint32_t right;

    cprintf("buddy_alloc, self = [%p], root = [%p], self->size = [%d]\n", self->size, self, self->size);
c0105850:       8b 45 08                mov    0x8(%ebp),%eax
c0105853:       8b 10                   mov    (%eax),%edx
c0105855:       8b 45 08                mov    0x8(%ebp),%eax
c0105858:       8b 00                   mov    (%eax),%eax
c010585a:       89 54 24 0c             mov    %edx,0xc(%esp)
c010585e:       8b 55 08                mov    0x8(%ebp),%edx
c0105861:       89 54 24 08             mov    %edx,0x8(%esp)
c0105865:       89 44 24 04             mov    %eax,0x4(%esp)
c0105869:       c7 04 24 b8 7f 10 c0    movl   $0xc0107fb8,(%esp)
c0105870:       e8 71 aa ff ff          call   c01002e6 <cprintf>
    if (self == NULL) {
c0105875:       83 7d 08 00             cmpl   $0x0,0x8(%ebp)
c0105879:       75 16                   jne    c0105891 <buddy_alloc+0x4e>
        cprintf("buddy_alloc, return -1\n");
c010587b:       c7 04 24 f2 7f 10 c0    movl   $0xc0107ff2,(%esp)
c0105882:       e8 5f aa ff ff          call   c01002e6 <cprintf>
        return -1;
c0105887:       b8 ff ff ff ff          mov    $0xffffffff,%eax
c010588c:       e9 79 01 00 00          jmp    c0105a0a <buddy_alloc+0x1c7>
    }

    if (size <= 0) {
c0105891:       83 7d 0c 00             cmpl   $0x0,0xc(%ebp)
c0105895:       75 09                   jne    c01058a0 <buddy_alloc+0x5d>
        size = 1;
c0105897:       c7 45 0c 01 00 00 00    movl   $0x1,0xc(%ebp)
c010589e:       eb 1b                   jmp    c01058bb <buddy_alloc+0x78>
    } else if (!IS_POWER_OF_2(size)) {
c01058a0:       8b 45 0c                mov    0xc(%ebp),%eax
c01058a3:       83 e8 01                sub    $0x1,%eax
c01058a6:       23 45 0c                and    0xc(%ebp),%eax
c01058a9:       85 c0                   test   %eax,%eax
c01058ab:       74 0e                   je     c01058bb <buddy_alloc+0x78>
        // 向上取2的n次幂
        size = uint32_round_up(size);
c01058ad:       8b 45 0c                mov    0xc(%ebp),%eax
c01058b0:       89 04 24                mov    %eax,(%esp)
c01058b3:       e8 40 fe ff ff          call   c01056f8 <uint32_round_up>
c01058b8:       89 45 0c                mov    %eax,0xc(%ebp)
    }

    cprintf("buddy_alloc, self->longest[index] = [%d], size = [%d]\n", self->longest[index], size);
c01058bb:       8b 45 08                mov    0x8(%ebp),%eax
c01058be:       8b 55 f4                mov    -0xc(%ebp),%edx
c01058c1:       8b 44 90 04             mov    0x4(%eax,%edx,4),%eax
c01058c5:       8b 55 0c                mov    0xc(%ebp),%edx
c01058c8:       89 54 24 08             mov    %edx,0x8(%esp)
c01058cc:       89 44 24 04             mov    %eax,0x4(%esp)
c01058d0:       c7 04 24 0c 80 10 c0    movl   $0xc010800c,(%esp)
c01058d7:       e8 0a aa ff ff          call   c01002e6 <cprintf>
    // 无足够空间
    if (self->longest[index] < size) {
c01058dc:       8b 45 08                mov    0x8(%ebp),%eax
c01058df:       8b 55 f4                mov    -0xc(%ebp),%edx
c01058e2:       8b 44 90 04             mov    0x4(%eax,%edx,4),%eax
c01058e6:       3b 45 0c                cmp    0xc(%ebp),%eax
c01058e9:       73 0a                   jae    c01058f5 <buddy_alloc+0xb2>
        return -1;
c01058eb:       b8 ff ff ff ff          mov    $0xffffffff,%eax
c01058f0:       e9 15 01 00 00          jmp    c0105a0a <buddy_alloc+0x1c7>
    }

    // 开始查找符合条件的节点
    for (node_size = self->size; node_size != size; node_size /= 2) {
c01058f5:       8b 45 08                mov    0x8(%ebp),%eax
c01058f8:       8b 00                   mov    (%eax),%eax
c01058fa:       89 45 f0                mov    %eax,-0x10(%ebp)
c01058fd:       e9 8d 00 00 00          jmp    c010598f <buddy_alloc+0x14c>
        left = LEFT_LEAF(index);
c0105902:       8b 45 f4                mov    -0xc(%ebp),%eax
c0105905:       01 c0                   add    %eax,%eax
c0105907:       83 c0 01                add    $0x1,%eax
c010590a:       89 45 ec                mov    %eax,-0x14(%ebp)
        right = RIGHT_LEAF(index);
c010590d:       8b 45 f4                mov    -0xc(%ebp),%eax
c0105910:       83 c0 01                add    $0x1,%eax
c0105913:       01 c0                   add    %eax,%eax
c0105915:       89 45 e8                mov    %eax,-0x18(%ebp)

        // 如果两个子节点的空间都大于>=size，取较小的那个，都等于，则取左节点
        if (self->longest[left] >= size && self->longest[right] >= size) {
c0105918:       8b 45 08                mov    0x8(%ebp),%eax
c010591b:       8b 55 ec                mov    -0x14(%ebp),%edx
c010591e:       8b 44 90 04             mov    0x4(%eax,%edx,4),%eax
c0105922:       3b 45 0c                cmp    0xc(%ebp),%eax
c0105925:       72 34                   jb     c010595b <buddy_alloc+0x118>
c0105927:       8b 45 08                mov    0x8(%ebp),%eax
c010592a:       8b 55 e8                mov    -0x18(%ebp),%edx
c010592d:       8b 44 90 04             mov    0x4(%eax,%edx,4),%eax
c0105931:       3b 45 0c                cmp    0xc(%ebp),%eax
c0105934:       72 25                   jb     c010595b <buddy_alloc+0x118>
            index = self->longest[right] < self->longest[left] ? right : left;
c0105936:       8b 45 08                mov    0x8(%ebp),%eax
c0105939:       8b 55 e8                mov    -0x18(%ebp),%edx
c010593c:       8b 4c 90 04             mov    0x4(%eax,%edx,4),%ecx
c0105940:       8b 45 08                mov    0x8(%ebp),%eax
c0105943:       8b 55 ec                mov    -0x14(%ebp),%edx
c0105946:       8b 44 90 04             mov    0x4(%eax,%edx,4),%eax
c010594a:       39 c1                   cmp    %eax,%ecx
c010594c:       73 05                   jae    c0105953 <buddy_alloc+0x110>
c010594e:       8b 45 e8                mov    -0x18(%ebp),%eax
c0105951:       eb 03                   jmp    c0105956 <buddy_alloc+0x113>
c0105953:       8b 45 ec                mov    -0x14(%ebp),%eax
c0105956:       89 45 f4                mov    %eax,-0xc(%ebp)
            continue;
c0105959:       eb 2c                   jmp    c0105987 <buddy_alloc+0x144>
        }

        // 如果一个小于size,则取另一个
        if (self->longest[left] < size) {
c010595b:       8b 45 08                mov    0x8(%ebp),%eax
c010595e:       8b 55 ec                mov    -0x14(%ebp),%edx
c0105961:       8b 44 90 04             mov    0x4(%eax,%edx,4),%eax
c0105965:       3b 45 0c                cmp    0xc(%ebp),%eax
c0105968:       73 08                   jae    c0105972 <buddy_alloc+0x12f>
            index = right;
c010596a:       8b 45 e8                mov    -0x18(%ebp),%eax
c010596d:       89 45 f4                mov    %eax,-0xc(%ebp)
c0105970:       eb 15                   jmp    c0105987 <buddy_alloc+0x144>
        } else if (self->longest[right] < size) {
c0105972:       8b 45 08                mov    0x8(%ebp),%eax
c0105975:       8b 55 e8                mov    -0x18(%ebp),%edx
c0105978:       8b 44 90 04             mov    0x4(%eax,%edx,4),%eax
c010597c:       3b 45 0c                cmp    0xc(%ebp),%eax
c010597f:       73 06                   jae    c0105987 <buddy_alloc+0x144>
            index = left;
c0105981:       8b 45 ec                mov    -0x14(%ebp),%eax
c0105984:       89 45 f4                mov    %eax,-0xc(%ebp)
    if (self->longest[index] < size) {
        return -1;
    }

    // 开始查找符合条件的节点
    for (node_size = self->size; node_size != size; node_size /= 2) {
c0105987:       8b 45 f0                mov    -0x10(%ebp),%eax
c010598a:       d1 e8                   shr    %eax
c010598c:       89 45 f0                mov    %eax,-0x10(%ebp)
c010598f:       8b 45 f0                mov    -0x10(%ebp),%eax
c0105992:       3b 45 0c                cmp    0xc(%ebp),%eax
c0105995:       0f 85 67 ff ff ff       jne    c0105902 <buddy_alloc+0xbf>
        } else if (self->longest[right] < size) {
            index = left;
        }
    }

    self->longest[index] = 0;
c010599b:       8b 45 08                mov    0x8(%ebp),%eax
c010599e:       8b 55 f4                mov    -0xc(%ebp),%edx
c01059a1:       c7 44 90 04 00 00 00    movl   $0x0,0x4(%eax,%edx,4)
c01059a8:       00
    // 计算offset
    offset = (index + 1) * node_size - self->size;
c01059a9:       8b 45 f4                mov    -0xc(%ebp),%eax
c01059ac:       83 c0 01                add    $0x1,%eax
c01059af:       0f af 45 f0             imul   -0x10(%ebp),%eax
c01059b3:       89 c2                   mov    %eax,%edx
c01059b5:       8b 45 08                mov    0x8(%ebp),%eax
c01059b8:       8b 00                   mov    (%eax),%eax
c01059ba:       29 c2                   sub    %eax,%edx
c01059bc:       89 d0                   mov    %edx,%eax
c01059be:       89 45 e4                mov    %eax,-0x1c(%ebp)
    // 回滚，更改父节点的数据
    while (index) {
c01059c1:       eb 3e                   jmp    c0105a01 <buddy_alloc+0x1be>
        index = PARENT(index);
c01059c3:       8b 45 f4                mov    -0xc(%ebp),%eax
c01059c6:       83 c0 01                add    $0x1,%eax
c01059c9:       d1 e8                   shr    %eax
c01059cb:       83 e8 01                sub    $0x1,%eax
c01059ce:       89 45 f4                mov    %eax,-0xc(%ebp)
        self->longest[index] =
        MAX(self->longest[LEFT_LEAF(index)], self->longest[RIGHT_LEAF(index)]);
c01059d1:       8b 45 f4                mov    -0xc(%ebp),%eax
c01059d4:       83 c0 01                add    $0x1,%eax
c01059d7:       8d 14 00                lea    (%eax,%eax,1),%edx
c01059da:       8b 45 08                mov    0x8(%ebp),%eax
c01059dd:       8b 54 90 04             mov    0x4(%eax,%edx,4),%edx
c01059e1:       8b 45 f4                mov    -0xc(%ebp),%eax
c01059e4:       01 c0                   add    %eax,%eax
c01059e6:       8d 48 01                lea    0x1(%eax),%ecx
c01059e9:       8b 45 08                mov    0x8(%ebp),%eax
c01059ec:       8b 44 88 04             mov    0x4(%eax,%ecx,4),%eax
c01059f0:       39 c2                   cmp    %eax,%edx
c01059f2:       0f 43 c2                cmovae %edx,%eax
c01059f5:       89 c1                   mov    %eax,%ecx
    // 计算offset
    offset = (index + 1) * node_size - self->size;
    // 回滚，更改父节点的数据
    while (index) {
        index = PARENT(index);
        self->longest[index] =
c01059f7:       8b 45 08                mov    0x8(%ebp),%eax
c01059fa:       8b 55 f4                mov    -0xc(%ebp),%edx
c01059fd:       89 4c 90 04             mov    %ecx,0x4(%eax,%edx,4)

    self->longest[index] = 0;
    // 计算offset
    offset = (index + 1) * node_size - self->size;
    // 回滚，更改父节点的数据
    while (index) {
c0105a01:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c0105a05:       75 bc                   jne    c01059c3 <buddy_alloc+0x180>
        index = PARENT(index);
        self->longest[index] =
        MAX(self->longest[LEFT_LEAF(index)], self->longest[RIGHT_LEAF(index)]);
    }

    return offset;
c0105a07:       8b 45 e4                mov    -0x1c(%ebp),%eax
}
c0105a0a:       c9                      leave
c0105a0b:       c3                      ret

c0105a0c <buddy_free>:

static void buddy_free(struct buddy* self, uint32_t offset) {
c0105a0c:       55                      push   %ebp
c0105a0d:       89 e5                   mov    %esp,%ebp
c0105a0f:       83 ec 28                sub    $0x28,%esp
    uint32_t node_size;
    uint32_t index = 0;
c0105a12:       c7 45 f0 00 00 00 00    movl   $0x0,-0x10(%ebp)
    uint32_t left_child_size, right_child_size;

    assert(self && offset >= 0 && self->size >= offset);
c0105a19:       83 7d 08 00             cmpl   $0x0,0x8(%ebp)
c0105a1d:       74 0a                   je     c0105a29 <buddy_free+0x1d>
c0105a1f:       8b 45 08                mov    0x8(%ebp),%eax
c0105a22:       8b 00                   mov    (%eax),%eax
c0105a24:       3b 45 0c                cmp    0xc(%ebp),%eax
c0105a27:       73 24                   jae    c0105a4d <buddy_free+0x41>
c0105a29:       c7 44 24 0c 44 80 10    movl   $0xc0108044,0xc(%esp)
c0105a30:       c0
c0105a31:       c7 44 24 08 70 80 10    movl   $0xc0108070,0x8(%esp)
c0105a38:       c0
c0105a39:       c7 44 24 04 a2 00 00    movl   $0xa2,0x4(%esp)
c0105a40:       00
c0105a41:       c7 04 24 85 80 10 c0    movl   $0xc0108085,(%esp)
c0105a48:       e8 f0 a9 ff ff          call   c010043d <__panic>

    node_size = 1;
c0105a4d:       c7 45 f4 01 00 00 00    movl   $0x1,-0xc(%ebp)

    // index
    index = offset + self->size -1;
c0105a54:       8b 45 08                mov    0x8(%ebp),%eax
c0105a57:       8b 10                   mov    (%eax),%edx
c0105a59:       8b 45 0c                mov    0xc(%ebp),%eax
c0105a5c:       01 d0                   add    %edx,%eax
c0105a5e:       83 e8 01                sub    $0x1,%eax
c0105a61:       89 45 f0                mov    %eax,-0x10(%ebp)

    // 向上寻找分配过的节点
    for (; self->longest[index]; index = PARENT(index)) {
c0105a64:       eb 1c                   jmp    c0105a82 <buddy_free+0x76>
        node_size *= 2;
c0105a66:       d1 65 f4                shll   -0xc(%ebp)
        // 如果节点不存在
        if (index == 0) {
c0105a69:       83 7d f0 00             cmpl   $0x0,-0x10(%ebp)
c0105a6d:       75 05                   jne    c0105a74 <buddy_free+0x68>
            return;
c0105a6f:       e9 99 00 00 00          jmp    c0105b0d <buddy_free+0x101>

    // index
    index = offset + self->size -1;

    // 向上寻找分配过的节点
    for (; self->longest[index]; index = PARENT(index)) {
c0105a74:       8b 45 f0                mov    -0x10(%ebp),%eax
c0105a77:       83 c0 01                add    $0x1,%eax
c0105a7a:       d1 e8                   shr    %eax
c0105a7c:       83 e8 01                sub    $0x1,%eax
c0105a7f:       89 45 f0                mov    %eax,-0x10(%ebp)
c0105a82:       8b 45 08                mov    0x8(%ebp),%eax
c0105a85:       8b 55 f0                mov    -0x10(%ebp),%edx
c0105a88:       8b 44 90 04             mov    0x4(%eax,%edx,4),%eax
c0105a8c:       85 c0                   test   %eax,%eax
c0105a8e:       75 d6                   jne    c0105a66 <buddy_free+0x5a>
        if (index == 0) {
            return;
        }
    }

    self->longest[index] = node_size;
c0105a90:       8b 45 08                mov    0x8(%ebp),%eax
c0105a93:       8b 55 f0                mov    -0x10(%ebp),%edx
c0105a96:       8b 4d f4                mov    -0xc(%ebp),%ecx
c0105a99:       89 4c 90 04             mov    %ecx,0x4(%eax,%edx,4)

    while (index) {
c0105a9d:       eb 68                   jmp    c0105b07 <buddy_free+0xfb>
        index = PARENT(index);
c0105a9f:       8b 45 f0                mov    -0x10(%ebp),%eax
c0105aa2:       83 c0 01                add    $0x1,%eax
c0105aa5:       d1 e8                   shr    %eax
c0105aa7:       83 e8 01                sub    $0x1,%eax
c0105aaa:       89 45 f0                mov    %eax,-0x10(%ebp)
        node_size *= 2;
c0105aad:       d1 65 f4                shll   -0xc(%ebp)
        left_child_size = self->longest[LEFT_LEAF(index)];
c0105ab0:       8b 45 f0                mov    -0x10(%ebp),%eax
c0105ab3:       01 c0                   add    %eax,%eax
c0105ab5:       8d 50 01                lea    0x1(%eax),%edx
c0105ab8:       8b 45 08                mov    0x8(%ebp),%eax
c0105abb:       8b 44 90 04             mov    0x4(%eax,%edx,4),%eax
c0105abf:       89 45 ec                mov    %eax,-0x14(%ebp)
        right_child_size = self->longest[RIGHT_LEAF(index)];
c0105ac2:       8b 45 f0                mov    -0x10(%ebp),%eax
c0105ac5:       83 c0 01                add    $0x1,%eax
c0105ac8:       8d 14 00                lea    (%eax,%eax,1),%edx
c0105acb:       8b 45 08                mov    0x8(%ebp),%eax
c0105ace:       8b 44 90 04             mov    0x4(%eax,%edx,4),%eax
c0105ad2:       89 45 e8                mov    %eax,-0x18(%ebp)

        if (node_size == left_child_size + right_child_size) {
c0105ad5:       8b 45 e8                mov    -0x18(%ebp),%eax
c0105ad8:       8b 55 ec                mov    -0x14(%ebp),%edx
c0105adb:       01 d0                   add    %edx,%eax
c0105add:       3b 45 f4                cmp    -0xc(%ebp),%eax
c0105ae0:       75 0f                   jne    c0105af1 <buddy_free+0xe5>
            self->longest[index] = node_size;
c0105ae2:       8b 45 08                mov    0x8(%ebp),%eax
c0105ae5:       8b 55 f0                mov    -0x10(%ebp),%edx
c0105ae8:       8b 4d f4                mov    -0xc(%ebp),%ecx
c0105aeb:       89 4c 90 04             mov    %ecx,0x4(%eax,%edx,4)
c0105aef:       eb 16                   jmp    c0105b07 <buddy_free+0xfb>
        } else {
            self->longest[index] = MAX(left_child_size, right_child_size);
c0105af1:       8b 45 ec                mov    -0x14(%ebp),%eax
c0105af4:       39 45 e8                cmp    %eax,-0x18(%ebp)
c0105af7:       0f 43 45 e8             cmovae -0x18(%ebp),%eax
c0105afb:       89 c1                   mov    %eax,%ecx
c0105afd:       8b 45 08                mov    0x8(%ebp),%eax
c0105b00:       8b 55 f0                mov    -0x10(%ebp),%edx
c0105b03:       89 4c 90 04             mov    %ecx,0x4(%eax,%edx,4)
        }
    }

    self->longest[index] = node_size;

    while (index) {
c0105b07:       83 7d f0 00             cmpl   $0x0,-0x10(%ebp)
c0105b0b:       75 92                   jne    c0105a9f <buddy_free+0x93>
        } else {
            self->longest[index] = MAX(left_child_size, right_child_size);
        }
    }

}
c0105b0d:       c9                      leave
c0105b0e:       c3                      ret

c0105b0f <buddy_size>:


static uint32_t buddy_size(struct buddy* self, uint32_t offset) {
c0105b0f:       55                      push   %ebp
c0105b10:       89 e5                   mov    %esp,%ebp
c0105b12:       83 ec 28                sub    $0x28,%esp
    uint32_t node_size, index = 0;
c0105b15:       c7 45 f0 00 00 00 00    movl   $0x0,-0x10(%ebp)
    assert(self && offset >= 0 && offset <= self->size);
c0105b1c:       83 7d 08 00             cmpl   $0x0,0x8(%ebp)
c0105b20:       74 0a                   je     c0105b2c <buddy_size+0x1d>
c0105b22:       8b 45 08                mov    0x8(%ebp),%eax
c0105b25:       8b 00                   mov    (%eax),%eax
c0105b27:       3b 45 0c                cmp    0xc(%ebp),%eax
c0105b2a:       73 24                   jae    c0105b50 <buddy_size+0x41>
c0105b2c:       c7 44 24 0c 9c 80 10    movl   $0xc010809c,0xc(%esp)
c0105b33:       c0
c0105b34:       c7 44 24 08 70 80 10    movl   $0xc0108070,0x8(%esp)
c0105b3b:       c0
c0105b3c:       c7 44 24 04 c6 00 00    movl   $0xc6,0x4(%esp)
c0105b43:       00
c0105b44:       c7 04 24 85 80 10 c0    movl   $0xc0108085,(%esp)
c0105b4b:       e8 ed a8 ff ff          call   c010043d <__panic>

    node_size = 1;
c0105b50:       c7 45 f4 01 00 00 00    movl   $0x1,-0xc(%ebp)
    for (index = offset + self->size - 1; self->longest[index]; index = PARENT(index)) {
c0105b57:       8b 45 08                mov    0x8(%ebp),%eax
c0105b5a:       8b 10                   mov    (%eax),%edx
c0105b5c:       8b 45 0c                mov    0xc(%ebp),%eax
c0105b5f:       01 d0                   add    %edx,%eax
c0105b61:       83 e8 01                sub    $0x1,%eax
c0105b64:       89 45 f0                mov    %eax,-0x10(%ebp)
c0105b67:       eb 11                   jmp    c0105b7a <buddy_size+0x6b>
        node_size *= 2;
c0105b69:       d1 65 f4                shll   -0xc(%ebp)
static uint32_t buddy_size(struct buddy* self, uint32_t offset) {
    uint32_t node_size, index = 0;
    assert(self && offset >= 0 && offset <= self->size);

    node_size = 1;
    for (index = offset + self->size - 1; self->longest[index]; index = PARENT(index)) {
c0105b6c:       8b 45 f0                mov    -0x10(%ebp),%eax
c0105b6f:       83 c0 01                add    $0x1,%eax
c0105b72:       d1 e8                   shr    %eax
c0105b74:       83 e8 01                sub    $0x1,%eax
c0105b77:       89 45 f0                mov    %eax,-0x10(%ebp)
c0105b7a:       8b 45 08                mov    0x8(%ebp),%eax
c0105b7d:       8b 55 f0                mov    -0x10(%ebp),%edx
c0105b80:       8b 44 90 04             mov    0x4(%eax,%edx,4),%eax
c0105b84:       85 c0                   test   %eax,%eax
c0105b86:       75 e1                   jne    c0105b69 <buddy_size+0x5a>
        node_size *= 2;
    }

    return node_size;
c0105b88:       8b 45 f4                mov    -0xc(%ebp),%eax
}
c0105b8b:       c9                      leave
c0105b8c:       c3                      ret

c0105b8d <buddy_init>:


static void
buddy_init(void) {
c0105b8d:       55                      push   %ebp
c0105b8e:       89 e5                   mov    %esp,%ebp
c0105b90:       83 ec 10                sub    $0x10,%esp
c0105b93:       c7 45 fc bc c9 10 c0    movl   $0xc010c9bc,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105b9a:       8b 45 fc                mov    -0x4(%ebp),%eax
c0105b9d:       8b 55 fc                mov    -0x4(%ebp),%edx
c0105ba0:       89 50 04                mov    %edx,0x4(%eax)
c0105ba3:       8b 45 fc                mov    -0x4(%ebp),%eax
c0105ba6:       8b 50 04                mov    0x4(%eax),%edx
c0105ba9:       8b 45 fc                mov    -0x4(%ebp),%eax
c0105bac:       89 10                   mov    %edx,(%eax)
    list_init(&free_list);
    nr_free=0;
c0105bae:       c7 05 c4 c9 10 c0 00    movl   $0x0,0xc010c9c4
c0105bb5:       00 00 00
}
c0105bb8:       c9                      leave
c0105bb9:       c3                      ret

c0105bba <buddy_init_memmap>:

static void
buddy_init_memmap(struct Page *base, size_t n) {
c0105bba:       55                      push   %ebp
c0105bbb:       89 e5                   mov    %esp,%ebp
c0105bbd:       83 ec 58                sub    $0x58,%esp
    assert(n > 0);
c0105bc0:       83 7d 0c 00             cmpl   $0x0,0xc(%ebp)
c0105bc4:       75 24                   jne    c0105bea <buddy_init_memmap+0x30>
c0105bc6:       c7 44 24 0c c8 80 10    movl   $0xc01080c8,0xc(%esp)
c0105bcd:       c0
c0105bce:       c7 44 24 08 70 80 10    movl   $0xc0108070,0x8(%esp)
c0105bd5:       c0
c0105bd6:       c7 44 24 04 d9 00 00    movl   $0xd9,0x4(%esp)
c0105bdd:       00
c0105bde:       c7 04 24 85 80 10 c0    movl   $0xc0108085,(%esp)
c0105be5:       e8 53 a8 ff ff          call   c010043d <__panic>
    struct Page *p = base;
c0105bea:       8b 45 08                mov    0x8(%ebp),%eax
c0105bed:       89 45 f4                mov    %eax,-0xc(%ebp)

    for (; p != base + n; p++) {
c0105bf0:       e9 d0 00 00 00          jmp    c0105cc5 <buddy_init_memmap+0x10b>
        assert(PageReserved(p));
c0105bf5:       8b 45 f4                mov    -0xc(%ebp),%eax
c0105bf8:       83 c0 04                add    $0x4,%eax
c0105bfb:       c7 45 ec 00 00 00 00    movl   $0x0,-0x14(%ebp)
c0105c02:       89 45 e8                mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105c05:       8b 45 e8                mov    -0x18(%ebp),%eax
c0105c08:       8b 55 ec                mov    -0x14(%ebp),%edx
c0105c0b:       0f a3 10                bt     %edx,(%eax)
c0105c0e:       19 c0                   sbb    %eax,%eax
c0105c10:       89 45 e4                mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c0105c13:       83 7d e4 00             cmpl   $0x0,-0x1c(%ebp)
c0105c17:       0f 95 c0                setne  %al
c0105c1a:       0f b6 c0                movzbl %al,%eax
c0105c1d:       85 c0                   test   %eax,%eax
c0105c1f:       75 24                   jne    c0105c45 <buddy_init_memmap+0x8b>
c0105c21:       c7 44 24 0c ce 80 10    movl   $0xc01080ce,0xc(%esp)
c0105c28:       c0
c0105c29:       c7 44 24 08 70 80 10    movl   $0xc0108070,0x8(%esp)
c0105c30:       c0
c0105c31:       c7 44 24 04 dd 00 00    movl   $0xdd,0x4(%esp)
c0105c38:       00
c0105c39:       c7 04 24 85 80 10 c0    movl   $0xc0108085,(%esp)
c0105c40:       e8 f8 a7 ff ff          call   c010043d <__panic>
        p->flags = 0;
c0105c45:       8b 45 f4                mov    -0xc(%ebp),%eax
c0105c48:       c7 40 04 00 00 00 00    movl   $0x0,0x4(%eax)
        p->property = 0;
c0105c4f:       8b 45 f4                mov    -0xc(%ebp),%eax
c0105c52:       c7 40 08 00 00 00 00    movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c0105c59:       c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)
c0105c60:       00
c0105c61:       8b 45 f4                mov    -0xc(%ebp),%eax
c0105c64:       89 04 24                mov    %eax,(%esp)
c0105c67:       e8 7f fa ff ff          call   c01056eb <set_page_ref>
        list_add(&free_list, &(p->page_link));
c0105c6c:       8b 45 f4                mov    -0xc(%ebp),%eax
c0105c6f:       83 c0 0c                add    $0xc,%eax
c0105c72:       c7 45 e0 bc c9 10 c0    movl   $0xc010c9bc,-0x20(%ebp)
c0105c79:       89 45 dc                mov    %eax,-0x24(%ebp)
c0105c7c:       8b 45 e0                mov    -0x20(%ebp),%eax
c0105c7f:       89 45 d8                mov    %eax,-0x28(%ebp)
c0105c82:       8b 45 dc                mov    -0x24(%ebp),%eax
c0105c85:       89 45 d4                mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0105c88:       8b 45 d8                mov    -0x28(%ebp),%eax
c0105c8b:       8b 40 04                mov    0x4(%eax),%eax
c0105c8e:       8b 55 d4                mov    -0x2c(%ebp),%edx
c0105c91:       89 55 d0                mov    %edx,-0x30(%ebp)
c0105c94:       8b 55 d8                mov    -0x28(%ebp),%edx
c0105c97:       89 55 cc                mov    %edx,-0x34(%ebp)
c0105c9a:       89 45 c8                mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0105c9d:       8b 45 c8                mov    -0x38(%ebp),%eax
c0105ca0:       8b 55 d0                mov    -0x30(%ebp),%edx
c0105ca3:       89 10                   mov    %edx,(%eax)
c0105ca5:       8b 45 c8                mov    -0x38(%ebp),%eax
c0105ca8:       8b 10                   mov    (%eax),%edx
c0105caa:       8b 45 cc                mov    -0x34(%ebp),%eax
c0105cad:       89 50 04                mov    %edx,0x4(%eax)
    elm->next = next;
c0105cb0:       8b 45 d0                mov    -0x30(%ebp),%eax
c0105cb3:       8b 55 c8                mov    -0x38(%ebp),%edx
c0105cb6:       89 50 04                mov    %edx,0x4(%eax)
    elm->prev = prev;
c0105cb9:       8b 45 d0                mov    -0x30(%ebp),%eax
c0105cbc:       8b 55 cc                mov    -0x34(%ebp),%edx
c0105cbf:       89 10                   mov    %edx,(%eax)
static void
buddy_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;

    for (; p != base + n; p++) {
c0105cc1:       83 45 f4 14             addl   $0x14,-0xc(%ebp)
c0105cc5:       8b 55 0c                mov    0xc(%ebp),%edx
c0105cc8:       89 d0                   mov    %edx,%eax
c0105cca:       c1 e0 02                shl    $0x2,%eax
c0105ccd:       01 d0                   add    %edx,%eax
c0105ccf:       c1 e0 02                shl    $0x2,%eax
c0105cd2:       89 c2                   mov    %eax,%edx
c0105cd4:       8b 45 08                mov    0x8(%ebp),%eax
c0105cd7:       01 d0                   add    %edx,%eax
c0105cd9:       3b 45 f4                cmp    -0xc(%ebp),%eax
c0105cdc:       0f 85 13 ff ff ff       jne    c0105bf5 <buddy_init_memmap+0x3b>
        set_page_ref(p, 0);
        list_add(&free_list, &(p->page_link));
    }

    // 这里只是简化处理，这样存在一个问题，真正可用的页数就是小于等于n的最大的一个2^k次幂，所以size - n 将浪费掉，也可以继续分割（size - n）
    uint32_t size = uint32_round_down(n);
c0105ce2:       8b 45 0c                mov    0xc(%ebp),%eax
c0105ce5:       89 04 24                mov    %eax,(%esp)
c0105ce8:       e8 46 fa ff ff          call   c0105733 <uint32_round_down>
c0105ced:       89 45 f0                mov    %eax,-0x10(%ebp)
    base->property = n;
c0105cf0:       8b 45 08                mov    0x8(%ebp),%eax
c0105cf3:       8b 55 0c                mov    0xc(%ebp),%edx
c0105cf6:       89 50 08                mov    %edx,0x8(%eax)
    nr_free += n;
c0105cf9:       8b 15 c4 c9 10 c0       mov    0xc010c9c4,%edx
c0105cff:       8b 45 0c                mov    0xc(%ebp),%eax
c0105d02:       01 d0                   add    %edx,%eax
c0105d04:       a3 c4 c9 10 c0          mov    %eax,0xc010c9c4
    SetPageProperty(base);
c0105d09:       8b 45 08                mov    0x8(%ebp),%eax
c0105d0c:       83 c0 04                add    $0x4,%eax
c0105d0f:       c7 45 c4 01 00 00 00    movl   $0x1,-0x3c(%ebp)
c0105d16:       89 45 c0                mov    %eax,-0x40(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0105d19:       8b 45 c0                mov    -0x40(%ebp),%eax
c0105d1c:       8b 55 c4                mov    -0x3c(%ebp),%edx
c0105d1f:       0f ab 10                bts    %edx,(%eax)
    buddy_new(size);
c0105d22:       8b 45 f0                mov    -0x10(%ebp),%eax
c0105d25:       89 04 24                mov    %eax,(%esp)
c0105d28:       e8 1e fa ff ff          call   c010574b <buddy_new>
    cprintf("buddy_init_memmap, n = [%d], size = [%d], root size = [%d]\n", n, size, sizeof(*root));
c0105d2d:       c7 44 24 0c 04 00 40    movl   $0x400004,0xc(%esp)
c0105d34:       00
c0105d35:       8b 45 f0                mov    -0x10(%ebp),%eax
c0105d38:       89 44 24 08             mov    %eax,0x8(%esp)
c0105d3c:       8b 45 0c                mov    0xc(%ebp),%eax
c0105d3f:       89 44 24 04             mov    %eax,0x4(%esp)
c0105d43:       c7 04 24 e0 80 10 c0    movl   $0xc01080e0,(%esp)
c0105d4a:       e8 97 a5 ff ff          call   c01002e6 <cprintf>
    cprintf("buddy_init_memmap, root = [%p], root->size = [%d], root->longest = [%p]\n", root, root->size, root->longest);
c0105d4f:       a1 38 ba 10 c0          mov    0xc010ba38,%eax
c0105d54:       8d 48 04                lea    0x4(%eax),%ecx
c0105d57:       a1 38 ba 10 c0          mov    0xc010ba38,%eax
c0105d5c:       8b 10                   mov    (%eax),%edx
c0105d5e:       a1 38 ba 10 c0          mov    0xc010ba38,%eax
c0105d63:       89 4c 24 0c             mov    %ecx,0xc(%esp)
c0105d67:       89 54 24 08             mov    %edx,0x8(%esp)
c0105d6b:       89 44 24 04             mov    %eax,0x4(%esp)
c0105d6f:       c7 04 24 1c 81 10 c0    movl   $0xc010811c,(%esp)
c0105d76:       e8 6b a5 ff ff          call   c01002e6 <cprintf>
}
c0105d7b:       c9                      leave
c0105d7c:       c3                      ret

c0105d7d <buddy_alloc_pages>:

// 分配的逻辑是：
// 1、首先在buddy的“二叉树”结构中找到应该分配的物理页在整个实际双向链表中的位置
// 2、而后把相应的page进行标识表明该物理页已经分出去了。
static struct Page *
buddy_alloc_pages(size_t n) {
c0105d7d:       55                      push   %ebp
c0105d7e:       89 e5                   mov    %esp,%ebp
c0105d80:       83 ec 58                sub    $0x58,%esp
    int i;
    int alloc_size = n;
c0105d83:       8b 45 08                mov    0x8(%ebp),%eax
c0105d86:       89 45 f0                mov    %eax,-0x10(%ebp)
    struct Page* page = NULL;
c0105d89:       c7 45 e4 00 00 00 00    movl   $0x0,-0x1c(%ebp)
    struct Page* p;
    assert(n > 0);
c0105d90:       83 7d 08 00             cmpl   $0x0,0x8(%ebp)
c0105d94:       75 24                   jne    c0105dba <buddy_alloc_pages+0x3d>
c0105d96:       c7 44 24 0c c8 80 10    movl   $0xc01080c8,0xc(%esp)
c0105d9d:       c0
c0105d9e:       c7 44 24 08 70 80 10    movl   $0xc0108070,0x8(%esp)
c0105da5:       c0
c0105da6:       c7 44 24 04 f8 00 00    movl   $0xf8,0x4(%esp)
c0105dad:       00
c0105dae:       c7 04 24 85 80 10 c0    movl   $0xc0108085,(%esp)
c0105db5:       e8 83 a6 ff ff          call   c010043d <__panic>
    if (n > nr_free) {
c0105dba:       a1 c4 c9 10 c0          mov    0xc010c9c4,%eax
c0105dbf:       3b 45 08                cmp    0x8(%ebp),%eax
c0105dc2:       73 0a                   jae    c0105dce <buddy_alloc_pages+0x51>
        return NULL;
c0105dc4:       b8 00 00 00 00          mov    $0x0,%eax
c0105dc9:       e9 58 01 00 00          jmp    c0105f26 <buddy_alloc_pages+0x1a9>
    }

    if (!IS_POWER_OF_2(n)) {
c0105dce:       8b 45 08                mov    0x8(%ebp),%eax
c0105dd1:       83 e8 01                sub    $0x1,%eax
c0105dd4:       23 45 08                and    0x8(%ebp),%eax
c0105dd7:       85 c0                   test   %eax,%eax
c0105dd9:       74 0e                   je     c0105de9 <buddy_alloc_pages+0x6c>
        alloc_size = uint32_round_up(n);
c0105ddb:       8b 45 08                mov    0x8(%ebp),%eax
c0105dde:       89 04 24                mov    %eax,(%esp)
c0105de1:       e8 12 f9 ff ff          call   c01056f8 <uint32_round_up>
c0105de6:       89 45 f0                mov    %eax,-0x10(%ebp)
    }

    // 记录偏移量
    uint32_t offset = buddy_alloc(root, alloc_size);
c0105de9:       8b 55 f0                mov    -0x10(%ebp),%edx
c0105dec:       a1 38 ba 10 c0          mov    0xc010ba38,%eax
c0105df1:       89 54 24 04             mov    %edx,0x4(%esp)
c0105df5:       89 04 24                mov    %eax,(%esp)
c0105df8:       e8 46 fa ff ff          call   c0105843 <buddy_alloc>
c0105dfd:       89 45 e0                mov    %eax,-0x20(%ebp)
    alloced[nr_block].offset = offset;
c0105e00:       8b 15 4c c9 10 c0       mov    0xc010c94c,%edx
c0105e06:       89 d0                   mov    %edx,%eax
c0105e08:       01 c0                   add    %eax,%eax
c0105e0a:       01 d0                   add    %edx,%eax
c0105e0c:       c1 e0 02                shl    $0x2,%eax
c0105e0f:       8d 90 e0 c9 10 c0       lea    -0x3fef3620(%eax),%edx
c0105e15:       8b 45 e0                mov    -0x20(%ebp),%eax
c0105e18:       89 42 04                mov    %eax,0x4(%edx)
c0105e1b:       c7 45 dc bc c9 10 c0    movl   $0xc010c9bc,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105e22:       8b 45 dc                mov    -0x24(%ebp),%eax
c0105e25:       8b 40 04                mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list);
c0105e28:       89 45 e8                mov    %eax,-0x18(%ebp)

    for (i = 0; i < offset; i++) {
c0105e2b:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
c0105e32:       eb 13                   jmp    c0105e47 <buddy_alloc_pages+0xca>
c0105e34:       8b 45 e8                mov    -0x18(%ebp),%eax
c0105e37:       89 45 d8                mov    %eax,-0x28(%ebp)
c0105e3a:       8b 45 d8                mov    -0x28(%ebp),%eax
c0105e3d:       8b 40 04                mov    0x4(%eax),%eax
        le = list_next(le);
c0105e40:       89 45 e8                mov    %eax,-0x18(%ebp)
    // 记录偏移量
    uint32_t offset = buddy_alloc(root, alloc_size);
    alloced[nr_block].offset = offset;
    list_entry_t *le = list_next(&free_list);

    for (i = 0; i < offset; i++) {
c0105e43:       83 45 f4 01             addl   $0x1,-0xc(%ebp)
c0105e47:       8b 45 f4                mov    -0xc(%ebp),%eax
c0105e4a:       3b 45 e0                cmp    -0x20(%ebp),%eax
c0105e4d:       72 e5                   jb     c0105e34 <buddy_alloc_pages+0xb7>
        le = list_next(le);
    }

    page = le2page(le, page_link);
c0105e4f:       8b 45 e8                mov    -0x18(%ebp),%eax
c0105e52:       83 e8 0c                sub    $0xc,%eax
c0105e55:       89 45 e4                mov    %eax,-0x1c(%ebp)

    // 根据需求n得到块大小
    // 记录分配块首页
    // 记录分配的页数
    alloced[nr_block].base = page;
c0105e58:       8b 15 4c c9 10 c0       mov    0xc010c94c,%edx
c0105e5e:       89 d0                   mov    %edx,%eax
c0105e60:       01 c0                   add    %eax,%eax
c0105e62:       01 d0                   add    %edx,%eax
c0105e64:       c1 e0 02                shl    $0x2,%eax
c0105e67:       8d 90 e0 c9 10 c0       lea    -0x3fef3620(%eax),%edx
c0105e6d:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0105e70:       89 02                   mov    %eax,(%edx)
    alloced[nr_block].nr = alloc_size;
c0105e72:       8b 15 4c c9 10 c0       mov    0xc010c94c,%edx
c0105e78:       8b 4d f0                mov    -0x10(%ebp),%ecx
c0105e7b:       89 d0                   mov    %edx,%eax
c0105e7d:       01 c0                   add    %eax,%eax
c0105e7f:       01 d0                   add    %edx,%eax
c0105e81:       c1 e0 02                shl    $0x2,%eax
c0105e84:       05 e0 c9 10 c0          add    $0xc010c9e0,%eax
c0105e89:       89 48 08                mov    %ecx,0x8(%eax)
    for (p = page; p != page + alloc_size; p++) {
c0105e8c:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0105e8f:       89 45 ec                mov    %eax,-0x14(%ebp)
c0105e92:       eb 1d                   jmp    c0105eb1 <buddy_alloc_pages+0x134>
        ClearPageProperty(p);
c0105e94:       8b 45 ec                mov    -0x14(%ebp),%eax
c0105e97:       83 c0 04                add    $0x4,%eax
c0105e9a:       c7 45 d4 01 00 00 00    movl   $0x1,-0x2c(%ebp)
c0105ea1:       89 45 d0                mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0105ea4:       8b 45 d0                mov    -0x30(%ebp),%eax
c0105ea7:       8b 55 d4                mov    -0x2c(%ebp),%edx
c0105eaa:       0f b3 10                btr    %edx,(%eax)
    // 根据需求n得到块大小
    // 记录分配块首页
    // 记录分配的页数
    alloced[nr_block].base = page;
    alloced[nr_block].nr = alloc_size;
    for (p = page; p != page + alloc_size; p++) {
c0105ead:       83 45 ec 14             addl   $0x14,-0x14(%ebp)
c0105eb1:       8b 55 f0                mov    -0x10(%ebp),%edx
c0105eb4:       89 d0                   mov    %edx,%eax
c0105eb6:       c1 e0 02                shl    $0x2,%eax
c0105eb9:       01 d0                   add    %edx,%eax
c0105ebb:       c1 e0 02                shl    $0x2,%eax
c0105ebe:       89 c2                   mov    %eax,%edx
c0105ec0:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0105ec3:       01 d0                   add    %edx,%eax
c0105ec5:       3b 45 ec                cmp    -0x14(%ebp),%eax
c0105ec8:       75 ca                   jne    c0105e94 <buddy_alloc_pages+0x117>
        ClearPageProperty(p);
    }

    page->property = alloc_size;
c0105eca:       8b 55 f0                mov    -0x10(%ebp),%edx
c0105ecd:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0105ed0:       89 50 08                mov    %edx,0x8(%eax)
    cprintf("buddy_alloc_pages, need page = [%d], nr_block = [%d], page = [%p], nr = [%d], offset = [%d]\n",
c0105ed3:       a1 4c c9 10 c0          mov    0xc010c94c,%eax
c0105ed8:       8b 55 e0                mov    -0x20(%ebp),%edx
c0105edb:       89 54 24 14             mov    %edx,0x14(%esp)
c0105edf:       8b 55 f0                mov    -0x10(%ebp),%edx
c0105ee2:       89 54 24 10             mov    %edx,0x10(%esp)
c0105ee6:       8b 55 e4                mov    -0x1c(%ebp),%edx
c0105ee9:       89 54 24 0c             mov    %edx,0xc(%esp)
c0105eed:       89 44 24 08             mov    %eax,0x8(%esp)
c0105ef1:       8b 45 08                mov    0x8(%ebp),%eax
c0105ef4:       89 44 24 04             mov    %eax,0x4(%esp)
c0105ef8:       c7 04 24 68 81 10 c0    movl   $0xc0108168,(%esp)
c0105eff:       e8 e2 a3 ff ff          call   c01002e6 <cprintf>
            n, nr_block, page, alloc_size, offset);

    nr_free -= alloc_size;
c0105f04:       8b 15 c4 c9 10 c0       mov    0xc010c9c4,%edx
c0105f0a:       8b 45 f0                mov    -0x10(%ebp),%eax
c0105f0d:       29 c2                   sub    %eax,%edx
c0105f0f:       89 d0                   mov    %edx,%eax
c0105f11:       a3 c4 c9 10 c0          mov    %eax,0xc010c9c4
    nr_block++;
c0105f16:       a1 4c c9 10 c0          mov    0xc010c94c,%eax
c0105f1b:       83 c0 01                add    $0x1,%eax
c0105f1e:       a3 4c c9 10 c0          mov    %eax,0xc010c94c
    return page;
c0105f23:       8b 45 e4                mov    -0x1c(%ebp),%eax
}
c0105f26:       c9                      leave
c0105f27:       c3                      ret

c0105f28 <buddy_free_pages>:
 *
 * @param base
 * @param n
 */
static void
buddy_free_pages(struct Page *base, size_t n) {
c0105f28:       55                      push   %ebp
c0105f29:       89 e5                   mov    %esp,%ebp
c0105f2b:       83 ec 48                sub    $0x48,%esp
    uint32_t node_size, index = 0;
c0105f2e:       c7 45 e8 00 00 00 00    movl   $0x0,-0x18(%ebp)
    uint32_t left_longest, right_longest;
    uint32_t position = 0;
c0105f35:       c7 45 e4 00 00 00 00    movl   $0x0,-0x1c(%ebp)
    struct buddy* self = root;
c0105f3c:       a1 38 ba 10 c0          mov    0xc010ba38,%eax
c0105f41:       89 45 e0                mov    %eax,-0x20(%ebp)
    int i = 0;
c0105f44:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
    for (i = 0; i < nr_block; i++) {
c0105f4b:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
c0105f52:       eb 1e                   jmp    c0105f72 <buddy_free_pages+0x4a>
        if (alloced[i].base == base) {
c0105f54:       8b 55 f4                mov    -0xc(%ebp),%edx
c0105f57:       89 d0                   mov    %edx,%eax
c0105f59:       01 c0                   add    %eax,%eax
c0105f5b:       01 d0                   add    %edx,%eax
c0105f5d:       c1 e0 02                shl    $0x2,%eax
c0105f60:       05 e0 c9 10 c0          add    $0xc010c9e0,%eax
c0105f65:       8b 00                   mov    (%eax),%eax
c0105f67:       3b 45 08                cmp    0x8(%ebp),%eax
c0105f6a:       75 02                   jne    c0105f6e <buddy_free_pages+0x46>
            break;
c0105f6c:       eb 10                   jmp    c0105f7e <buddy_free_pages+0x56>
    uint32_t node_size, index = 0;
    uint32_t left_longest, right_longest;
    uint32_t position = 0;
    struct buddy* self = root;
    int i = 0;
    for (i = 0; i < nr_block; i++) {
c0105f6e:       83 45 f4 01             addl   $0x1,-0xc(%ebp)
c0105f72:       8b 55 f4                mov    -0xc(%ebp),%edx
c0105f75:       a1 4c c9 10 c0          mov    0xc010c94c,%eax
c0105f7a:       39 c2                   cmp    %eax,%edx
c0105f7c:       72 d6                   jb     c0105f54 <buddy_free_pages+0x2c>
            break;
        }
    }


    uint32_t offset = alloced[i].offset;
c0105f7e:       8b 55 f4                mov    -0xc(%ebp),%edx
c0105f81:       89 d0                   mov    %edx,%eax
c0105f83:       01 c0                   add    %eax,%eax
c0105f85:       01 d0                   add    %edx,%eax
c0105f87:       c1 e0 02                shl    $0x2,%eax
c0105f8a:       05 e0 c9 10 c0          add    $0xc010c9e0,%eax
c0105f8f:       8b 40 04                mov    0x4(%eax),%eax
c0105f92:       89 45 dc                mov    %eax,-0x24(%ebp)
    position = i;
c0105f95:       8b 45 f4                mov    -0xc(%ebp),%eax
c0105f98:       89 45 e4                mov    %eax,-0x1c(%ebp)
    i = 0;
c0105f9b:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
c0105fa2:       c7 45 d4 bc c9 10 c0    movl   $0xc010c9bc,-0x2c(%ebp)
c0105fa9:       8b 45 d4                mov    -0x2c(%ebp),%eax
c0105fac:       8b 40 04                mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list);
c0105faf:       89 45 f0                mov    %eax,-0x10(%ebp)

    while (i < offset) {
c0105fb2:       eb 13                   jmp    c0105fc7 <buddy_free_pages+0x9f>
c0105fb4:       8b 45 f0                mov    -0x10(%ebp),%eax
c0105fb7:       89 45 d0                mov    %eax,-0x30(%ebp)
c0105fba:       8b 45 d0                mov    -0x30(%ebp),%eax
c0105fbd:       8b 40 04                mov    0x4(%eax),%eax
        le = list_next(le);
c0105fc0:       89 45 f0                mov    %eax,-0x10(%ebp)
        i++;
c0105fc3:       83 45 f4 01             addl   $0x1,-0xc(%ebp)
    uint32_t offset = alloced[i].offset;
    position = i;
    i = 0;
    list_entry_t *le = list_next(&free_list);

    while (i < offset) {
c0105fc7:       8b 45 f4                mov    -0xc(%ebp),%eax
c0105fca:       3b 45 dc                cmp    -0x24(%ebp),%eax
c0105fcd:       72 e5                   jb     c0105fb4 <buddy_free_pages+0x8c>
        le = list_next(le);
        i++;
    }

    int allocPages = n;
c0105fcf:       8b 45 0c                mov    0xc(%ebp),%eax
c0105fd2:       89 45 ec                mov    %eax,-0x14(%ebp)
    if (!IS_POWER_OF_2(n)) {
c0105fd5:       8b 45 0c                mov    0xc(%ebp),%eax
c0105fd8:       83 e8 01                sub    $0x1,%eax
c0105fdb:       23 45 0c                and    0xc(%ebp),%eax
c0105fde:       85 c0                   test   %eax,%eax
c0105fe0:       74 0e                   je     c0105ff0 <buddy_free_pages+0xc8>
        allocPages = uint32_round_up(n);
c0105fe2:       8b 45 0c                mov    0xc(%ebp),%eax
c0105fe5:       89 04 24                mov    %eax,(%esp)
c0105fe8:       e8 0b f7 ff ff          call   c01056f8 <uint32_round_up>
c0105fed:       89 45 ec                mov    %eax,-0x14(%ebp)
    }

    assert(self && offset >= 0 && offset <= self->size);
c0105ff0:       83 7d e0 00             cmpl   $0x0,-0x20(%ebp)
c0105ff4:       74 0a                   je     c0106000 <buddy_free_pages+0xd8>
c0105ff6:       8b 45 e0                mov    -0x20(%ebp),%eax
c0105ff9:       8b 00                   mov    (%eax),%eax
c0105ffb:       3b 45 dc                cmp    -0x24(%ebp),%eax
c0105ffe:       73 24                   jae    c0106024 <buddy_free_pages+0xfc>
c0106000:       c7 44 24 0c 9c 80 10    movl   $0xc010809c,0xc(%esp)
c0106007:       c0
c0106008:       c7 44 24 08 70 80 10    movl   $0xc0108070,0x8(%esp)
c010600f:       c0
c0106010:       c7 44 24 04 45 01 00    movl   $0x145,0x4(%esp)
c0106017:       00
c0106018:       c7 04 24 85 80 10 c0    movl   $0xc0108085,(%esp)
c010601f:       e8 19 a4 ff ff          call   c010043d <__panic>

    nr_free += allocPages;
c0106024:       8b 15 c4 c9 10 c0       mov    0xc010c9c4,%edx
c010602a:       8b 45 ec                mov    -0x14(%ebp),%eax
c010602d:       01 d0                   add    %edx,%eax
c010602f:       a3 c4 c9 10 c0          mov    %eax,0xc010c9c4
    struct Page *p;
    for (i = 0; i < allocPages; i++) {
c0106034:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
c010603b:       eb 45                   jmp    c0106082 <buddy_free_pages+0x15a>
        p = le2page(le, page_link);
c010603d:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106040:       83 e8 0c                sub    $0xc,%eax
c0106043:       89 45 d8                mov    %eax,-0x28(%ebp)
        p->flags = p->property = 0;
c0106046:       8b 45 d8                mov    -0x28(%ebp),%eax
c0106049:       c7 40 08 00 00 00 00    movl   $0x0,0x8(%eax)
c0106050:       8b 45 d8                mov    -0x28(%ebp),%eax
c0106053:       8b 50 08                mov    0x8(%eax),%edx
c0106056:       8b 45 d8                mov    -0x28(%ebp),%eax
c0106059:       89 50 04                mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c010605c:       c7 44 24 04 00 00 00    movl   $0x0,0x4(%esp)
c0106063:       00
c0106064:       8b 45 d8                mov    -0x28(%ebp),%eax
c0106067:       89 04 24                mov    %eax,(%esp)
c010606a:       e8 7c f6 ff ff          call   c01056eb <set_page_ref>
c010606f:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106072:       89 45 cc                mov    %eax,-0x34(%ebp)
c0106075:       8b 45 cc                mov    -0x34(%ebp),%eax
c0106078:       8b 40 04                mov    0x4(%eax),%eax
        le = list_next(le);
c010607b:       89 45 f0                mov    %eax,-0x10(%ebp)

    assert(self && offset >= 0 && offset <= self->size);

    nr_free += allocPages;
    struct Page *p;
    for (i = 0; i < allocPages; i++) {
c010607e:       83 45 f4 01             addl   $0x1,-0xc(%ebp)
c0106082:       8b 45 f4                mov    -0xc(%ebp),%eax
c0106085:       3b 45 ec                cmp    -0x14(%ebp),%eax
c0106088:       7c b3                   jl     c010603d <buddy_free_pages+0x115>
        p->flags = p->property = 0;
        set_page_ref(p, 0);
        le = list_next(le);
    }

    buddy_free(root, offset);
c010608a:       a1 38 ba 10 c0          mov    0xc010ba38,%eax
c010608f:       8b 55 dc                mov    -0x24(%ebp),%edx
c0106092:       89 54 24 04             mov    %edx,0x4(%esp)
c0106096:       89 04 24                mov    %eax,(%esp)
c0106099:       e8 6e f9 ff ff          call   c0105a0c <buddy_free>

    nr_block--;
c010609e:       a1 4c c9 10 c0          mov    0xc010c94c,%eax
c01060a3:       83 e8 01                sub    $0x1,%eax
c01060a6:       a3 4c c9 10 c0          mov    %eax,0xc010c94c
}
c01060ab:       c9                      leave
c01060ac:       c3                      ret

c01060ad <buddy_nr_free_pages>:

static size_t
buddy_nr_free_pages(void) {
c01060ad:       55                      push   %ebp
c01060ae:       89 e5                   mov    %esp,%ebp
    return nr_free;
c01060b0:       a1 c4 c9 10 c0          mov    0xc010c9c4,%eax
}
c01060b5:       5d                      pop    %ebp
c01060b6:       c3                      ret

c01060b7 <buddy_check>:

static void
buddy_check(void) {
c01060b7:       55                      push   %ebp
c01060b8:       89 e5                   mov    %esp,%ebp
c01060ba:       83 ec 28                sub    $0x28,%esp
    struct Page *p0, *A, *B, *C, *D;
    p0 = alloc_page();
c01060bd:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c01060c4:       e8 92 cc ff ff          call   c0102d5b <alloc_pages>
c01060c9:       89 45 f4                mov    %eax,-0xc(%ebp)
    A = alloc_page();
c01060cc:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c01060d3:       e8 83 cc ff ff          call   c0102d5b <alloc_pages>
c01060d8:       89 45 f0                mov    %eax,-0x10(%ebp)
    B = alloc_page();
c01060db:       c7 04 24 01 00 00 00    movl   $0x1,(%esp)
c01060e2:       e8 74 cc ff ff          call   c0102d5b <alloc_pages>
c01060e7:       89 45 ec                mov    %eax,-0x14(%ebp)

    cprintf("p0 = [%p]\n", p0);
c01060ea:       8b 45 f4                mov    -0xc(%ebp),%eax
c01060ed:       89 44 24 04             mov    %eax,0x4(%esp)
c01060f1:       c7 04 24 c5 81 10 c0    movl   $0xc01081c5,(%esp)
c01060f8:       e8 e9 a1 ff ff          call   c01002e6 <cprintf>
    cprintf("A = [%p]\n", A);
c01060fd:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106100:       89 44 24 04             mov    %eax,0x4(%esp)
c0106104:       c7 04 24 d0 81 10 c0    movl   $0xc01081d0,(%esp)
c010610b:       e8 d6 a1 ff ff          call   c01002e6 <cprintf>
    cprintf("B = [%p]\n", B);
c0106110:       8b 45 ec                mov    -0x14(%ebp),%eax
c0106113:       89 44 24 04             mov    %eax,0x4(%esp)
c0106117:       c7 04 24 da 81 10 c0    movl   $0xc01081da,(%esp)
c010611e:       e8 c3 a1 ff ff          call   c01002e6 <cprintf>
    assert(p0 != NULL);
c0106123:       83 7d f4 00             cmpl   $0x0,-0xc(%ebp)
c0106127:       75 24                   jne    c010614d <buddy_check+0x96>
c0106129:       c7 44 24 0c e4 81 10    movl   $0xc01081e4,0xc(%esp)
c0106130:       c0
c0106131:       c7 44 24 08 70 80 10    movl   $0xc0108070,0x8(%esp)
c0106138:       c0
c0106139:       c7 44 24 04 64 01 00    movl   $0x164,0x4(%esp)
c0106140:       00
c0106141:       c7 04 24 85 80 10 c0    movl   $0xc0108085,(%esp)
c0106148:       e8 f0 a2 ff ff          call   c010043d <__panic>
    assert(A != NULL);
c010614d:       83 7d f0 00             cmpl   $0x0,-0x10(%ebp)
c0106151:       75 24                   jne    c0106177 <buddy_check+0xc0>
c0106153:       c7 44 24 0c ef 81 10    movl   $0xc01081ef,0xc(%esp)
c010615a:       c0
c010615b:       c7 44 24 08 70 80 10    movl   $0xc0108070,0x8(%esp)
c0106162:       c0
c0106163:       c7 44 24 04 65 01 00    movl   $0x165,0x4(%esp)
c010616a:       00
c010616b:       c7 04 24 85 80 10 c0    movl   $0xc0108085,(%esp)
c0106172:       e8 c6 a2 ff ff          call   c010043d <__panic>
    assert(B != NULL);
c0106177:       83 7d ec 00             cmpl   $0x0,-0x14(%ebp)
c010617b:       75 24                   jne    c01061a1 <buddy_check+0xea>
c010617d:       c7 44 24 0c f9 81 10    movl   $0xc01081f9,0xc(%esp)
c0106184:       c0
c0106185:       c7 44 24 08 70 80 10    movl   $0xc0108070,0x8(%esp)
c010618c:       c0
c010618d:       c7 44 24 04 66 01 00    movl   $0x166,0x4(%esp)
c0106194:       00
c0106195:       c7 04 24 85 80 10 c0    movl   $0xc0108085,(%esp)
c010619c:       e8 9c a2 ff ff          call   c010043d <__panic>

    assert(p0 != A && p0 != B && A != B);
c01061a1:       8b 45 f4                mov    -0xc(%ebp),%eax
c01061a4:       3b 45 f0                cmp    -0x10(%ebp),%eax
c01061a7:       74 10                   je     c01061b9 <buddy_check+0x102>
c01061a9:       8b 45 f4                mov    -0xc(%ebp),%eax
c01061ac:       3b 45 ec                cmp    -0x14(%ebp),%eax
c01061af:       74 08                   je     c01061b9 <buddy_check+0x102>
c01061b1:       8b 45 f0                mov    -0x10(%ebp),%eax
c01061b4:       3b 45 ec                cmp    -0x14(%ebp),%eax
c01061b7:       75 24                   jne    c01061dd <buddy_check+0x126>
c01061b9:       c7 44 24 0c 03 82 10    movl   $0xc0108203,0xc(%esp)
c01061c0:       c0
c01061c1:       c7 44 24 08 70 80 10    movl   $0xc0108070,0x8(%esp)
c01061c8:       c0
c01061c9:       c7 44 24 04 68 01 00    movl   $0x168,0x4(%esp)
c01061d0:       00
c01061d1:       c7 04 24 85 80 10 c0    movl   $0xc0108085,(%esp)
c01061d8:       e8 60 a2 ff ff          call   c010043d <__panic>
    free_page(p0);
c01061dd:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c01061e4:       00
c01061e5:       8b 45 f4                mov    -0xc(%ebp),%eax
c01061e8:       89 04 24                mov    %eax,(%esp)
c01061eb:       e8 a3 cb ff ff          call   c0102d93 <free_pages>
    free_page(A);
c01061f0:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c01061f7:       00
c01061f8:       8b 45 f0                mov    -0x10(%ebp),%eax
c01061fb:       89 04 24                mov    %eax,(%esp)
c01061fe:       e8 90 cb ff ff          call   c0102d93 <free_pages>
    free_page(B);
c0106203:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
c010620a:       00
c010620b:       8b 45 ec                mov    -0x14(%ebp),%eax
c010620e:       89 04 24                mov    %eax,(%esp)
c0106211:       e8 7d cb ff ff          call   c0102d93 <free_pages>

    A = alloc_pages(500);
c0106216:       c7 04 24 f4 01 00 00    movl   $0x1f4,(%esp)
c010621d:       e8 39 cb ff ff          call   c0102d5b <alloc_pages>
c0106222:       89 45 f0                mov    %eax,-0x10(%ebp)
    B = alloc_pages(500);
c0106225:       c7 04 24 f4 01 00 00    movl   $0x1f4,(%esp)
c010622c:       e8 2a cb ff ff          call   c0102d5b <alloc_pages>
c0106231:       89 45 ec                mov    %eax,-0x14(%ebp)
    cprintf("A %p\n", A);
c0106234:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106237:       89 44 24 04             mov    %eax,0x4(%esp)
c010623b:       c7 04 24 20 82 10 c0    movl   $0xc0108220,(%esp)
c0106242:       e8 9f a0 ff ff          call   c01002e6 <cprintf>
    cprintf("B %p\n", B);
c0106247:       8b 45 ec                mov    -0x14(%ebp),%eax
c010624a:       89 44 24 04             mov    %eax,0x4(%esp)
c010624e:       c7 04 24 26 82 10 c0    movl   $0xc0108226,(%esp)
c0106255:       e8 8c a0 ff ff          call   c01002e6 <cprintf>

    free_pages(A, 500);
c010625a:       c7 44 24 04 f4 01 00    movl   $0x1f4,0x4(%esp)
c0106261:       00
c0106262:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106265:       89 04 24                mov    %eax,(%esp)
c0106268:       e8 26 cb ff ff          call   c0102d93 <free_pages>
    free_pages(B, 500);
c010626d:       c7 44 24 04 f4 01 00    movl   $0x1f4,0x4(%esp)
c0106274:       00
c0106275:       8b 45 ec                mov    -0x14(%ebp),%eax
c0106278:       89 04 24                mov    %eax,(%esp)
c010627b:       e8 13 cb ff ff          call   c0102d93 <free_pages>
    // free_pages(D,60);
    // cprintf("C %p\n",C);
    // free_pages(C,80);
    // free_pages(p0,1000);//全部释放

}
c0106280:       c9                      leave
c0106281:       c3                      ret

c0106282 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c0106282:       55                      push   %ebp
c0106283:       89 e5                   mov    %esp,%ebp
c0106285:       83 ec 10                sub    $0x10,%esp
    size_t cnt = 0;
c0106288:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010628f:       eb 04                   jmp    c0106295 <strlen+0x13>
        cnt ++;
c0106291:       83 45 fc 01             addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c0106295:       8b 45 08                mov    0x8(%ebp),%eax
c0106298:       8d 50 01                lea    0x1(%eax),%edx
c010629b:       89 55 08                mov    %edx,0x8(%ebp)
c010629e:       0f b6 00                movzbl (%eax),%eax
c01062a1:       84 c0                   test   %al,%al
c01062a3:       75 ec                   jne    c0106291 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c01062a5:       8b 45 fc                mov    -0x4(%ebp),%eax
}
c01062a8:       c9                      leave
c01062a9:       c3                      ret

c01062aa <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c01062aa:       55                      push   %ebp
c01062ab:       89 e5                   mov    %esp,%ebp
c01062ad:       83 ec 10                sub    $0x10,%esp
    size_t cnt = 0;
c01062b0:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c01062b7:       eb 04                   jmp    c01062bd <strnlen+0x13>
        cnt ++;
c01062b9:       83 45 fc 01             addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c01062bd:       8b 45 fc                mov    -0x4(%ebp),%eax
c01062c0:       3b 45 0c                cmp    0xc(%ebp),%eax
c01062c3:       73 10                   jae    c01062d5 <strnlen+0x2b>
c01062c5:       8b 45 08                mov    0x8(%ebp),%eax
c01062c8:       8d 50 01                lea    0x1(%eax),%edx
c01062cb:       89 55 08                mov    %edx,0x8(%ebp)
c01062ce:       0f b6 00                movzbl (%eax),%eax
c01062d1:       84 c0                   test   %al,%al
c01062d3:       75 e4                   jne    c01062b9 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c01062d5:       8b 45 fc                mov    -0x4(%ebp),%eax
}
c01062d8:       c9                      leave
c01062d9:       c3                      ret

c01062da <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c01062da:       55                      push   %ebp
c01062db:       89 e5                   mov    %esp,%ebp
c01062dd:       57                      push   %edi
c01062de:       56                      push   %esi
c01062df:       83 ec 20                sub    $0x20,%esp
c01062e2:       8b 45 08                mov    0x8(%ebp),%eax
c01062e5:       89 45 f4                mov    %eax,-0xc(%ebp)
c01062e8:       8b 45 0c                mov    0xc(%ebp),%eax
c01062eb:       89 45 f0                mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c01062ee:       8b 55 f0                mov    -0x10(%ebp),%edx
c01062f1:       8b 45 f4                mov    -0xc(%ebp),%eax
c01062f4:       89 d1                   mov    %edx,%ecx
c01062f6:       89 c2                   mov    %eax,%edx
c01062f8:       89 ce                   mov    %ecx,%esi
c01062fa:       89 d7                   mov    %edx,%edi
c01062fc:       ac                      lods   %ds:(%esi),%al
c01062fd:       aa                      stos   %al,%es:(%edi)
c01062fe:       84 c0                   test   %al,%al
c0106300:       75 fa                   jne    c01062fc <strcpy+0x22>
c0106302:       89 fa                   mov    %edi,%edx
c0106304:       89 f1                   mov    %esi,%ecx
c0106306:       89 4d ec                mov    %ecx,-0x14(%ebp)
c0106309:       89 55 e8                mov    %edx,-0x18(%ebp)
c010630c:       89 45 e4                mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010630f:       8b 45 f4                mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c0106312:       83 c4 20                add    $0x20,%esp
c0106315:       5e                      pop    %esi
c0106316:       5f                      pop    %edi
c0106317:       5d                      pop    %ebp
c0106318:       c3                      ret

c0106319 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c0106319:       55                      push   %ebp
c010631a:       89 e5                   mov    %esp,%ebp
c010631c:       83 ec 10                sub    $0x10,%esp
    char *p = dst;
c010631f:       8b 45 08                mov    0x8(%ebp),%eax
c0106322:       89 45 fc                mov    %eax,-0x4(%ebp)
    while (len > 0) {
c0106325:       eb 21                   jmp    c0106348 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c0106327:       8b 45 0c                mov    0xc(%ebp),%eax
c010632a:       0f b6 10                movzbl (%eax),%edx
c010632d:       8b 45 fc                mov    -0x4(%ebp),%eax
c0106330:       88 10                   mov    %dl,(%eax)
c0106332:       8b 45 fc                mov    -0x4(%ebp),%eax
c0106335:       0f b6 00                movzbl (%eax),%eax
c0106338:       84 c0                   test   %al,%al
c010633a:       74 04                   je     c0106340 <strncpy+0x27>
            src ++;
c010633c:       83 45 0c 01             addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c0106340:       83 45 fc 01             addl   $0x1,-0x4(%ebp)
c0106344:       83 6d 10 01             subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c0106348:       83 7d 10 00             cmpl   $0x0,0x10(%ebp)
c010634c:       75 d9                   jne    c0106327 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010634e:       8b 45 08                mov    0x8(%ebp),%eax
}
c0106351:       c9                      leave
c0106352:       c3                      ret

c0106353 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c0106353:       55                      push   %ebp
c0106354:       89 e5                   mov    %esp,%ebp
c0106356:       57                      push   %edi
c0106357:       56                      push   %esi
c0106358:       83 ec 20                sub    $0x20,%esp
c010635b:       8b 45 08                mov    0x8(%ebp),%eax
c010635e:       89 45 f4                mov    %eax,-0xc(%ebp)
c0106361:       8b 45 0c                mov    0xc(%ebp),%eax
c0106364:       89 45 f0                mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c0106367:       8b 55 f4                mov    -0xc(%ebp),%edx
c010636a:       8b 45 f0                mov    -0x10(%ebp),%eax
c010636d:       89 d1                   mov    %edx,%ecx
c010636f:       89 c2                   mov    %eax,%edx
c0106371:       89 ce                   mov    %ecx,%esi
c0106373:       89 d7                   mov    %edx,%edi
c0106375:       ac                      lods   %ds:(%esi),%al
c0106376:       ae                      scas   %es:(%edi),%al
c0106377:       75 08                   jne    c0106381 <strcmp+0x2e>
c0106379:       84 c0                   test   %al,%al
c010637b:       75 f8                   jne    c0106375 <strcmp+0x22>
c010637d:       31 c0                   xor    %eax,%eax
c010637f:       eb 04                   jmp    c0106385 <strcmp+0x32>
c0106381:       19 c0                   sbb    %eax,%eax
c0106383:       0c 01                   or     $0x1,%al
c0106385:       89 fa                   mov    %edi,%edx
c0106387:       89 f1                   mov    %esi,%ecx
c0106389:       89 45 ec                mov    %eax,-0x14(%ebp)
c010638c:       89 4d e8                mov    %ecx,-0x18(%ebp)
c010638f:       89 55 e4                mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c0106392:       8b 45 ec                mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c0106395:       83 c4 20                add    $0x20,%esp
c0106398:       5e                      pop    %esi
c0106399:       5f                      pop    %edi
c010639a:       5d                      pop    %ebp
c010639b:       c3                      ret

c010639c <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010639c:       55                      push   %ebp
c010639d:       89 e5                   mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010639f:       eb 0c                   jmp    c01063ad <strncmp+0x11>
        n --, s1 ++, s2 ++;
c01063a1:       83 6d 10 01             subl   $0x1,0x10(%ebp)
c01063a5:       83 45 08 01             addl   $0x1,0x8(%ebp)
c01063a9:       83 45 0c 01             addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c01063ad:       83 7d 10 00             cmpl   $0x0,0x10(%ebp)
c01063b1:       74 1a                   je     c01063cd <strncmp+0x31>
c01063b3:       8b 45 08                mov    0x8(%ebp),%eax
c01063b6:       0f b6 00                movzbl (%eax),%eax
c01063b9:       84 c0                   test   %al,%al
c01063bb:       74 10                   je     c01063cd <strncmp+0x31>
c01063bd:       8b 45 08                mov    0x8(%ebp),%eax
c01063c0:       0f b6 10                movzbl (%eax),%edx
c01063c3:       8b 45 0c                mov    0xc(%ebp),%eax
c01063c6:       0f b6 00                movzbl (%eax),%eax
c01063c9:       38 c2                   cmp    %al,%dl
c01063cb:       74 d4                   je     c01063a1 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c01063cd:       83 7d 10 00             cmpl   $0x0,0x10(%ebp)
c01063d1:       74 18                   je     c01063eb <strncmp+0x4f>
c01063d3:       8b 45 08                mov    0x8(%ebp),%eax
c01063d6:       0f b6 00                movzbl (%eax),%eax
c01063d9:       0f b6 d0                movzbl %al,%edx
c01063dc:       8b 45 0c                mov    0xc(%ebp),%eax
c01063df:       0f b6 00                movzbl (%eax),%eax
c01063e2:       0f b6 c0                movzbl %al,%eax
c01063e5:       29 c2                   sub    %eax,%edx
c01063e7:       89 d0                   mov    %edx,%eax
c01063e9:       eb 05                   jmp    c01063f0 <strncmp+0x54>
c01063eb:       b8 00 00 00 00          mov    $0x0,%eax
}
c01063f0:       5d                      pop    %ebp
c01063f1:       c3                      ret

c01063f2 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c01063f2:       55                      push   %ebp
c01063f3:       89 e5                   mov    %esp,%ebp
c01063f5:       83 ec 04                sub    $0x4,%esp
c01063f8:       8b 45 0c                mov    0xc(%ebp),%eax
c01063fb:       88 45 fc                mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c01063fe:       eb 14                   jmp    c0106414 <strchr+0x22>
        if (*s == c) {
c0106400:       8b 45 08                mov    0x8(%ebp),%eax
c0106403:       0f b6 00                movzbl (%eax),%eax
c0106406:       3a 45 fc                cmp    -0x4(%ebp),%al
c0106409:       75 05                   jne    c0106410 <strchr+0x1e>
            return (char *)s;
c010640b:       8b 45 08                mov    0x8(%ebp),%eax
c010640e:       eb 13                   jmp    c0106423 <strchr+0x31>
        }
        s ++;
c0106410:       83 45 08 01             addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c0106414:       8b 45 08                mov    0x8(%ebp),%eax
c0106417:       0f b6 00                movzbl (%eax),%eax
c010641a:       84 c0                   test   %al,%al
c010641c:       75 e2                   jne    c0106400 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010641e:       b8 00 00 00 00          mov    $0x0,%eax
}
c0106423:       c9                      leave
c0106424:       c3                      ret

c0106425 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c0106425:       55                      push   %ebp
c0106426:       89 e5                   mov    %esp,%ebp
c0106428:       83 ec 04                sub    $0x4,%esp
c010642b:       8b 45 0c                mov    0xc(%ebp),%eax
c010642e:       88 45 fc                mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0106431:       eb 11                   jmp    c0106444 <strfind+0x1f>
        if (*s == c) {
c0106433:       8b 45 08                mov    0x8(%ebp),%eax
c0106436:       0f b6 00                movzbl (%eax),%eax
c0106439:       3a 45 fc                cmp    -0x4(%ebp),%al
c010643c:       75 02                   jne    c0106440 <strfind+0x1b>
            break;
c010643e:       eb 0e                   jmp    c010644e <strfind+0x29>
        }
        s ++;
c0106440:       83 45 08 01             addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c0106444:       8b 45 08                mov    0x8(%ebp),%eax
c0106447:       0f b6 00                movzbl (%eax),%eax
c010644a:       84 c0                   test   %al,%al
c010644c:       75 e5                   jne    c0106433 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c010644e:       8b 45 08                mov    0x8(%ebp),%eax
}
c0106451:       c9                      leave
c0106452:       c3                      ret

c0106453 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c0106453:       55                      push   %ebp
c0106454:       89 e5                   mov    %esp,%ebp
c0106456:       83 ec 10                sub    $0x10,%esp
    int neg = 0;
c0106459:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%ebp)
    long val = 0;
c0106460:       c7 45 f8 00 00 00 00    movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c0106467:       eb 04                   jmp    c010646d <strtol+0x1a>
        s ++;
c0106469:       83 45 08 01             addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010646d:       8b 45 08                mov    0x8(%ebp),%eax
c0106470:       0f b6 00                movzbl (%eax),%eax
c0106473:       3c 20                   cmp    $0x20,%al
c0106475:       74 f2                   je     c0106469 <strtol+0x16>
c0106477:       8b 45 08                mov    0x8(%ebp),%eax
c010647a:       0f b6 00                movzbl (%eax),%eax
c010647d:       3c 09                   cmp    $0x9,%al
c010647f:       74 e8                   je     c0106469 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c0106481:       8b 45 08                mov    0x8(%ebp),%eax
c0106484:       0f b6 00                movzbl (%eax),%eax
c0106487:       3c 2b                   cmp    $0x2b,%al
c0106489:       75 06                   jne    c0106491 <strtol+0x3e>
        s ++;
c010648b:       83 45 08 01             addl   $0x1,0x8(%ebp)
c010648f:       eb 15                   jmp    c01064a6 <strtol+0x53>
    }
    else if (*s == '-') {
c0106491:       8b 45 08                mov    0x8(%ebp),%eax
c0106494:       0f b6 00                movzbl (%eax),%eax
c0106497:       3c 2d                   cmp    $0x2d,%al
c0106499:       75 0b                   jne    c01064a6 <strtol+0x53>
        s ++, neg = 1;
c010649b:       83 45 08 01             addl   $0x1,0x8(%ebp)
c010649f:       c7 45 fc 01 00 00 00    movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c01064a6:       83 7d 10 00             cmpl   $0x0,0x10(%ebp)
c01064aa:       74 06                   je     c01064b2 <strtol+0x5f>
c01064ac:       83 7d 10 10             cmpl   $0x10,0x10(%ebp)
c01064b0:       75 24                   jne    c01064d6 <strtol+0x83>
c01064b2:       8b 45 08                mov    0x8(%ebp),%eax
c01064b5:       0f b6 00                movzbl (%eax),%eax
c01064b8:       3c 30                   cmp    $0x30,%al
c01064ba:       75 1a                   jne    c01064d6 <strtol+0x83>
c01064bc:       8b 45 08                mov    0x8(%ebp),%eax
c01064bf:       83 c0 01                add    $0x1,%eax
c01064c2:       0f b6 00                movzbl (%eax),%eax
c01064c5:       3c 78                   cmp    $0x78,%al
c01064c7:       75 0d                   jne    c01064d6 <strtol+0x83>
        s += 2, base = 16;
c01064c9:       83 45 08 02             addl   $0x2,0x8(%ebp)
c01064cd:       c7 45 10 10 00 00 00    movl   $0x10,0x10(%ebp)
c01064d4:       eb 2a                   jmp    c0106500 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c01064d6:       83 7d 10 00             cmpl   $0x0,0x10(%ebp)
c01064da:       75 17                   jne    c01064f3 <strtol+0xa0>
c01064dc:       8b 45 08                mov    0x8(%ebp),%eax
c01064df:       0f b6 00                movzbl (%eax),%eax
c01064e2:       3c 30                   cmp    $0x30,%al
c01064e4:       75 0d                   jne    c01064f3 <strtol+0xa0>
        s ++, base = 8;
c01064e6:       83 45 08 01             addl   $0x1,0x8(%ebp)
c01064ea:       c7 45 10 08 00 00 00    movl   $0x8,0x10(%ebp)
c01064f1:       eb 0d                   jmp    c0106500 <strtol+0xad>
    }
    else if (base == 0) {
c01064f3:       83 7d 10 00             cmpl   $0x0,0x10(%ebp)
c01064f7:       75 07                   jne    c0106500 <strtol+0xad>
        base = 10;
c01064f9:       c7 45 10 0a 00 00 00    movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c0106500:       8b 45 08                mov    0x8(%ebp),%eax
c0106503:       0f b6 00                movzbl (%eax),%eax
c0106506:       3c 2f                   cmp    $0x2f,%al
c0106508:       7e 1b                   jle    c0106525 <strtol+0xd2>
c010650a:       8b 45 08                mov    0x8(%ebp),%eax
c010650d:       0f b6 00                movzbl (%eax),%eax
c0106510:       3c 39                   cmp    $0x39,%al
c0106512:       7f 11                   jg     c0106525 <strtol+0xd2>
            dig = *s - '0';
c0106514:       8b 45 08                mov    0x8(%ebp),%eax
c0106517:       0f b6 00                movzbl (%eax),%eax
c010651a:       0f be c0                movsbl %al,%eax
c010651d:       83 e8 30                sub    $0x30,%eax
c0106520:       89 45 f4                mov    %eax,-0xc(%ebp)
c0106523:       eb 48                   jmp    c010656d <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c0106525:       8b 45 08                mov    0x8(%ebp),%eax
c0106528:       0f b6 00                movzbl (%eax),%eax
c010652b:       3c 60                   cmp    $0x60,%al
c010652d:       7e 1b                   jle    c010654a <strtol+0xf7>
c010652f:       8b 45 08                mov    0x8(%ebp),%eax
c0106532:       0f b6 00                movzbl (%eax),%eax
c0106535:       3c 7a                   cmp    $0x7a,%al
c0106537:       7f 11                   jg     c010654a <strtol+0xf7>
            dig = *s - 'a' + 10;
c0106539:       8b 45 08                mov    0x8(%ebp),%eax
c010653c:       0f b6 00                movzbl (%eax),%eax
c010653f:       0f be c0                movsbl %al,%eax
c0106542:       83 e8 57                sub    $0x57,%eax
c0106545:       89 45 f4                mov    %eax,-0xc(%ebp)
c0106548:       eb 23                   jmp    c010656d <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010654a:       8b 45 08                mov    0x8(%ebp),%eax
c010654d:       0f b6 00                movzbl (%eax),%eax
c0106550:       3c 40                   cmp    $0x40,%al
c0106552:       7e 3d                   jle    c0106591 <strtol+0x13e>
c0106554:       8b 45 08                mov    0x8(%ebp),%eax
c0106557:       0f b6 00                movzbl (%eax),%eax
c010655a:       3c 5a                   cmp    $0x5a,%al
c010655c:       7f 33                   jg     c0106591 <strtol+0x13e>
            dig = *s - 'A' + 10;
c010655e:       8b 45 08                mov    0x8(%ebp),%eax
c0106561:       0f b6 00                movzbl (%eax),%eax
c0106564:       0f be c0                movsbl %al,%eax
c0106567:       83 e8 37                sub    $0x37,%eax
c010656a:       89 45 f4                mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010656d:       8b 45 f4                mov    -0xc(%ebp),%eax
c0106570:       3b 45 10                cmp    0x10(%ebp),%eax
c0106573:       7c 02                   jl     c0106577 <strtol+0x124>
            break;
c0106575:       eb 1a                   jmp    c0106591 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c0106577:       83 45 08 01             addl   $0x1,0x8(%ebp)
c010657b:       8b 45 f8                mov    -0x8(%ebp),%eax
c010657e:       0f af 45 10             imul   0x10(%ebp),%eax
c0106582:       89 c2                   mov    %eax,%edx
c0106584:       8b 45 f4                mov    -0xc(%ebp),%eax
c0106587:       01 d0                   add    %edx,%eax
c0106589:       89 45 f8                mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010658c:       e9 6f ff ff ff          jmp    c0106500 <strtol+0xad>

    if (endptr) {
c0106591:       83 7d 0c 00             cmpl   $0x0,0xc(%ebp)
c0106595:       74 08                   je     c010659f <strtol+0x14c>
        *endptr = (char *) s;
c0106597:       8b 45 0c                mov    0xc(%ebp),%eax
c010659a:       8b 55 08                mov    0x8(%ebp),%edx
c010659d:       89 10                   mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010659f:       83 7d fc 00             cmpl   $0x0,-0x4(%ebp)
c01065a3:       74 07                   je     c01065ac <strtol+0x159>
c01065a5:       8b 45 f8                mov    -0x8(%ebp),%eax
c01065a8:       f7 d8                   neg    %eax
c01065aa:       eb 03                   jmp    c01065af <strtol+0x15c>
c01065ac:       8b 45 f8                mov    -0x8(%ebp),%eax
}
c01065af:       c9                      leave
c01065b0:       c3                      ret

c01065b1 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c01065b1:       55                      push   %ebp
c01065b2:       89 e5                   mov    %esp,%ebp
c01065b4:       57                      push   %edi
c01065b5:       83 ec 24                sub    $0x24,%esp
c01065b8:       8b 45 0c                mov    0xc(%ebp),%eax
c01065bb:       88 45 d8                mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c01065be:       0f be 45 d8             movsbl -0x28(%ebp),%eax
c01065c2:       8b 55 08                mov    0x8(%ebp),%edx
c01065c5:       89 55 f8                mov    %edx,-0x8(%ebp)
c01065c8:       88 45 f7                mov    %al,-0x9(%ebp)
c01065cb:       8b 45 10                mov    0x10(%ebp),%eax
c01065ce:       89 45 f0                mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c01065d1:       8b 4d f0                mov    -0x10(%ebp),%ecx
c01065d4:       0f b6 45 f7             movzbl -0x9(%ebp),%eax
c01065d8:       8b 55 f8                mov    -0x8(%ebp),%edx
c01065db:       89 d7                   mov    %edx,%edi
c01065dd:       f3 aa                   rep stos %al,%es:(%edi)
c01065df:       89 fa                   mov    %edi,%edx
c01065e1:       89 4d ec                mov    %ecx,-0x14(%ebp)
c01065e4:       89 55 e8                mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c01065e7:       8b 45 f8                mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c01065ea:       83 c4 24                add    $0x24,%esp
c01065ed:       5f                      pop    %edi
c01065ee:       5d                      pop    %ebp
c01065ef:       c3                      ret

c01065f0 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c01065f0:       55                      push   %ebp
c01065f1:       89 e5                   mov    %esp,%ebp
c01065f3:       57                      push   %edi
c01065f4:       56                      push   %esi
c01065f5:       53                      push   %ebx
c01065f6:       83 ec 30                sub    $0x30,%esp
c01065f9:       8b 45 08                mov    0x8(%ebp),%eax
c01065fc:       89 45 f0                mov    %eax,-0x10(%ebp)
c01065ff:       8b 45 0c                mov    0xc(%ebp),%eax
c0106602:       89 45 ec                mov    %eax,-0x14(%ebp)
c0106605:       8b 45 10                mov    0x10(%ebp),%eax
c0106608:       89 45 e8                mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010660b:       8b 45 f0                mov    -0x10(%ebp),%eax
c010660e:       3b 45 ec                cmp    -0x14(%ebp),%eax
c0106611:       73 42                   jae    c0106655 <memmove+0x65>
c0106613:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106616:       89 45 e4                mov    %eax,-0x1c(%ebp)
c0106619:       8b 45 ec                mov    -0x14(%ebp),%eax
c010661c:       89 45 e0                mov    %eax,-0x20(%ebp)
c010661f:       8b 45 e8                mov    -0x18(%ebp),%eax
c0106622:       89 45 dc                mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0106625:       8b 45 dc                mov    -0x24(%ebp),%eax
c0106628:       c1 e8 02                shr    $0x2,%eax
c010662b:       89 c1                   mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010662d:       8b 55 e4                mov    -0x1c(%ebp),%edx
c0106630:       8b 45 e0                mov    -0x20(%ebp),%eax
c0106633:       89 d7                   mov    %edx,%edi
c0106635:       89 c6                   mov    %eax,%esi
c0106637:       f3 a5                   rep movsl %ds:(%esi),%es:(%edi)
c0106639:       8b 4d dc                mov    -0x24(%ebp),%ecx
c010663c:       83 e1 03                and    $0x3,%ecx
c010663f:       74 02                   je     c0106643 <memmove+0x53>
c0106641:       f3 a4                   rep movsb %ds:(%esi),%es:(%edi)
c0106643:       89 f0                   mov    %esi,%eax
c0106645:       89 fa                   mov    %edi,%edx
c0106647:       89 4d d8                mov    %ecx,-0x28(%ebp)
c010664a:       89 55 d4                mov    %edx,-0x2c(%ebp)
c010664d:       89 45 d0                mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c0106650:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0106653:       eb 36                   jmp    c010668b <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c0106655:       8b 45 e8                mov    -0x18(%ebp),%eax
c0106658:       8d 50 ff                lea    -0x1(%eax),%edx
c010665b:       8b 45 ec                mov    -0x14(%ebp),%eax
c010665e:       01 c2                   add    %eax,%edx
c0106660:       8b 45 e8                mov    -0x18(%ebp),%eax
c0106663:       8d 48 ff                lea    -0x1(%eax),%ecx
c0106666:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106669:       8d 1c 01                lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010666c:       8b 45 e8                mov    -0x18(%ebp),%eax
c010666f:       89 c1                   mov    %eax,%ecx
c0106671:       89 d8                   mov    %ebx,%eax
c0106673:       89 d6                   mov    %edx,%esi
c0106675:       89 c7                   mov    %eax,%edi
c0106677:       fd                      std
c0106678:       f3 a4                   rep movsb %ds:(%esi),%es:(%edi)
c010667a:       fc                      cld
c010667b:       89 f8                   mov    %edi,%eax
c010667d:       89 f2                   mov    %esi,%edx
c010667f:       89 4d cc                mov    %ecx,-0x34(%ebp)
c0106682:       89 55 c8                mov    %edx,-0x38(%ebp)
c0106685:       89 45 c4                mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c0106688:       8b 45 f0                mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010668b:       83 c4 30                add    $0x30,%esp
c010668e:       5b                      pop    %ebx
c010668f:       5e                      pop    %esi
c0106690:       5f                      pop    %edi
c0106691:       5d                      pop    %ebp
c0106692:       c3                      ret

c0106693 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c0106693:       55                      push   %ebp
c0106694:       89 e5                   mov    %esp,%ebp
c0106696:       57                      push   %edi
c0106697:       56                      push   %esi
c0106698:       83 ec 20                sub    $0x20,%esp
c010669b:       8b 45 08                mov    0x8(%ebp),%eax
c010669e:       89 45 f4                mov    %eax,-0xc(%ebp)
c01066a1:       8b 45 0c                mov    0xc(%ebp),%eax
c01066a4:       89 45 f0                mov    %eax,-0x10(%ebp)
c01066a7:       8b 45 10                mov    0x10(%ebp),%eax
c01066aa:       89 45 ec                mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c01066ad:       8b 45 ec                mov    -0x14(%ebp),%eax
c01066b0:       c1 e8 02                shr    $0x2,%eax
c01066b3:       89 c1                   mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c01066b5:       8b 55 f4                mov    -0xc(%ebp),%edx
c01066b8:       8b 45 f0                mov    -0x10(%ebp),%eax
c01066bb:       89 d7                   mov    %edx,%edi
c01066bd:       89 c6                   mov    %eax,%esi
c01066bf:       f3 a5                   rep movsl %ds:(%esi),%es:(%edi)
c01066c1:       8b 4d ec                mov    -0x14(%ebp),%ecx
c01066c4:       83 e1 03                and    $0x3,%ecx
c01066c7:       74 02                   je     c01066cb <memcpy+0x38>
c01066c9:       f3 a4                   rep movsb %ds:(%esi),%es:(%edi)
c01066cb:       89 f0                   mov    %esi,%eax
c01066cd:       89 fa                   mov    %edi,%edx
c01066cf:       89 4d e8                mov    %ecx,-0x18(%ebp)
c01066d2:       89 55 e4                mov    %edx,-0x1c(%ebp)
c01066d5:       89 45 e0                mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c01066d8:       8b 45 f4                mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c01066db:       83 c4 20                add    $0x20,%esp
c01066de:       5e                      pop    %esi
c01066df:       5f                      pop    %edi
c01066e0:       5d                      pop    %ebp
c01066e1:       c3                      ret

c01066e2 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c01066e2:       55                      push   %ebp
c01066e3:       89 e5                   mov    %esp,%ebp
c01066e5:       83 ec 10                sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c01066e8:       8b 45 08                mov    0x8(%ebp),%eax
c01066eb:       89 45 fc                mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c01066ee:       8b 45 0c                mov    0xc(%ebp),%eax
c01066f1:       89 45 f8                mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c01066f4:       eb 30                   jmp    c0106726 <memcmp+0x44>
        if (*s1 != *s2) {
c01066f6:       8b 45 fc                mov    -0x4(%ebp),%eax
c01066f9:       0f b6 10                movzbl (%eax),%edx
c01066fc:       8b 45 f8                mov    -0x8(%ebp),%eax
c01066ff:       0f b6 00                movzbl (%eax),%eax
c0106702:       38 c2                   cmp    %al,%dl
c0106704:       74 18                   je     c010671e <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c0106706:       8b 45 fc                mov    -0x4(%ebp),%eax
c0106709:       0f b6 00                movzbl (%eax),%eax
c010670c:       0f b6 d0                movzbl %al,%edx
c010670f:       8b 45 f8                mov    -0x8(%ebp),%eax
c0106712:       0f b6 00                movzbl (%eax),%eax
c0106715:       0f b6 c0                movzbl %al,%eax
c0106718:       29 c2                   sub    %eax,%edx
c010671a:       89 d0                   mov    %edx,%eax
c010671c:       eb 1a                   jmp    c0106738 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010671e:       83 45 fc 01             addl   $0x1,-0x4(%ebp)
c0106722:       83 45 f8 01             addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c0106726:       8b 45 10                mov    0x10(%ebp),%eax
c0106729:       8d 50 ff                lea    -0x1(%eax),%edx
c010672c:       89 55 10                mov    %edx,0x10(%ebp)
c010672f:       85 c0                   test   %eax,%eax
c0106731:       75 c3                   jne    c01066f6 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c0106733:       b8 00 00 00 00          mov    $0x0,%eax
}
c0106738:       c9                      leave
c0106739:       c3                      ret

c010673a <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010673a:       55                      push   %ebp
c010673b:       89 e5                   mov    %esp,%ebp
c010673d:       83 ec 58                sub    $0x58,%esp
c0106740:       8b 45 10                mov    0x10(%ebp),%eax
c0106743:       89 45 d0                mov    %eax,-0x30(%ebp)
c0106746:       8b 45 14                mov    0x14(%ebp),%eax
c0106749:       89 45 d4                mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010674c:       8b 45 d0                mov    -0x30(%ebp),%eax
c010674f:       8b 55 d4                mov    -0x2c(%ebp),%edx
c0106752:       89 45 e8                mov    %eax,-0x18(%ebp)
c0106755:       89 55 ec                mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c0106758:       8b 45 18                mov    0x18(%ebp),%eax
c010675b:       89 45 e4                mov    %eax,-0x1c(%ebp)
c010675e:       8b 45 e8                mov    -0x18(%ebp),%eax
c0106761:       8b 55 ec                mov    -0x14(%ebp),%edx
c0106764:       89 45 e0                mov    %eax,-0x20(%ebp)
c0106767:       89 55 f0                mov    %edx,-0x10(%ebp)
c010676a:       8b 45 f0                mov    -0x10(%ebp),%eax
c010676d:       89 45 f4                mov    %eax,-0xc(%ebp)
c0106770:       83 7d f0 00             cmpl   $0x0,-0x10(%ebp)
c0106774:       74 1c                   je     c0106792 <printnum+0x58>
c0106776:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106779:       ba 00 00 00 00          mov    $0x0,%edx
c010677e:       f7 75 e4                divl   -0x1c(%ebp)
c0106781:       89 55 f4                mov    %edx,-0xc(%ebp)
c0106784:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106787:       ba 00 00 00 00          mov    $0x0,%edx
c010678c:       f7 75 e4                divl   -0x1c(%ebp)
c010678f:       89 45 f0                mov    %eax,-0x10(%ebp)
c0106792:       8b 45 e0                mov    -0x20(%ebp),%eax
c0106795:       8b 55 f4                mov    -0xc(%ebp),%edx
c0106798:       f7 75 e4                divl   -0x1c(%ebp)
c010679b:       89 45 e0                mov    %eax,-0x20(%ebp)
c010679e:       89 55 dc                mov    %edx,-0x24(%ebp)
c01067a1:       8b 45 e0                mov    -0x20(%ebp),%eax
c01067a4:       8b 55 f0                mov    -0x10(%ebp),%edx
c01067a7:       89 45 e8                mov    %eax,-0x18(%ebp)
c01067aa:       89 55 ec                mov    %edx,-0x14(%ebp)
c01067ad:       8b 45 dc                mov    -0x24(%ebp),%eax
c01067b0:       89 45 d8                mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c01067b3:       8b 45 18                mov    0x18(%ebp),%eax
c01067b6:       ba 00 00 00 00          mov    $0x0,%edx
c01067bb:       3b 55 d4                cmp    -0x2c(%ebp),%edx
c01067be:       77 56                   ja     c0106816 <printnum+0xdc>
c01067c0:       3b 55 d4                cmp    -0x2c(%ebp),%edx
c01067c3:       72 05                   jb     c01067ca <printnum+0x90>
c01067c5:       3b 45 d0                cmp    -0x30(%ebp),%eax
c01067c8:       77 4c                   ja     c0106816 <printnum+0xdc>
        printnum(putch, putdat, result, base, width - 1, padc);
c01067ca:       8b 45 1c                mov    0x1c(%ebp),%eax
c01067cd:       8d 50 ff                lea    -0x1(%eax),%edx
c01067d0:       8b 45 20                mov    0x20(%ebp),%eax
c01067d3:       89 44 24 18             mov    %eax,0x18(%esp)
c01067d7:       89 54 24 14             mov    %edx,0x14(%esp)
c01067db:       8b 45 18                mov    0x18(%ebp),%eax
c01067de:       89 44 24 10             mov    %eax,0x10(%esp)
c01067e2:       8b 45 e8                mov    -0x18(%ebp),%eax
c01067e5:       8b 55 ec                mov    -0x14(%ebp),%edx
c01067e8:       89 44 24 08             mov    %eax,0x8(%esp)
c01067ec:       89 54 24 0c             mov    %edx,0xc(%esp)
c01067f0:       8b 45 0c                mov    0xc(%ebp),%eax
c01067f3:       89 44 24 04             mov    %eax,0x4(%esp)
c01067f7:       8b 45 08                mov    0x8(%ebp),%eax
c01067fa:       89 04 24                mov    %eax,(%esp)
c01067fd:       e8 38 ff ff ff          call   c010673a <printnum>
c0106802:       eb 1c                   jmp    c0106820 <printnum+0xe6>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c0106804:       8b 45 0c                mov    0xc(%ebp),%eax
c0106807:       89 44 24 04             mov    %eax,0x4(%esp)
c010680b:       8b 45 20                mov    0x20(%ebp),%eax
c010680e:       89 04 24                mov    %eax,(%esp)
c0106811:       8b 45 08                mov    0x8(%ebp),%eax
c0106814:       ff d0                   call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c0106816:       83 6d 1c 01             subl   $0x1,0x1c(%ebp)
c010681a:       83 7d 1c 00             cmpl   $0x0,0x1c(%ebp)
c010681e:       7f e4                   jg     c0106804 <printnum+0xca>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c0106820:       8b 45 d8                mov    -0x28(%ebp),%eax
c0106823:       05 dc 82 10 c0          add    $0xc01082dc,%eax
c0106828:       0f b6 00                movzbl (%eax),%eax
c010682b:       0f be c0                movsbl %al,%eax
c010682e:       8b 55 0c                mov    0xc(%ebp),%edx
c0106831:       89 54 24 04             mov    %edx,0x4(%esp)
c0106835:       89 04 24                mov    %eax,(%esp)
c0106838:       8b 45 08                mov    0x8(%ebp),%eax
c010683b:       ff d0                   call   *%eax
}
c010683d:       c9                      leave
c010683e:       c3                      ret

c010683f <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010683f:       55                      push   %ebp
c0106840:       89 e5                   mov    %esp,%ebp
    if (lflag >= 2) {
c0106842:       83 7d 0c 01             cmpl   $0x1,0xc(%ebp)
c0106846:       7e 14                   jle    c010685c <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c0106848:       8b 45 08                mov    0x8(%ebp),%eax
c010684b:       8b 00                   mov    (%eax),%eax
c010684d:       8d 48 08                lea    0x8(%eax),%ecx
c0106850:       8b 55 08                mov    0x8(%ebp),%edx
c0106853:       89 0a                   mov    %ecx,(%edx)
c0106855:       8b 50 04                mov    0x4(%eax),%edx
c0106858:       8b 00                   mov    (%eax),%eax
c010685a:       eb 30                   jmp    c010688c <getuint+0x4d>
    }
    else if (lflag) {
c010685c:       83 7d 0c 00             cmpl   $0x0,0xc(%ebp)
c0106860:       74 16                   je     c0106878 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c0106862:       8b 45 08                mov    0x8(%ebp),%eax
c0106865:       8b 00                   mov    (%eax),%eax
c0106867:       8d 48 04                lea    0x4(%eax),%ecx
c010686a:       8b 55 08                mov    0x8(%ebp),%edx
c010686d:       89 0a                   mov    %ecx,(%edx)
c010686f:       8b 00                   mov    (%eax),%eax
c0106871:       ba 00 00 00 00          mov    $0x0,%edx
c0106876:       eb 14                   jmp    c010688c <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c0106878:       8b 45 08                mov    0x8(%ebp),%eax
c010687b:       8b 00                   mov    (%eax),%eax
c010687d:       8d 48 04                lea    0x4(%eax),%ecx
c0106880:       8b 55 08                mov    0x8(%ebp),%edx
c0106883:       89 0a                   mov    %ecx,(%edx)
c0106885:       8b 00                   mov    (%eax),%eax
c0106887:       ba 00 00 00 00          mov    $0x0,%edx
    }
}
c010688c:       5d                      pop    %ebp
c010688d:       c3                      ret

c010688e <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010688e:       55                      push   %ebp
c010688f:       89 e5                   mov    %esp,%ebp
    if (lflag >= 2) {
c0106891:       83 7d 0c 01             cmpl   $0x1,0xc(%ebp)
c0106895:       7e 14                   jle    c01068ab <getint+0x1d>
        return va_arg(*ap, long long);
c0106897:       8b 45 08                mov    0x8(%ebp),%eax
c010689a:       8b 00                   mov    (%eax),%eax
c010689c:       8d 48 08                lea    0x8(%eax),%ecx
c010689f:       8b 55 08                mov    0x8(%ebp),%edx
c01068a2:       89 0a                   mov    %ecx,(%edx)
c01068a4:       8b 50 04                mov    0x4(%eax),%edx
c01068a7:       8b 00                   mov    (%eax),%eax
c01068a9:       eb 28                   jmp    c01068d3 <getint+0x45>
    }
    else if (lflag) {
c01068ab:       83 7d 0c 00             cmpl   $0x0,0xc(%ebp)
c01068af:       74 12                   je     c01068c3 <getint+0x35>
        return va_arg(*ap, long);
c01068b1:       8b 45 08                mov    0x8(%ebp),%eax
c01068b4:       8b 00                   mov    (%eax),%eax
c01068b6:       8d 48 04                lea    0x4(%eax),%ecx
c01068b9:       8b 55 08                mov    0x8(%ebp),%edx
c01068bc:       89 0a                   mov    %ecx,(%edx)
c01068be:       8b 00                   mov    (%eax),%eax
c01068c0:       99                      cltd
c01068c1:       eb 10                   jmp    c01068d3 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c01068c3:       8b 45 08                mov    0x8(%ebp),%eax
c01068c6:       8b 00                   mov    (%eax),%eax
c01068c8:       8d 48 04                lea    0x4(%eax),%ecx
c01068cb:       8b 55 08                mov    0x8(%ebp),%edx
c01068ce:       89 0a                   mov    %ecx,(%edx)
c01068d0:       8b 00                   mov    (%eax),%eax
c01068d2:       99                      cltd
    }
}
c01068d3:       5d                      pop    %ebp
c01068d4:       c3                      ret

c01068d5 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c01068d5:       55                      push   %ebp
c01068d6:       89 e5                   mov    %esp,%ebp
c01068d8:       83 ec 28                sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c01068db:       8d 45 14                lea    0x14(%ebp),%eax
c01068de:       89 45 f4                mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c01068e1:       8b 45 f4                mov    -0xc(%ebp),%eax
c01068e4:       89 44 24 0c             mov    %eax,0xc(%esp)
c01068e8:       8b 45 10                mov    0x10(%ebp),%eax
c01068eb:       89 44 24 08             mov    %eax,0x8(%esp)
c01068ef:       8b 45 0c                mov    0xc(%ebp),%eax
c01068f2:       89 44 24 04             mov    %eax,0x4(%esp)
c01068f6:       8b 45 08                mov    0x8(%ebp),%eax
c01068f9:       89 04 24                mov    %eax,(%esp)
c01068fc:       e8 02 00 00 00          call   c0106903 <vprintfmt>
    va_end(ap);
}
c0106901:       c9                      leave
c0106902:       c3                      ret

c0106903 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c0106903:       55                      push   %ebp
c0106904:       89 e5                   mov    %esp,%ebp
c0106906:       56                      push   %esi
c0106907:       53                      push   %ebx
c0106908:       83 ec 40                sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010690b:       eb 18                   jmp    c0106925 <vprintfmt+0x22>
            if (ch == '\0') {
c010690d:       85 db                   test   %ebx,%ebx
c010690f:       75 05                   jne    c0106916 <vprintfmt+0x13>
                return;
c0106911:       e9 d1 03 00 00          jmp    c0106ce7 <vprintfmt+0x3e4>
            }
            putch(ch, putdat);
c0106916:       8b 45 0c                mov    0xc(%ebp),%eax
c0106919:       89 44 24 04             mov    %eax,0x4(%esp)
c010691d:       89 1c 24                mov    %ebx,(%esp)
c0106920:       8b 45 08                mov    0x8(%ebp),%eax
c0106923:       ff d0                   call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0106925:       8b 45 10                mov    0x10(%ebp),%eax
c0106928:       8d 50 01                lea    0x1(%eax),%edx
c010692b:       89 55 10                mov    %edx,0x10(%ebp)
c010692e:       0f b6 00                movzbl (%eax),%eax
c0106931:       0f b6 d8                movzbl %al,%ebx
c0106934:       83 fb 25                cmp    $0x25,%ebx
c0106937:       75 d4                   jne    c010690d <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c0106939:       c6 45 db 20             movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010693d:       c7 45 e4 ff ff ff ff    movl   $0xffffffff,-0x1c(%ebp)
c0106944:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0106947:       89 45 e8                mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010694a:       c7 45 dc 00 00 00 00    movl   $0x0,-0x24(%ebp)
c0106951:       8b 45 dc                mov    -0x24(%ebp),%eax
c0106954:       89 45 e0                mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c0106957:       8b 45 10                mov    0x10(%ebp),%eax
c010695a:       8d 50 01                lea    0x1(%eax),%edx
c010695d:       89 55 10                mov    %edx,0x10(%ebp)
c0106960:       0f b6 00                movzbl (%eax),%eax
c0106963:       0f b6 d8                movzbl %al,%ebx
c0106966:       8d 43 dd                lea    -0x23(%ebx),%eax
c0106969:       83 f8 55                cmp    $0x55,%eax
c010696c:       0f 87 44 03 00 00       ja     c0106cb6 <vprintfmt+0x3b3>
c0106972:       8b 04 85 00 83 10 c0    mov    -0x3fef7d00(,%eax,4),%eax
c0106979:       ff e0                   jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010697b:       c6 45 db 2d             movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010697f:       eb d6                   jmp    c0106957 <vprintfmt+0x54>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0106981:       c6 45 db 30             movb   $0x30,-0x25(%ebp)
            goto reswitch;
c0106985:       eb d0                   jmp    c0106957 <vprintfmt+0x54>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0106987:       c7 45 e4 00 00 00 00    movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010698e:       8b 55 e4                mov    -0x1c(%ebp),%edx
c0106991:       89 d0                   mov    %edx,%eax
c0106993:       c1 e0 02                shl    $0x2,%eax
c0106996:       01 d0                   add    %edx,%eax
c0106998:       01 c0                   add    %eax,%eax
c010699a:       01 d8                   add    %ebx,%eax
c010699c:       83 e8 30                sub    $0x30,%eax
c010699f:       89 45 e4                mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c01069a2:       8b 45 10                mov    0x10(%ebp),%eax
c01069a5:       0f b6 00                movzbl (%eax),%eax
c01069a8:       0f be d8                movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c01069ab:       83 fb 2f                cmp    $0x2f,%ebx
c01069ae:       7e 0b                   jle    c01069bb <vprintfmt+0xb8>
c01069b0:       83 fb 39                cmp    $0x39,%ebx
c01069b3:       7f 06                   jg     c01069bb <vprintfmt+0xb8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c01069b5:       83 45 10 01             addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c01069b9:       eb d3                   jmp    c010698e <vprintfmt+0x8b>
            goto process_precision;
c01069bb:       eb 33                   jmp    c01069f0 <vprintfmt+0xed>

        case '*':
            precision = va_arg(ap, int);
c01069bd:       8b 45 14                mov    0x14(%ebp),%eax
c01069c0:       8d 50 04                lea    0x4(%eax),%edx
c01069c3:       89 55 14                mov    %edx,0x14(%ebp)
c01069c6:       8b 00                   mov    (%eax),%eax
c01069c8:       89 45 e4                mov    %eax,-0x1c(%ebp)
            goto process_precision;
c01069cb:       eb 23                   jmp    c01069f0 <vprintfmt+0xed>

        case '.':
            if (width < 0)
c01069cd:       83 7d e8 00             cmpl   $0x0,-0x18(%ebp)
c01069d1:       79 0c                   jns    c01069df <vprintfmt+0xdc>
                width = 0;
c01069d3:       c7 45 e8 00 00 00 00    movl   $0x0,-0x18(%ebp)
            goto reswitch;
c01069da:       e9 78 ff ff ff          jmp    c0106957 <vprintfmt+0x54>
c01069df:       e9 73 ff ff ff          jmp    c0106957 <vprintfmt+0x54>

        case '#':
            altflag = 1;
c01069e4:       c7 45 dc 01 00 00 00    movl   $0x1,-0x24(%ebp)
            goto reswitch;
c01069eb:       e9 67 ff ff ff          jmp    c0106957 <vprintfmt+0x54>

        process_precision:
            if (width < 0)
c01069f0:       83 7d e8 00             cmpl   $0x0,-0x18(%ebp)
c01069f4:       79 12                   jns    c0106a08 <vprintfmt+0x105>
                width = precision, precision = -1;
c01069f6:       8b 45 e4                mov    -0x1c(%ebp),%eax
c01069f9:       89 45 e8                mov    %eax,-0x18(%ebp)
c01069fc:       c7 45 e4 ff ff ff ff    movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c0106a03:       e9 4f ff ff ff          jmp    c0106957 <vprintfmt+0x54>
c0106a08:       e9 4a ff ff ff          jmp    c0106957 <vprintfmt+0x54>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c0106a0d:       83 45 e0 01             addl   $0x1,-0x20(%ebp)
            goto reswitch;
c0106a11:       e9 41 ff ff ff          jmp    c0106957 <vprintfmt+0x54>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c0106a16:       8b 45 14                mov    0x14(%ebp),%eax
c0106a19:       8d 50 04                lea    0x4(%eax),%edx
c0106a1c:       89 55 14                mov    %edx,0x14(%ebp)
c0106a1f:       8b 00                   mov    (%eax),%eax
c0106a21:       8b 55 0c                mov    0xc(%ebp),%edx
c0106a24:       89 54 24 04             mov    %edx,0x4(%esp)
c0106a28:       89 04 24                mov    %eax,(%esp)
c0106a2b:       8b 45 08                mov    0x8(%ebp),%eax
c0106a2e:       ff d0                   call   *%eax
            break;
c0106a30:       e9 ac 02 00 00          jmp    c0106ce1 <vprintfmt+0x3de>

        // error message
        case 'e':
            err = va_arg(ap, int);
c0106a35:       8b 45 14                mov    0x14(%ebp),%eax
c0106a38:       8d 50 04                lea    0x4(%eax),%edx
c0106a3b:       89 55 14                mov    %edx,0x14(%ebp)
c0106a3e:       8b 18                   mov    (%eax),%ebx
            if (err < 0) {
c0106a40:       85 db                   test   %ebx,%ebx
c0106a42:       79 02                   jns    c0106a46 <vprintfmt+0x143>
                err = -err;
c0106a44:       f7 db                   neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0106a46:       83 fb 06                cmp    $0x6,%ebx
c0106a49:       7f 0b                   jg     c0106a56 <vprintfmt+0x153>
c0106a4b:       8b 34 9d c0 82 10 c0    mov    -0x3fef7d40(,%ebx,4),%esi
c0106a52:       85 f6                   test   %esi,%esi
c0106a54:       75 23                   jne    c0106a79 <vprintfmt+0x176>
                printfmt(putch, putdat, "error %d", err);
c0106a56:       89 5c 24 0c             mov    %ebx,0xc(%esp)
c0106a5a:       c7 44 24 08 ed 82 10    movl   $0xc01082ed,0x8(%esp)
c0106a61:       c0
c0106a62:       8b 45 0c                mov    0xc(%ebp),%eax
c0106a65:       89 44 24 04             mov    %eax,0x4(%esp)
c0106a69:       8b 45 08                mov    0x8(%ebp),%eax
c0106a6c:       89 04 24                mov    %eax,(%esp)
c0106a6f:       e8 61 fe ff ff          call   c01068d5 <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c0106a74:       e9 68 02 00 00          jmp    c0106ce1 <vprintfmt+0x3de>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c0106a79:       89 74 24 0c             mov    %esi,0xc(%esp)
c0106a7d:       c7 44 24 08 f6 82 10    movl   $0xc01082f6,0x8(%esp)
c0106a84:       c0
c0106a85:       8b 45 0c                mov    0xc(%ebp),%eax
c0106a88:       89 44 24 04             mov    %eax,0x4(%esp)
c0106a8c:       8b 45 08                mov    0x8(%ebp),%eax
c0106a8f:       89 04 24                mov    %eax,(%esp)
c0106a92:       e8 3e fe ff ff          call   c01068d5 <printfmt>
            }
            break;
c0106a97:       e9 45 02 00 00          jmp    c0106ce1 <vprintfmt+0x3de>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c0106a9c:       8b 45 14                mov    0x14(%ebp),%eax
c0106a9f:       8d 50 04                lea    0x4(%eax),%edx
c0106aa2:       89 55 14                mov    %edx,0x14(%ebp)
c0106aa5:       8b 30                   mov    (%eax),%esi
c0106aa7:       85 f6                   test   %esi,%esi
c0106aa9:       75 05                   jne    c0106ab0 <vprintfmt+0x1ad>
                p = "(null)";
c0106aab:       be f9 82 10 c0          mov    $0xc01082f9,%esi
            }
            if (width > 0 && padc != '-') {
c0106ab0:       83 7d e8 00             cmpl   $0x0,-0x18(%ebp)
c0106ab4:       7e 3e                   jle    c0106af4 <vprintfmt+0x1f1>
c0106ab6:       80 7d db 2d             cmpb   $0x2d,-0x25(%ebp)
c0106aba:       74 38                   je     c0106af4 <vprintfmt+0x1f1>
                for (width -= strnlen(p, precision); width > 0; width --) {
c0106abc:       8b 5d e8                mov    -0x18(%ebp),%ebx
c0106abf:       8b 45 e4                mov    -0x1c(%ebp),%eax
c0106ac2:       89 44 24 04             mov    %eax,0x4(%esp)
c0106ac6:       89 34 24                mov    %esi,(%esp)
c0106ac9:       e8 dc f7 ff ff          call   c01062aa <strnlen>
c0106ace:       29 c3                   sub    %eax,%ebx
c0106ad0:       89 d8                   mov    %ebx,%eax
c0106ad2:       89 45 e8                mov    %eax,-0x18(%ebp)
c0106ad5:       eb 17                   jmp    c0106aee <vprintfmt+0x1eb>
                    putch(padc, putdat);
c0106ad7:       0f be 45 db             movsbl -0x25(%ebp),%eax
c0106adb:       8b 55 0c                mov    0xc(%ebp),%edx
c0106ade:       89 54 24 04             mov    %edx,0x4(%esp)
c0106ae2:       89 04 24                mov    %eax,(%esp)
c0106ae5:       8b 45 08                mov    0x8(%ebp),%eax
c0106ae8:       ff d0                   call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c0106aea:       83 6d e8 01             subl   $0x1,-0x18(%ebp)
c0106aee:       83 7d e8 00             cmpl   $0x0,-0x18(%ebp)
c0106af2:       7f e3                   jg     c0106ad7 <vprintfmt+0x1d4>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0106af4:       eb 38                   jmp    c0106b2e <vprintfmt+0x22b>
                if (altflag && (ch < ' ' || ch > '~')) {
c0106af6:       83 7d dc 00             cmpl   $0x0,-0x24(%ebp)
c0106afa:       74 1f                   je     c0106b1b <vprintfmt+0x218>
c0106afc:       83 fb 1f                cmp    $0x1f,%ebx
c0106aff:       7e 05                   jle    c0106b06 <vprintfmt+0x203>
c0106b01:       83 fb 7e                cmp    $0x7e,%ebx
c0106b04:       7e 15                   jle    c0106b1b <vprintfmt+0x218>
                    putch('?', putdat);
c0106b06:       8b 45 0c                mov    0xc(%ebp),%eax
c0106b09:       89 44 24 04             mov    %eax,0x4(%esp)
c0106b0d:       c7 04 24 3f 00 00 00    movl   $0x3f,(%esp)
c0106b14:       8b 45 08                mov    0x8(%ebp),%eax
c0106b17:       ff d0                   call   *%eax
c0106b19:       eb 0f                   jmp    c0106b2a <vprintfmt+0x227>
                }
                else {
                    putch(ch, putdat);
c0106b1b:       8b 45 0c                mov    0xc(%ebp),%eax
c0106b1e:       89 44 24 04             mov    %eax,0x4(%esp)
c0106b22:       89 1c 24                mov    %ebx,(%esp)
c0106b25:       8b 45 08                mov    0x8(%ebp),%eax
c0106b28:       ff d0                   call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0106b2a:       83 6d e8 01             subl   $0x1,-0x18(%ebp)
c0106b2e:       89 f0                   mov    %esi,%eax
c0106b30:       8d 70 01                lea    0x1(%eax),%esi
c0106b33:       0f b6 00                movzbl (%eax),%eax
c0106b36:       0f be d8                movsbl %al,%ebx
c0106b39:       85 db                   test   %ebx,%ebx
c0106b3b:       74 10                   je     c0106b4d <vprintfmt+0x24a>
c0106b3d:       83 7d e4 00             cmpl   $0x0,-0x1c(%ebp)
c0106b41:       78 b3                   js     c0106af6 <vprintfmt+0x1f3>
c0106b43:       83 6d e4 01             subl   $0x1,-0x1c(%ebp)
c0106b47:       83 7d e4 00             cmpl   $0x0,-0x1c(%ebp)
c0106b4b:       79 a9                   jns    c0106af6 <vprintfmt+0x1f3>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c0106b4d:       eb 17                   jmp    c0106b66 <vprintfmt+0x263>
                putch(' ', putdat);
c0106b4f:       8b 45 0c                mov    0xc(%ebp),%eax
c0106b52:       89 44 24 04             mov    %eax,0x4(%esp)
c0106b56:       c7 04 24 20 00 00 00    movl   $0x20,(%esp)
c0106b5d:       8b 45 08                mov    0x8(%ebp),%eax
c0106b60:       ff d0                   call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c0106b62:       83 6d e8 01             subl   $0x1,-0x18(%ebp)
c0106b66:       83 7d e8 00             cmpl   $0x0,-0x18(%ebp)
c0106b6a:       7f e3                   jg     c0106b4f <vprintfmt+0x24c>
                putch(' ', putdat);
            }
            break;
c0106b6c:       e9 70 01 00 00          jmp    c0106ce1 <vprintfmt+0x3de>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c0106b71:       8b 45 e0                mov    -0x20(%ebp),%eax
c0106b74:       89 44 24 04             mov    %eax,0x4(%esp)
c0106b78:       8d 45 14                lea    0x14(%ebp),%eax
c0106b7b:       89 04 24                mov    %eax,(%esp)
c0106b7e:       e8 0b fd ff ff          call   c010688e <getint>
c0106b83:       89 45 f0                mov    %eax,-0x10(%ebp)
c0106b86:       89 55 f4                mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c0106b89:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106b8c:       8b 55 f4                mov    -0xc(%ebp),%edx
c0106b8f:       85 d2                   test   %edx,%edx
c0106b91:       79 26                   jns    c0106bb9 <vprintfmt+0x2b6>
                putch('-', putdat);
c0106b93:       8b 45 0c                mov    0xc(%ebp),%eax
c0106b96:       89 44 24 04             mov    %eax,0x4(%esp)
c0106b9a:       c7 04 24 2d 00 00 00    movl   $0x2d,(%esp)
c0106ba1:       8b 45 08                mov    0x8(%ebp),%eax
c0106ba4:       ff d0                   call   *%eax
                num = -(long long)num;
c0106ba6:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106ba9:       8b 55 f4                mov    -0xc(%ebp),%edx
c0106bac:       f7 d8                   neg    %eax
c0106bae:       83 d2 00                adc    $0x0,%edx
c0106bb1:       f7 da                   neg    %edx
c0106bb3:       89 45 f0                mov    %eax,-0x10(%ebp)
c0106bb6:       89 55 f4                mov    %edx,-0xc(%ebp)
            }
            base = 10;
c0106bb9:       c7 45 ec 0a 00 00 00    movl   $0xa,-0x14(%ebp)
            goto number;
c0106bc0:       e9 a8 00 00 00          jmp    c0106c6d <vprintfmt+0x36a>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c0106bc5:       8b 45 e0                mov    -0x20(%ebp),%eax
c0106bc8:       89 44 24 04             mov    %eax,0x4(%esp)
c0106bcc:       8d 45 14                lea    0x14(%ebp),%eax
c0106bcf:       89 04 24                mov    %eax,(%esp)
c0106bd2:       e8 68 fc ff ff          call   c010683f <getuint>
c0106bd7:       89 45 f0                mov    %eax,-0x10(%ebp)
c0106bda:       89 55 f4                mov    %edx,-0xc(%ebp)
            base = 10;
c0106bdd:       c7 45 ec 0a 00 00 00    movl   $0xa,-0x14(%ebp)
            goto number;
c0106be4:       e9 84 00 00 00          jmp    c0106c6d <vprintfmt+0x36a>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c0106be9:       8b 45 e0                mov    -0x20(%ebp),%eax
c0106bec:       89 44 24 04             mov    %eax,0x4(%esp)
c0106bf0:       8d 45 14                lea    0x14(%ebp),%eax
c0106bf3:       89 04 24                mov    %eax,(%esp)
c0106bf6:       e8 44 fc ff ff          call   c010683f <getuint>
c0106bfb:       89 45 f0                mov    %eax,-0x10(%ebp)
c0106bfe:       89 55 f4                mov    %edx,-0xc(%ebp)
            base = 8;
c0106c01:       c7 45 ec 08 00 00 00    movl   $0x8,-0x14(%ebp)
            goto number;
c0106c08:       eb 63                   jmp    c0106c6d <vprintfmt+0x36a>

        // pointer
        case 'p':
            putch('0', putdat);
c0106c0a:       8b 45 0c                mov    0xc(%ebp),%eax
c0106c0d:       89 44 24 04             mov    %eax,0x4(%esp)
c0106c11:       c7 04 24 30 00 00 00    movl   $0x30,(%esp)
c0106c18:       8b 45 08                mov    0x8(%ebp),%eax
c0106c1b:       ff d0                   call   *%eax
            putch('x', putdat);
c0106c1d:       8b 45 0c                mov    0xc(%ebp),%eax
c0106c20:       89 44 24 04             mov    %eax,0x4(%esp)
c0106c24:       c7 04 24 78 00 00 00    movl   $0x78,(%esp)
c0106c2b:       8b 45 08                mov    0x8(%ebp),%eax
c0106c2e:       ff d0                   call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c0106c30:       8b 45 14                mov    0x14(%ebp),%eax
c0106c33:       8d 50 04                lea    0x4(%eax),%edx
c0106c36:       89 55 14                mov    %edx,0x14(%ebp)
c0106c39:       8b 00                   mov    (%eax),%eax
c0106c3b:       89 45 f0                mov    %eax,-0x10(%ebp)
c0106c3e:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
            base = 16;
c0106c45:       c7 45 ec 10 00 00 00    movl   $0x10,-0x14(%ebp)
            goto number;
c0106c4c:       eb 1f                   jmp    c0106c6d <vprintfmt+0x36a>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c0106c4e:       8b 45 e0                mov    -0x20(%ebp),%eax
c0106c51:       89 44 24 04             mov    %eax,0x4(%esp)
c0106c55:       8d 45 14                lea    0x14(%ebp),%eax
c0106c58:       89 04 24                mov    %eax,(%esp)
c0106c5b:       e8 df fb ff ff          call   c010683f <getuint>
c0106c60:       89 45 f0                mov    %eax,-0x10(%ebp)
c0106c63:       89 55 f4                mov    %edx,-0xc(%ebp)
            base = 16;
c0106c66:       c7 45 ec 10 00 00 00    movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c0106c6d:       0f be 55 db             movsbl -0x25(%ebp),%edx
c0106c71:       8b 45 ec                mov    -0x14(%ebp),%eax
c0106c74:       89 54 24 18             mov    %edx,0x18(%esp)
c0106c78:       8b 55 e8                mov    -0x18(%ebp),%edx
c0106c7b:       89 54 24 14             mov    %edx,0x14(%esp)
c0106c7f:       89 44 24 10             mov    %eax,0x10(%esp)
c0106c83:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106c86:       8b 55 f4                mov    -0xc(%ebp),%edx
c0106c89:       89 44 24 08             mov    %eax,0x8(%esp)
c0106c8d:       89 54 24 0c             mov    %edx,0xc(%esp)
c0106c91:       8b 45 0c                mov    0xc(%ebp),%eax
c0106c94:       89 44 24 04             mov    %eax,0x4(%esp)
c0106c98:       8b 45 08                mov    0x8(%ebp),%eax
c0106c9b:       89 04 24                mov    %eax,(%esp)
c0106c9e:       e8 97 fa ff ff          call   c010673a <printnum>
            break;
c0106ca3:       eb 3c                   jmp    c0106ce1 <vprintfmt+0x3de>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c0106ca5:       8b 45 0c                mov    0xc(%ebp),%eax
c0106ca8:       89 44 24 04             mov    %eax,0x4(%esp)
c0106cac:       89 1c 24                mov    %ebx,(%esp)
c0106caf:       8b 45 08                mov    0x8(%ebp),%eax
c0106cb2:       ff d0                   call   *%eax
            break;
c0106cb4:       eb 2b                   jmp    c0106ce1 <vprintfmt+0x3de>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c0106cb6:       8b 45 0c                mov    0xc(%ebp),%eax
c0106cb9:       89 44 24 04             mov    %eax,0x4(%esp)
c0106cbd:       c7 04 24 25 00 00 00    movl   $0x25,(%esp)
c0106cc4:       8b 45 08                mov    0x8(%ebp),%eax
c0106cc7:       ff d0                   call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c0106cc9:       83 6d 10 01             subl   $0x1,0x10(%ebp)
c0106ccd:       eb 04                   jmp    c0106cd3 <vprintfmt+0x3d0>
c0106ccf:       83 6d 10 01             subl   $0x1,0x10(%ebp)
c0106cd3:       8b 45 10                mov    0x10(%ebp),%eax
c0106cd6:       83 e8 01                sub    $0x1,%eax
c0106cd9:       0f b6 00                movzbl (%eax),%eax
c0106cdc:       3c 25                   cmp    $0x25,%al
c0106cde:       75 ef                   jne    c0106ccf <vprintfmt+0x3cc>
                /* do nothing */;
            break;
c0106ce0:       90                      nop
        }
    }
c0106ce1:       90                      nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0106ce2:       e9 3e fc ff ff          jmp    c0106925 <vprintfmt+0x22>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c0106ce7:       83 c4 40                add    $0x40,%esp
c0106cea:       5b                      pop    %ebx
c0106ceb:       5e                      pop    %esi
c0106cec:       5d                      pop    %ebp
c0106ced:       c3                      ret

c0106cee <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c0106cee:       55                      push   %ebp
c0106cef:       89 e5                   mov    %esp,%ebp
    b->cnt ++;
c0106cf1:       8b 45 0c                mov    0xc(%ebp),%eax
c0106cf4:       8b 40 08                mov    0x8(%eax),%eax
c0106cf7:       8d 50 01                lea    0x1(%eax),%edx
c0106cfa:       8b 45 0c                mov    0xc(%ebp),%eax
c0106cfd:       89 50 08                mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c0106d00:       8b 45 0c                mov    0xc(%ebp),%eax
c0106d03:       8b 10                   mov    (%eax),%edx
c0106d05:       8b 45 0c                mov    0xc(%ebp),%eax
c0106d08:       8b 40 04                mov    0x4(%eax),%eax
c0106d0b:       39 c2                   cmp    %eax,%edx
c0106d0d:       73 12                   jae    c0106d21 <sprintputch+0x33>
        *b->buf ++ = ch;
c0106d0f:       8b 45 0c                mov    0xc(%ebp),%eax
c0106d12:       8b 00                   mov    (%eax),%eax
c0106d14:       8d 48 01                lea    0x1(%eax),%ecx
c0106d17:       8b 55 0c                mov    0xc(%ebp),%edx
c0106d1a:       89 0a                   mov    %ecx,(%edx)
c0106d1c:       8b 55 08                mov    0x8(%ebp),%edx
c0106d1f:       88 10                   mov    %dl,(%eax)
    }
}
c0106d21:       5d                      pop    %ebp
c0106d22:       c3                      ret

c0106d23 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c0106d23:       55                      push   %ebp
c0106d24:       89 e5                   mov    %esp,%ebp
c0106d26:       83 ec 28                sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0106d29:       8d 45 14                lea    0x14(%ebp),%eax
c0106d2c:       89 45 f0                mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c0106d2f:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106d32:       89 44 24 0c             mov    %eax,0xc(%esp)
c0106d36:       8b 45 10                mov    0x10(%ebp),%eax
c0106d39:       89 44 24 08             mov    %eax,0x8(%esp)
c0106d3d:       8b 45 0c                mov    0xc(%ebp),%eax
c0106d40:       89 44 24 04             mov    %eax,0x4(%esp)
c0106d44:       8b 45 08                mov    0x8(%ebp),%eax
c0106d47:       89 04 24                mov    %eax,(%esp)
c0106d4a:       e8 08 00 00 00          call   c0106d57 <vsnprintf>
c0106d4f:       89 45 f4                mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0106d52:       8b 45 f4                mov    -0xc(%ebp),%eax
}
c0106d55:       c9                      leave
c0106d56:       c3                      ret

c0106d57 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c0106d57:       55                      push   %ebp
c0106d58:       89 e5                   mov    %esp,%ebp
c0106d5a:       83 ec 28                sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c0106d5d:       8b 45 08                mov    0x8(%ebp),%eax
c0106d60:       89 45 ec                mov    %eax,-0x14(%ebp)
c0106d63:       8b 45 0c                mov    0xc(%ebp),%eax
c0106d66:       8d 50 ff                lea    -0x1(%eax),%edx
c0106d69:       8b 45 08                mov    0x8(%ebp),%eax
c0106d6c:       01 d0                   add    %edx,%eax
c0106d6e:       89 45 f0                mov    %eax,-0x10(%ebp)
c0106d71:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c0106d78:       83 7d 08 00             cmpl   $0x0,0x8(%ebp)
c0106d7c:       74 0a                   je     c0106d88 <vsnprintf+0x31>
c0106d7e:       8b 55 ec                mov    -0x14(%ebp),%edx
c0106d81:       8b 45 f0                mov    -0x10(%ebp),%eax
c0106d84:       39 c2                   cmp    %eax,%edx
c0106d86:       76 07                   jbe    c0106d8f <vsnprintf+0x38>
        return -E_INVAL;
c0106d88:       b8 fd ff ff ff          mov    $0xfffffffd,%eax
c0106d8d:       eb 2a                   jmp    c0106db9 <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c0106d8f:       8b 45 14                mov    0x14(%ebp),%eax
c0106d92:       89 44 24 0c             mov    %eax,0xc(%esp)
c0106d96:       8b 45 10                mov    0x10(%ebp),%eax
c0106d99:       89 44 24 08             mov    %eax,0x8(%esp)
c0106d9d:       8d 45 ec                lea    -0x14(%ebp),%eax
c0106da0:       89 44 24 04             mov    %eax,0x4(%esp)
c0106da4:       c7 04 24 ee 6c 10 c0    movl   $0xc0106cee,(%esp)
c0106dab:       e8 53 fb ff ff          call   c0106903 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c0106db0:       8b 45 ec                mov    -0x14(%ebp),%eax
c0106db3:       c6 00 00                movb   $0x0,(%eax)
    return b.cnt;
c0106db6:       8b 45 f4                mov    -0xc(%ebp),%eax
}
c0106db9:       c9                      leave
c0106dba:       c3                      ret
